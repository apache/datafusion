# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

name: Datafusion extended tests

concurrency:
  group: ${{ github.repository }}-${{ github.head_ref || github.sha }}-${{ github.workflow }}
  cancel-in-progress: true

# https://docs.github.com/en/actions/writing-workflows/choosing-when-your-workflow-runs/events-that-trigger-workflows#running-your-pull_request-workflow-when-a-pull-request-merges
#
# These jobs are not run as part of PR checks as they are time-consuming
# and should not fail often.
#
# We still run them as they provide important coverage to ensure correctness
# in the (very rare) event of a hash failure or sqlite library query failure.
on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'Pull request number'
        type: string
      check_run_id:
        description: 'Check run ID for status updates'
        type: string
      pr_head_sha:
        description: 'PR head SHA'
        type: string

permissions:
  contents: read
  checks: write
      
jobs:

  # Check crate compiles and base cargo check passes
  linux-build-lib:
    name: linux build test
    runs-on: ubuntu-latest
    # note: do not use amd/rust container to preserve disk space
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
          fetch-depth: 1
      - name: Install Rust
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
          source $HOME/.cargo/env
          rustup toolchain install
      - name: Install Protobuf Compiler
        run: sudo apt-get install -y protobuf-compiler
      - name: Prepare cargo build
        run: |
          cargo check --profile ci --all-targets
          cargo clean

  # Run extended tests (with feature 'extended_tests')
  linux-test-extended:
    name: cargo test 'extended_tests' (amd64)
    needs: [linux-build-lib]
    runs-on: ubuntu-latest
    # note: do not use amd/rust container to preserve disk space
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
          fetch-depth: 1
      - name: Free Disk Space (Ubuntu)
        uses: jlumbroso/free-disk-space@54081f138730dfa15788a46383842cd2f914a1be
      - name: Install Rust
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
          source $HOME/.cargo/env
          rustup toolchain install
      - name: Install Protobuf Compiler
        run: sudo apt-get install -y protobuf-compiler
      # For debugging, test binaries can be large.
      - name: Show available disk space
        run: |
          df -h
      - name: Run tests (excluding doctests)
        env:
          RUST_BACKTRACE: 1
        run: cargo test --profile ci --exclude datafusion-examples --exclude datafusion-benchmarks --workspace --lib --tests --bins --features avro,json,backtrace,extended_tests,recursive_protection
      - name: Verify Working Directory Clean
        run: git diff --exit-code
      - name: Cleanup
        run: cargo clean

  # Check answers are correct when hash values collide
  hash-collisions:
    name: cargo test hash collisions (amd64)
    runs-on: ubuntu-latest
    container:
      image: amd64/rust
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
          fetch-depth: 1
      - name: Setup Rust toolchain
        uses: ./.github/actions/setup-builder
        with:
          rust-version: stable
      - name: Run tests
        run: |
          cd datafusion
          cargo test  --profile ci --exclude datafusion-examples --exclude datafusion-benchmarks --exclude datafusion-sqllogictest --workspace --lib --tests --features=force_hash_collisions,avro
          cargo clean

  sqllogictest-sqlite:
    name: "Run sqllogictests with the sqlite test suite"
    runs-on: ubuntu-latest
    container:
      image: amd64/rust
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
          fetch-depth: 1
      - name: Setup Rust toolchain
        uses: ./.github/actions/setup-builder
        with:
          rust-version: stable
      - name: Run sqllogictest
        run: |
          cargo test --features backtrace --profile release-nonlto --test sqllogictests -- --include-sqlite
          cargo clean

  # If the workflow was triggered by the PR comment (through pr_comment_commands.yml action) we need to manually update check status to display in UI
  update-check-status:
    needs: [linux-build-lib, linux-test-extended, hash-collisions, sqllogictest-sqlite]
    runs-on: ubuntu-latest
    if: ${{ always() && github.event_name == 'workflow_dispatch' }}
    steps:
      - name: Determine workflow status
        id: status
        run: |
          if [[ "${{ contains(needs.*.result, 'failure') || contains(needs.*.result, 'cancelled') }}" == "true" ]]; then
            echo "workflow_status=failure" >> $GITHUB_OUTPUT
            echo "conclusion=failure" >> $GITHUB_OUTPUT
          else
            echo "workflow_status=completed" >> $GITHUB_OUTPUT
            echo "conclusion=success" >> $GITHUB_OUTPUT
          fi
      
      - name: Update check run
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const workflowRunUrl = `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`;
            
            await github.rest.checks.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              check_run_id: ${{ github.event.inputs.check_run_id }},
              status: 'completed',
              conclusion: '${{ steps.status.outputs.conclusion }}',
              output: {
                title: '${{ steps.status.outputs.conclusion == 'success' && 'Extended Tests Passed' || 'Extended Tests Failed' }}',
                summary: `Extended tests have completed with status: ${{ steps.status.outputs.conclusion }}.\n\n[View workflow run](${workflowRunUrl})`
              },
              details_url: workflowRunUrl
            });





