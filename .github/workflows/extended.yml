# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

name: Datafusion extended tests

concurrency:
  group: ${{ github.repository }}-${{ github.head_ref || github.sha }}-${{ github.workflow }}
  cancel-in-progress: true

# https://docs.github.com/en/actions/writing-workflows/choosing-when-your-workflow-runs/events-that-trigger-workflows#running-your-pull_request-workflow-when-a-pull-request-merges
#
# These jobs are not run as part of PR checks as they are time-consuming
# and should not fail often.
#
# We still run them as they provide important coverage to ensure correctness
# in the (very rare) event of a hash failure or sqlite library query failure.
on:
  push:

jobs:
  # Check crate compiles and base cargo check passes
  linux-build-lib:
    name: linux build test
    runs-on: ubuntu-latest
    # note: do not use amd/rust container to preserve disk space
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
          fetch-depth: 1
      - name: Install Rust
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
          source $HOME/.cargo/env
          rustup toolchain install
      - name: Install Protobuf Compiler
        run: sudo apt-get install -y protobuf-compiler
      - name: Prepare cargo build
        run: |
          cargo check --profile ci --all-targets
          cargo clean

  # Run extended tests (with feature 'extended_tests' and storage tests)
  linux-test-extended:
    name: cargo test 'extended_tests' (amd64)
    needs: linux-build-lib
    runs-on: ubuntu-latest
    # note: do not use amd/rust container to preserve disk space
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
          fetch-depth: 1
      - name: Free Disk Space (Ubuntu)
        uses: jlumbroso/free-disk-space@54081f138730dfa15788a46383842cd2f914a1be
      - name: Setup Rust toolchain
        run: |
          rustup toolchain install stable
          rustup toolchain install
      - name: Install Protobuf Compiler
        run: sudo apt-get install -y protobuf-compiler
      - name: Setup Minio - S3-compatible storage
        working-directory: datafusion-cli
        run: |
          docker run -d --name minio-container \
            -p 9000:9000 \
            -e MINIO_ROOT_USER=TEST-DataFusionLogin -e MINIO_ROOT_PASSWORD=TEST-DataFusionPassword \
            -v $(pwd)/../datafusion/core/tests/data:/source quay.io/minio/minio \
            server /data
          docker exec minio-container /bin/sh -c "\
            mc ready local
            mc alias set localminio http://localhost:9000 TEST-DataFusionLogin TEST-DataFusionPassword && \
            mc mb localminio/data && \
            mc cp -r /source/* localminio/data"
      # For debugging, test binaries can be large.
      - name: Show available disk space
        run: |
          df -h
      - name: Run tests (excluding doctests)
        env:
          RUST_BACKTRACE: 1
          AWS_ENDPOINT: http://127.0.0.1:9000
          AWS_ACCESS_KEY_ID: TEST-DataFusionLogin
          AWS_SECRET_ACCESS_KEY: TEST-DataFusionPassword
          TEST_STORAGE_INTEGRATION: 1
          AWS_ALLOW_HTTP: true
        run: cargo test --profile ci --exclude datafusion-examples --exclude datafusion-benchmarks --workspace --lib --tests --bins --features avro,json,backtrace,extended_tests
      - name: Verify Working Directory Clean
        run: git diff --exit-code
      - name: Cleanup
        run: cargo clean
      - name: Minio Output
        if: ${{ !cancelled() }}
        run: docker logs minio-container

  # Check answers are correct when hash values collide
  hash-collisions:
    name: cargo test hash collisions (amd64)
    runs-on: ubuntu-latest
    container:
      image: amd64/rust
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
          fetch-depth: 1
      - name: Setup Rust toolchain
        uses: ./.github/actions/setup-builder
        with:
          rust-version: stable
      - name: Run tests
        run: |
          cd datafusion
          cargo test  --profile ci --exclude datafusion-examples --exclude datafusion-benchmarks --exclude datafusion-sqllogictest --workspace --lib --tests --features=force_hash_collisions,avro
          cargo clean

  sqllogictest-sqlite:
    name: "Run sqllogictests with the sqlite test suite"
    runs-on: ubuntu-latest
    container:
      image: amd64/rust
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
          fetch-depth: 1
      - name: Setup Rust toolchain
        uses: ./.github/actions/setup-builder
        with:
          rust-version: stable
      - name: Run sqllogictest
        run: |
          cargo test --profile release-nonlto --test sqllogictests -- --include-sqlite
          cargo clean


