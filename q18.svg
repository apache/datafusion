<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="550" onload="init(evt)" viewBox="0 0 1200 550" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="550" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="533.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="533.00"> </text><svg id="frames" x="10" width="1180" total_samples="115499"><g><title>dfbench`dfbench::main (439 samples, 0.38%)</title><rect x="0.0000%" y="437" width="0.3801%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="439"/><text x="0.2500%" y="447.50"></text></g><g><title>dfbench`dfbench::main::_{{closure}} (210 samples, 0.18%)</title><rect x="0.3801%" y="437" width="0.1818%" height="15" fill="rgb(217,0,24)" fg:x="439" fg:w="210"/><text x="0.6301%" y="447.50"></text></g><g><title>dfbench`datafusion_physical_plan::execution_plan::collect::_{{closure}} (116 samples, 0.10%)</title><rect x="0.5619%" y="421" width="0.1004%" height="15" fill="rgb(221,193,54)" fg:x="649" fg:w="116"/><text x="0.8119%" y="431.50"></text></g><g><title>dfbench`&lt;datafusion::execution::session_state::DefaultQueryPlanner as datafusion::execution::context::QueryPlanner&gt;::create_physical_plan::_{{closure}} (15 samples, 0.01%)</title><rect x="1.2329%" y="373" width="0.0130%" height="15" fill="rgb(248,212,6)" fg:x="1424" fg:w="15"/><text x="1.4829%" y="383.50"></text></g><g><title>dfbench`&lt;datafusion::physical_planner::DefaultPhysicalPlanner as datafusion::physical_planner::PhysicalPlanner&gt;::create_physical_plan::_{{closure}} (15 samples, 0.01%)</title><rect x="1.2329%" y="357" width="0.0130%" height="15" fill="rgb(208,68,35)" fg:x="1424" fg:w="15"/><text x="1.4829%" y="367.50"></text></g><g><title>dfbench`datafusion::physical_planner::DefaultPhysicalPlanner::create_initial_plan::_{{closure}} (13 samples, 0.01%)</title><rect x="1.2346%" y="341" width="0.0113%" height="15" fill="rgb(232,128,0)" fg:x="1426" fg:w="13"/><text x="1.4846%" y="351.50"></text></g><g><title>dfbench`datafusion::physical_planner::DefaultPhysicalPlanner::map_logical_node_to_physical::_{{closure}} (13 samples, 0.01%)</title><rect x="1.2346%" y="325" width="0.0113%" height="15" fill="rgb(207,160,47)" fg:x="1426" fg:w="13"/><text x="1.4846%" y="335.50"></text></g><g><title>dfbench`&lt;datafusion::datasource::listing::table::ListingTable as datafusion_catalog::table::TableProvider&gt;::scan::_{{closure}} (13 samples, 0.01%)</title><rect x="1.2346%" y="309" width="0.0113%" height="15" fill="rgb(228,23,34)" fg:x="1426" fg:w="13"/><text x="1.4846%" y="319.50"></text></g><g><title>dfbench`&lt;futures_util::stream::stream::next::Next&lt;St&gt; as core::future::future::Future&gt;::poll (12 samples, 0.01%)</title><rect x="1.2355%" y="293" width="0.0104%" height="15" fill="rgb(218,30,26)" fg:x="1427" fg:w="12"/><text x="1.4855%" y="303.50"></text></g><g><title>dfbench`&lt;datafusion::datasource::file_format::parquet::ParquetFormat as datafusion::datasource::file_format::FileFormat&gt;::infer_stats::_{{closure}} (12 samples, 0.01%)</title><rect x="1.2355%" y="277" width="0.0104%" height="15" fill="rgb(220,122,19)" fg:x="1427" fg:w="12"/><text x="1.4855%" y="287.50"></text></g><g><title>dfbench`datafusion::dataframe::DataFrame::create_physical_plan::_{{closure}} (19 samples, 0.02%)</title><rect x="1.2329%" y="405" width="0.0165%" height="15" fill="rgb(250,228,42)" fg:x="1424" fg:w="19"/><text x="1.4829%" y="415.50"></text></g><g><title>dfbench`datafusion::execution::session_state::SessionState::create_physical_plan::_{{closure}} (19 samples, 0.02%)</title><rect x="1.2329%" y="389" width="0.0165%" height="15" fill="rgb(240,193,28)" fg:x="1424" fg:w="19"/><text x="1.4829%" y="399.50"></text></g><g><title>dfbench`datafusion::datasource::listing::table::ListingOptions::infer_schema::_{{closure}} (12 samples, 0.01%)</title><rect x="1.2494%" y="405" width="0.0104%" height="15" fill="rgb(216,20,37)" fg:x="1443" fg:w="12"/><text x="1.4994%" y="415.50"></text></g><g><title>dfbench`&lt;datafusion::datasource::file_format::parquet::ParquetFormat as datafusion::datasource::file_format::FileFormat&gt;::infer_schema::_{{closure}} (12 samples, 0.01%)</title><rect x="1.2494%" y="389" width="0.0104%" height="15" fill="rgb(206,188,39)" fg:x="1443" fg:w="12"/><text x="1.4994%" y="399.50"></text></g><g><title>dfbench`datafusion::datasource::file_format::parquet::fetch_parquet_metadata::_{{closure}} (12 samples, 0.01%)</title><rect x="1.2494%" y="373" width="0.0104%" height="15" fill="rgb(217,207,13)" fg:x="1443" fg:w="12"/><text x="1.4994%" y="383.50"></text></g><g><title>dfbench`datafusion_physical_plan::common::collect::_{{closure}} (73 samples, 0.06%)</title><rect x="1.2615%" y="405" width="0.0632%" height="15" fill="rgb(231,73,38)" fg:x="1457" fg:w="73"/><text x="1.5115%" y="415.50"></text></g><g><title>dfbench`&lt;futures_util::stream::try_stream::try_collect::TryCollect&lt;St,C&gt; as core::future::future::Future&gt;::poll (60 samples, 0.05%)</title><rect x="1.4156%" y="389" width="0.0519%" height="15" fill="rgb(225,20,46)" fg:x="1635" fg:w="60"/><text x="1.6656%" y="399.50"></text></g><g><title>dfbench`&lt;datafusion_physical_plan::sorts::merge::SortPreservingMergeStream&lt;C&gt; as futures_core::stream::Stream&gt;::poll_next (151 samples, 0.13%)</title><rect x="1.5957%" y="373" width="0.1307%" height="15" fill="rgb(210,31,41)" fg:x="1843" fg:w="151"/><text x="1.8457%" y="383.50"></text></g><g><title>dfbench`&lt;alloc::collections::vec_deque::VecDeque&lt;T,A&gt; as core::clone::Clone&gt;::clone (120 samples, 0.10%)</title><rect x="1.8727%" y="357" width="0.1039%" height="15" fill="rgb(221,200,47)" fg:x="2163" fg:w="120"/><text x="2.1227%" y="367.50"></text></g><g><title>dfbench`mi_malloc_aligned (386 samples, 0.33%)</title><rect x="3.8745%" y="325" width="0.3342%" height="15" fill="rgb(226,26,5)" fg:x="4475" fg:w="386"/><text x="4.1245%" y="335.50"></text></g><g><title>dfbench`&lt;alloc::collections::vec_deque::VecDeque&lt;T,A&gt; as core::clone::Clone&gt;::clone (2,202 samples, 1.91%)</title><rect x="2.3974%" y="341" width="1.9065%" height="15" fill="rgb(249,33,26)" fg:x="2769" fg:w="2202"/><text x="2.6474%" y="351.50">d..</text></g><g><title>libdyld.dylib`tlv_get_addr (110 samples, 0.10%)</title><rect x="4.2087%" y="325" width="0.0952%" height="15" fill="rgb(235,183,28)" fg:x="4861" fg:w="110"/><text x="4.4587%" y="335.50"></text></g><g><title>dfbench`&lt;datafusion_physical_plan::sorts::stream::FieldCursorStream&lt;T&gt; as datafusion_physical_plan::sorts::stream::PartitionedStream&gt;::poll_next (87 samples, 0.08%)</title><rect x="4.3039%" y="341" width="0.0753%" height="15" fill="rgb(221,5,38)" fg:x="4971" fg:w="87"/><text x="4.5539%" y="351.50"></text></g><g><title>dfbench`datafusion_physical_plan::metrics::baseline::BaselineMetrics::record_poll (167 samples, 0.14%)</title><rect x="4.3793%" y="341" width="0.1446%" height="15" fill="rgb(247,18,42)" fg:x="5058" fg:w="167"/><text x="4.6293%" y="351.50"></text></g><g><title>dfbench`&lt;datafusion_physical_plan::stream::RecordBatchStreamAdapter&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (76 samples, 0.07%)</title><rect x="4.8165%" y="309" width="0.0658%" height="15" fill="rgb(241,131,45)" fg:x="5563" fg:w="76"/><text x="5.0665%" y="319.50"></text></g><g><title>dfbench`&lt;futures_util::stream::select::Select&lt;St1,St2&gt; as futures_core::stream::Stream&gt;::poll_next (86 samples, 0.07%)</title><rect x="4.8823%" y="309" width="0.0745%" height="15" fill="rgb(249,31,29)" fg:x="5639" fg:w="86"/><text x="5.1323%" y="319.50"></text></g><g><title>dfbench`&lt;futures_util::stream::stream::filter_map::FilterMap&lt;St,Fut,F&gt; as futures_core::stream::Stream&gt;::poll_next (760 samples, 0.66%)</title><rect x="5.5213%" y="277" width="0.6580%" height="15" fill="rgb(225,111,53)" fg:x="6377" fg:w="760"/><text x="5.7713%" y="287.50"></text></g><g><title>dfbench`tokio::task::join_set::JoinSet&lt;T&gt;::join_next::_{{closure}} (410 samples, 0.35%)</title><rect x="5.8243%" y="261" width="0.3550%" height="15" fill="rgb(238,160,17)" fg:x="6727" fg:w="410"/><text x="6.0743%" y="271.50"></text></g><g><title>dfbench`tokio::runtime::park::clone (101 samples, 0.09%)</title><rect x="6.9516%" y="261" width="0.0874%" height="15" fill="rgb(214,148,48)" fg:x="8029" fg:w="101"/><text x="7.2016%" y="271.50"></text></g><g><title>dfbench`tokio::runtime::park::drop_waker (51 samples, 0.04%)</title><rect x="7.0390%" y="261" width="0.0442%" height="15" fill="rgb(232,36,49)" fg:x="8130" fg:w="51"/><text x="7.2890%" y="271.50"></text></g><g><title>dfbench`tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (471 samples, 0.41%)</title><rect x="7.0832%" y="261" width="0.4078%" height="15" fill="rgb(209,103,24)" fg:x="8181" fg:w="471"/><text x="7.3332%" y="271.50"></text></g><g><title>dfbench`&lt;futures_util::stream::unfold::Unfold&lt;T,F,Fut&gt; as futures_core::stream::Stream&gt;::poll_next (2,052 samples, 1.78%)</title><rect x="6.1793%" y="277" width="1.7766%" height="15" fill="rgb(229,88,8)" fg:x="7137" fg:w="2052"/><text x="6.4293%" y="287.50">d..</text></g><g><title>dfbench`tokio::sync::task::atomic_waker::AtomicWaker::register_by_ref (537 samples, 0.46%)</title><rect x="7.4910%" y="261" width="0.4649%" height="15" fill="rgb(213,181,19)" fg:x="8652" fg:w="537"/><text x="7.7410%" y="271.50"></text></g><g><title>dfbench`tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (173 samples, 0.15%)</title><rect x="7.9559%" y="277" width="0.1498%" height="15" fill="rgb(254,191,54)" fg:x="9189" fg:w="173"/><text x="8.2059%" y="287.50"></text></g><g><title>dfbench`tokio::sync::task::atomic_waker::AtomicWaker::register_by_ref (93 samples, 0.08%)</title><rect x="8.1057%" y="277" width="0.0805%" height="15" fill="rgb(241,83,37)" fg:x="9362" fg:w="93"/><text x="8.3557%" y="287.50"></text></g><g><title>dfbench`tokio::task::join_set::JoinSet&lt;T&gt;::join_next::_{{closure}} (120 samples, 0.10%)</title><rect x="8.1862%" y="277" width="0.1039%" height="15" fill="rgb(233,36,39)" fg:x="9455" fg:w="120"/><text x="8.4362%" y="287.50"></text></g><g><title>dfbench`&lt;futures_util::stream::select::Select&lt;St1,St2&gt; as futures_core::stream::Stream&gt;::poll_next (4,167 samples, 3.61%)</title><rect x="5.1559%" y="293" width="3.6078%" height="15" fill="rgb(226,3,54)" fg:x="5955" fg:w="4167"/><text x="5.4059%" y="303.50">dfbe..</text></g><g><title>libdyld.dylib`tlv_get_addr (547 samples, 0.47%)</title><rect x="8.2901%" y="277" width="0.4736%" height="15" fill="rgb(245,192,40)" fg:x="9575" fg:w="547"/><text x="8.5401%" y="287.50"></text></g><g><title>dfbench`&lt;futures_util::stream::stream::filter_map::FilterMap&lt;St,Fut,F&gt; as futures_core::stream::Stream&gt;::poll_next (147 samples, 0.13%)</title><rect x="8.7637%" y="293" width="0.1273%" height="15" fill="rgb(238,167,29)" fg:x="10122" fg:w="147"/><text x="9.0137%" y="303.50"></text></g><g><title>dfbench`&lt;futures_util::stream::unfold::Unfold&lt;T,F,Fut&gt; as futures_core::stream::Stream&gt;::poll_next (144 samples, 0.12%)</title><rect x="8.8910%" y="293" width="0.1247%" height="15" fill="rgb(232,182,51)" fg:x="10269" fg:w="144"/><text x="9.1410%" y="303.50"></text></g><g><title>dfbench`&lt;datafusion_physical_plan::sorts::stream::FieldCursorStream&lt;T&gt; as datafusion_physical_plan::sorts::stream::PartitionedStream&gt;::poll_next (4,945 samples, 4.28%)</title><rect x="4.7671%" y="325" width="4.2814%" height="15" fill="rgb(231,60,39)" fg:x="5506" fg:w="4945"/><text x="5.0171%" y="335.50">dfben..</text></g><g><title>dfbench`datafusion_physical_plan::sorts::stream::FusedStreams::poll_next (4,726 samples, 4.09%)</title><rect x="4.9568%" y="309" width="4.0918%" height="15" fill="rgb(208,69,12)" fg:x="5725" fg:w="4726"/><text x="5.2068%" y="319.50">dfbe..</text></g><g><title>dfbench`futures_util::stream::select::select::round_robin (38 samples, 0.03%)</title><rect x="9.0157%" y="293" width="0.0329%" height="15" fill="rgb(235,93,37)" fg:x="10413" fg:w="38"/><text x="9.2657%" y="303.50"></text></g><g><title>dfbench`datafusion_physical_plan::sorts::merge::SortPreservingMergeStream&lt;C&gt;::maybe_poll_stream (5,416 samples, 4.69%)</title><rect x="4.5256%" y="341" width="4.6892%" height="15" fill="rgb(213,116,39)" fg:x="5227" fg:w="5416"/><text x="4.7756%" y="351.50">dfben..</text></g><g><title>dfbench`datafusion_physical_plan::sorts::stream::FusedStreams::poll_next (190 samples, 0.16%)</title><rect x="9.0503%" y="325" width="0.1645%" height="15" fill="rgb(222,207,29)" fg:x="10453" fg:w="190"/><text x="9.3003%" y="335.50"></text></g><g><title>dfbench`&lt;datafusion_physical_plan::sorts::merge::SortPreservingMergeStream&lt;C&gt; as futures_core::stream::Stream&gt;::poll_next (8,417 samples, 7.29%)</title><rect x="1.9766%" y="357" width="7.2875%" height="15" fill="rgb(206,96,30)" fg:x="2283" fg:w="8417"/><text x="2.2266%" y="367.50">dfbench`&lt;d..</text></g><g><title>dfbench`tokio::runtime::park::wake_by_ref (55 samples, 0.05%)</title><rect x="9.2165%" y="341" width="0.0476%" height="15" fill="rgb(218,138,4)" fg:x="10645" fg:w="55"/><text x="9.4665%" y="351.50"></text></g><g><title>dfbench`datafusion_physical_plan::metrics::baseline::BaselineMetrics::record_poll (78 samples, 0.07%)</title><rect x="9.2641%" y="357" width="0.0675%" height="15" fill="rgb(250,191,14)" fg:x="10700" fg:w="78"/><text x="9.5141%" y="367.50"></text></g><g><title>dfbench`datafusion_physical_plan::sorts::merge::SortPreservingMergeStream&lt;C&gt;::maybe_poll_stream (112 samples, 0.10%)</title><rect x="9.3317%" y="357" width="0.0970%" height="15" fill="rgb(239,60,40)" fg:x="10778" fg:w="112"/><text x="9.5817%" y="367.50"></text></g><g><title>dfbench`mi_free (276 samples, 0.24%)</title><rect x="9.4287%" y="357" width="0.2390%" height="15" fill="rgb(206,27,48)" fg:x="10890" fg:w="276"/><text x="9.6787%" y="367.50"></text></g><g><title>dfbench`datafusion_physical_plan::common::collect::_{{closure}} (9,565 samples, 8.28%)</title><rect x="1.4675%" y="389" width="8.2815%" height="15" fill="rgb(225,35,8)" fg:x="1695" fg:w="9565"/><text x="1.7175%" y="399.50">dfbench`data..</text></g><g><title>dfbench`&lt;futures_util::stream::try_stream::try_collect::TryCollect&lt;St,C&gt; as core::future::future::Future&gt;::poll (9,266 samples, 8.02%)</title><rect x="1.7264%" y="373" width="8.0226%" height="15" fill="rgb(250,213,24)" fg:x="1994" fg:w="9266"/><text x="1.9764%" y="383.50">dfbench`&lt;fu..</text></g><g><title>dfbench`tokio::runtime::park::wake_by_ref (94 samples, 0.08%)</title><rect x="9.6676%" y="357" width="0.0814%" height="15" fill="rgb(247,123,22)" fg:x="11166" fg:w="94"/><text x="9.9176%" y="367.50"></text></g><g><title>dfbench`datafusion_physical_plan::execution_plan::collect::_{{closure}} (9,734 samples, 8.43%)</title><rect x="1.3247%" y="405" width="8.4278%" height="15" fill="rgb(231,138,38)" fg:x="1530" fg:w="9734"/><text x="1.5747%" y="415.50">dfbench`data..</text></g><g><title>dfbench`dfbench::main::_{{closure}} (10,500 samples, 9.09%)</title><rect x="0.6623%" y="421" width="9.0910%" height="15" fill="rgb(231,145,46)" fg:x="765" fg:w="10500"/><text x="0.9123%" y="431.50">dfbench`dfben..</text></g><g><title>dfbench`dfbench::main (10,761 samples, 9.32%)</title><rect x="0.5619%" y="437" width="9.3170%" height="15" fill="rgb(251,118,11)" fg:x="649" fg:w="10761"/><text x="0.8119%" y="447.50">dfbench`dfben..</text></g><g><title>dfbench`tokio::runtime::park::Inner::park (145 samples, 0.13%)</title><rect x="9.7533%" y="421" width="0.1255%" height="15" fill="rgb(217,147,25)" fg:x="11265" fg:w="145"/><text x="10.0033%" y="431.50"></text></g><g><title>dfbench`tokio::runtime::park::Inner::park (77 samples, 0.07%)</title><rect x="9.8789%" y="437" width="0.0667%" height="15" fill="rgb(247,81,37)" fg:x="11410" fg:w="77"/><text x="10.1289%" y="447.50"></text></g><g><title>dfbench`main (12,086 samples, 10.46%)</title><rect x="0.0000%" y="469" width="10.4642%" height="15" fill="rgb(209,12,38)" fg:x="0" fg:w="12086"/><text x="0.2500%" y="479.50">dfbench`main</text></g><g><title>dfbench`std::sys_common::backtrace::__rust_begin_short_backtrace (12,086 samples, 10.46%)</title><rect x="0.0000%" y="453" width="10.4642%" height="15" fill="rgb(227,1,9)" fg:x="0" fg:w="12086"/><text x="0.2500%" y="463.50">dfbench`std::sy..</text></g><g><title>libdyld.dylib`tlv_get_addr (599 samples, 0.52%)</title><rect x="9.9455%" y="437" width="0.5186%" height="15" fill="rgb(248,47,43)" fg:x="11487" fg:w="599"/><text x="10.1955%" y="447.50"></text></g><g><title>dfbench`mi_arenas_try_purge (96 samples, 0.08%)</title><rect x="10.4642%" y="405" width="0.0831%" height="15" fill="rgb(221,10,30)" fg:x="12086" fg:w="96"/><text x="10.7142%" y="415.50"></text></g><g><title>dfbench`mi_arena_purge (96 samples, 0.08%)</title><rect x="10.4642%" y="389" width="0.0831%" height="15" fill="rgb(210,229,1)" fg:x="12086" fg:w="96"/><text x="10.7142%" y="399.50"></text></g><g><title>libsystem_kernel.dylib`madvise (96 samples, 0.08%)</title><rect x="10.4642%" y="373" width="0.0831%" height="15" fill="rgb(222,148,37)" fg:x="12086" fg:w="96"/><text x="10.7142%" y="383.50"></text></g><g><title>dyld`start (12,183 samples, 10.55%)</title><rect x="0.0000%" y="485" width="10.5481%" height="15" fill="rgb(234,67,33)" fg:x="0" fg:w="12183"/><text x="0.2500%" y="495.50">dyld`start</text></g><g><title>libdyld.dylib`dyld4::LibSystemHelpers::getenv (97 samples, 0.08%)</title><rect x="10.4642%" y="469" width="0.0840%" height="15" fill="rgb(247,98,35)" fg:x="12086" fg:w="97"/><text x="10.7142%" y="479.50"></text></g><g><title>libsystem_c.dylib`exit (97 samples, 0.08%)</title><rect x="10.4642%" y="453" width="0.0840%" height="15" fill="rgb(247,138,52)" fg:x="12086" fg:w="97"/><text x="10.7142%" y="463.50"></text></g><g><title>libsystem_c.dylib`__cxa_finalize_ranges (97 samples, 0.08%)</title><rect x="10.4642%" y="437" width="0.0840%" height="15" fill="rgb(213,79,30)" fg:x="12086" fg:w="97"/><text x="10.7142%" y="447.50"></text></g><g><title>dfbench`mi_process_done (97 samples, 0.08%)</title><rect x="10.4642%" y="421" width="0.0840%" height="15" fill="rgb(246,177,23)" fg:x="12086" fg:w="97"/><text x="10.7142%" y="431.50"></text></g><g><title>libsystem_kernel.dylib`__exit (147 samples, 0.13%)</title><rect x="10.5481%" y="485" width="0.1273%" height="15" fill="rgb(230,62,27)" fg:x="12183" fg:w="147"/><text x="10.7981%" y="495.50"></text></g><g><title>dfbench`parking_lot::condvar::Condvar::wait_until_internal (14 samples, 0.01%)</title><rect x="10.6763%" y="405" width="0.0121%" height="15" fill="rgb(216,154,8)" fg:x="12331" fg:w="14"/><text x="10.9263%" y="415.50"></text></g><g><title>dfbench`&lt;object_store::local::LocalFileSystem as object_store::ObjectStore&gt;::get_range::_{{closure}}::_{{closure}} (39 samples, 0.03%)</title><rect x="10.7057%" y="389" width="0.0338%" height="15" fill="rgb(244,35,45)" fg:x="12365" fg:w="39"/><text x="10.9557%" y="399.50"></text></g><g><title>dfbench`object_store::local::read_range (30 samples, 0.03%)</title><rect x="10.7135%" y="373" width="0.0260%" height="15" fill="rgb(251,115,12)" fg:x="12374" fg:w="30"/><text x="10.9635%" y="383.50"></text></g><g><title>libsystem_kernel.dylib`read (24 samples, 0.02%)</title><rect x="10.7187%" y="357" width="0.0208%" height="15" fill="rgb(240,54,50)" fg:x="12380" fg:w="24"/><text x="10.9687%" y="367.50"></text></g><g><title>libsystem_kernel.dylib`__open (195 samples, 0.17%)</title><rect x="10.7421%" y="325" width="0.1688%" height="15" fill="rgb(233,84,52)" fg:x="12407" fg:w="195"/><text x="10.9921%" y="335.50"></text></g><g><title>dfbench`object_store::local::open_file (198 samples, 0.17%)</title><rect x="10.7404%" y="373" width="0.1714%" height="15" fill="rgb(207,117,47)" fg:x="12405" fg:w="198"/><text x="10.9904%" y="383.50"></text></g><g><title>dfbench`std::fs::OpenOptions::_open (198 samples, 0.17%)</title><rect x="10.7404%" y="357" width="0.1714%" height="15" fill="rgb(249,43,39)" fg:x="12405" fg:w="198"/><text x="10.9904%" y="367.50"></text></g><g><title>dfbench`std::sys::pal::unix::fs::File::open_c (198 samples, 0.17%)</title><rect x="10.7404%" y="341" width="0.1714%" height="15" fill="rgb(209,38,44)" fg:x="12405" fg:w="198"/><text x="10.9904%" y="351.50"></text></g><g><title>dfbench`mi_segment_try_purge (232 samples, 0.20%)</title><rect x="10.9126%" y="245" width="0.2009%" height="15" fill="rgb(236,212,23)" fg:x="12604" fg:w="232"/><text x="11.1626%" y="255.50"></text></g><g><title>dfbench`mi_segment_purge (232 samples, 0.20%)</title><rect x="10.9126%" y="229" width="0.2009%" height="15" fill="rgb(242,79,21)" fg:x="12604" fg:w="232"/><text x="11.1626%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`madvise (231 samples, 0.20%)</title><rect x="10.9135%" y="213" width="0.2000%" height="15" fill="rgb(211,96,35)" fg:x="12605" fg:w="231"/><text x="11.1635%" y="223.50"></text></g><g><title>dfbench`_mi_free_delayed_block (233 samples, 0.20%)</title><rect x="10.9126%" y="325" width="0.2017%" height="15" fill="rgb(253,215,40)" fg:x="12604" fg:w="233"/><text x="11.1626%" y="335.50"></text></g><g><title>dfbench`_mi_page_free (233 samples, 0.20%)</title><rect x="10.9126%" y="309" width="0.2017%" height="15" fill="rgb(211,81,21)" fg:x="12604" fg:w="233"/><text x="11.1626%" y="319.50"></text></g><g><title>dfbench`mi_segment_page_clear (233 samples, 0.20%)</title><rect x="10.9126%" y="293" width="0.2017%" height="15" fill="rgb(208,190,38)" fg:x="12604" fg:w="233"/><text x="11.1626%" y="303.50"></text></g><g><title>dfbench`mi_segment_span_free_coalesce (233 samples, 0.20%)</title><rect x="10.9126%" y="277" width="0.2017%" height="15" fill="rgb(235,213,38)" fg:x="12604" fg:w="233"/><text x="11.1626%" y="287.50"></text></g><g><title>dfbench`mi_segment_span_free (233 samples, 0.20%)</title><rect x="10.9126%" y="261" width="0.2017%" height="15" fill="rgb(237,122,38)" fg:x="12604" fg:w="233"/><text x="11.1626%" y="271.50"></text></g><g><title>dfbench`mi_heap_malloc_zero_aligned_at_generic (244 samples, 0.21%)</title><rect x="10.9118%" y="357" width="0.2113%" height="15" fill="rgb(244,218,35)" fg:x="12603" fg:w="244"/><text x="11.1618%" y="367.50"></text></g><g><title>dfbench`_mi_malloc_generic (244 samples, 0.21%)</title><rect x="10.9118%" y="341" width="0.2113%" height="15" fill="rgb(240,68,47)" fg:x="12603" fg:w="244"/><text x="11.1618%" y="351.50"></text></g><g><title>dfbench`object_store::local::read_range (1,492 samples, 1.29%)</title><rect x="10.9118%" y="373" width="1.2918%" height="15" fill="rgb(210,16,53)" fg:x="12603" fg:w="1492"/><text x="11.1618%" y="383.50"></text></g><g><title>libsystem_kernel.dylib`read (1,248 samples, 1.08%)</title><rect x="11.1230%" y="357" width="1.0805%" height="15" fill="rgb(235,124,12)" fg:x="12847" fg:w="1248"/><text x="11.3730%" y="367.50"></text></g><g><title>dfbench`&lt;object_store::local::LocalFileSystem as object_store::ObjectStore&gt;::get_ranges::_{{closure}}::_{{closure}} (1,704 samples, 1.48%)</title><rect x="10.7395%" y="389" width="1.4753%" height="15" fill="rgb(224,169,11)" fg:x="12404" fg:w="1704"/><text x="10.9895%" y="399.50"></text></g><g><title>dfbench`parking_lot::condvar::Condvar::wait_until_internal (28 samples, 0.02%)</title><rect x="12.2243%" y="373" width="0.0242%" height="15" fill="rgb(250,166,2)" fg:x="14119" fg:w="28"/><text x="12.4743%" y="383.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvwait (28 samples, 0.02%)</title><rect x="12.2243%" y="357" width="0.0242%" height="15" fill="rgb(242,216,29)" fg:x="14119" fg:w="28"/><text x="12.4743%" y="367.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvwait (20 samples, 0.02%)</title><rect x="12.2547%" y="325" width="0.0173%" height="15" fill="rgb(230,116,27)" fg:x="14154" fg:w="20"/><text x="12.5047%" y="335.50"></text></g><g><title>dfbench`tokio::runtime::park::Inner::park (22 samples, 0.02%)</title><rect x="12.2538%" y="357" width="0.0190%" height="15" fill="rgb(228,99,48)" fg:x="14153" fg:w="22"/><text x="12.5038%" y="367.50"></text></g><g><title>dfbench`parking_lot::condvar::Condvar::wait_until_internal (21 samples, 0.02%)</title><rect x="12.2547%" y="341" width="0.0182%" height="15" fill="rgb(253,11,6)" fg:x="14154" fg:w="21"/><text x="12.5047%" y="351.50"></text></g><g><title>dfbench`tokio::runtime::scheduler::multi_thread::worker::Context::park_timeout (71 samples, 0.06%)</title><rect x="12.2226%" y="389" width="0.0615%" height="15" fill="rgb(247,143,39)" fg:x="14117" fg:w="71"/><text x="12.4726%" y="399.50"></text></g><g><title>dfbench`tokio::runtime::time::Driver::park_internal (39 samples, 0.03%)</title><rect x="12.2503%" y="373" width="0.0338%" height="15" fill="rgb(236,97,10)" fg:x="14149" fg:w="39"/><text x="12.5003%" y="383.50"></text></g><g><title>dfbench`&lt;arrow_array::array::byte_view_array::GenericByteViewArray&lt;T&gt; as arrow_array::array::Array&gt;::get_array_memory_size (81 samples, 0.07%)</title><rect x="15.4356%" y="261" width="0.0701%" height="15" fill="rgb(233,208,19)" fg:x="17828" fg:w="81"/><text x="15.6856%" y="271.50"></text></g><g><title>dfbench`&lt;arrow_array::array::primitive_array::PrimitiveArray&lt;T&gt; as arrow_array::array::Array&gt;::get_array_memory_size (17 samples, 0.01%)</title><rect x="15.5058%" y="261" width="0.0147%" height="15" fill="rgb(216,164,2)" fg:x="17909" fg:w="17"/><text x="15.7558%" y="271.50"></text></g><g><title>dfbench`&lt;datafusion_physical_plan::repartition::distributor_channels::RecvFuture&lt;T&gt; as core::future::future::Future&gt;::poll (35 samples, 0.03%)</title><rect x="15.5542%" y="245" width="0.0303%" height="15" fill="rgb(220,129,5)" fg:x="17965" fg:w="35"/><text x="15.8042%" y="255.50"></text></g><g><title>dfbench`&lt;datafusion_physical_plan::repartition::RepartitionStream as futures_core::stream::Stream&gt;::poll_next (68 samples, 0.06%)</title><rect x="15.5274%" y="261" width="0.0589%" height="15" fill="rgb(242,17,10)" fg:x="17934" fg:w="68"/><text x="15.7774%" y="271.50"></text></g><g><title>dfbench`&lt;datafusion_physical_plan::stream::RecordBatchStreamAdapter&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (209 samples, 0.18%)</title><rect x="15.4192%" y="277" width="0.1810%" height="15" fill="rgb(242,107,0)" fg:x="17809" fg:w="209"/><text x="15.6692%" y="287.50"></text></g><g><title>dfbench`datafusion_physical_plan::repartition::RepartitionExecState::new (14 samples, 0.01%)</title><rect x="15.5880%" y="261" width="0.0121%" height="15" fill="rgb(251,28,31)" fg:x="18004" fg:w="14"/><text x="15.8380%" y="271.50"></text></g><g><title>dfbench`mi_heap_malloc_zero_aligned_at_generic (14 samples, 0.01%)</title><rect x="15.5880%" y="245" width="0.0121%" height="15" fill="rgb(233,223,10)" fg:x="18004" fg:w="14"/><text x="15.8380%" y="255.50"></text></g><g><title>dfbench`_mi_malloc_generic (14 samples, 0.01%)</title><rect x="15.5880%" y="229" width="0.0121%" height="15" fill="rgb(215,21,27)" fg:x="18004" fg:w="14"/><text x="15.8380%" y="239.50"></text></g><g><title>dfbench`_mi_free_delayed_block (14 samples, 0.01%)</title><rect x="15.5880%" y="213" width="0.0121%" height="15" fill="rgb(232,23,21)" fg:x="18004" fg:w="14"/><text x="15.8380%" y="223.50"></text></g><g><title>dfbench`mi_segment_free (12 samples, 0.01%)</title><rect x="15.5897%" y="197" width="0.0104%" height="15" fill="rgb(244,5,23)" fg:x="18006" fg:w="12"/><text x="15.8397%" y="207.50"></text></g><g><title>dfbench`mi_arenas_try_purge (12 samples, 0.01%)</title><rect x="15.5897%" y="181" width="0.0104%" height="15" fill="rgb(226,81,46)" fg:x="18006" fg:w="12"/><text x="15.8397%" y="191.50"></text></g><g><title>dfbench`mi_arena_purge (12 samples, 0.01%)</title><rect x="15.5897%" y="165" width="0.0104%" height="15" fill="rgb(247,70,30)" fg:x="18006" fg:w="12"/><text x="15.8397%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`madvise (12 samples, 0.01%)</title><rect x="15.5897%" y="149" width="0.0104%" height="15" fill="rgb(212,68,19)" fg:x="18006" fg:w="12"/><text x="15.8397%" y="159.50"></text></g><g><title>dfbench`_mi_free_delayed_block (12 samples, 0.01%)</title><rect x="15.6097%" y="213" width="0.0104%" height="15" fill="rgb(240,187,13)" fg:x="18029" fg:w="12"/><text x="15.8597%" y="223.50"></text></g><g><title>dfbench`_mi_page_free (19 samples, 0.02%)</title><rect x="15.6322%" y="197" width="0.0165%" height="15" fill="rgb(223,113,26)" fg:x="18055" fg:w="19"/><text x="15.8822%" y="207.50"></text></g><g><title>dfbench`mi_segment_page_clear (19 samples, 0.02%)</title><rect x="15.6322%" y="181" width="0.0165%" height="15" fill="rgb(206,192,2)" fg:x="18055" fg:w="19"/><text x="15.8822%" y="191.50"></text></g><g><title>dfbench`mi_segment_span_free_coalesce (19 samples, 0.02%)</title><rect x="15.6322%" y="165" width="0.0165%" height="15" fill="rgb(241,108,4)" fg:x="18055" fg:w="19"/><text x="15.8822%" y="175.50"></text></g><g><title>dfbench`mi_segment_span_free (19 samples, 0.02%)</title><rect x="15.6322%" y="149" width="0.0165%" height="15" fill="rgb(247,173,49)" fg:x="18055" fg:w="19"/><text x="15.8822%" y="159.50"></text></g><g><title>dfbench`mi_segment_try_purge (19 samples, 0.02%)</title><rect x="15.6322%" y="133" width="0.0165%" height="15" fill="rgb(224,114,35)" fg:x="18055" fg:w="19"/><text x="15.8822%" y="143.50"></text></g><g><title>dfbench`mi_segment_purge (19 samples, 0.02%)</title><rect x="15.6322%" y="117" width="0.0165%" height="15" fill="rgb(245,159,27)" fg:x="18055" fg:w="19"/><text x="15.8822%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`madvise (19 samples, 0.02%)</title><rect x="15.6322%" y="101" width="0.0165%" height="15" fill="rgb(245,172,44)" fg:x="18055" fg:w="19"/><text x="15.8822%" y="111.50"></text></g><g><title>dfbench`mi_page_free_list_extend (12 samples, 0.01%)</title><rect x="15.6486%" y="197" width="0.0104%" height="15" fill="rgb(236,23,11)" fg:x="18074" fg:w="12"/><text x="15.8986%" y="207.50"></text></g><g><title>dfbench`mi_find_page (59 samples, 0.05%)</title><rect x="15.6200%" y="213" width="0.0511%" height="15" fill="rgb(205,117,38)" fg:x="18041" fg:w="59"/><text x="15.8700%" y="223.50"></text></g><g><title>dfbench`mi_page_fresh_alloc (14 samples, 0.01%)</title><rect x="15.6590%" y="197" width="0.0121%" height="15" fill="rgb(237,72,25)" fg:x="18086" fg:w="14"/><text x="15.9090%" y="207.50"></text></g><g><title>dfbench`mi_segments_page_alloc (13 samples, 0.01%)</title><rect x="15.6599%" y="181" width="0.0113%" height="15" fill="rgb(244,70,9)" fg:x="18087" fg:w="13"/><text x="15.9099%" y="191.50"></text></g><g><title>dfbench`_mi_malloc_generic (79 samples, 0.07%)</title><rect x="15.6079%" y="229" width="0.0684%" height="15" fill="rgb(217,125,39)" fg:x="18027" fg:w="79"/><text x="15.8579%" y="239.50"></text></g><g><title>dfbench`mi_heap_malloc_zero_aligned_at_generic (82 samples, 0.07%)</title><rect x="15.6062%" y="245" width="0.0710%" height="15" fill="rgb(235,36,10)" fg:x="18025" fg:w="82"/><text x="15.8562%" y="255.50"></text></g><g><title>dfbench`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (86 samples, 0.07%)</title><rect x="15.6036%" y="277" width="0.0745%" height="15" fill="rgb(251,123,47)" fg:x="18022" fg:w="86"/><text x="15.8536%" y="287.50"></text></g><g><title>dfbench`alloc::raw_vec::finish_grow (86 samples, 0.07%)</title><rect x="15.6036%" y="261" width="0.0745%" height="15" fill="rgb(221,13,13)" fg:x="18022" fg:w="86"/><text x="15.8536%" y="271.50"></text></g><g><title>dfbench`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (14 samples, 0.01%)</title><rect x="15.6988%" y="245" width="0.0121%" height="15" fill="rgb(238,131,9)" fg:x="18132" fg:w="14"/><text x="15.9488%" y="255.50"></text></g><g><title>dfbench`arrow_array::builder::generic_bytes_view_builder::GenericByteViewBuilder&lt;T&gt;::flush_in_progress (22 samples, 0.02%)</title><rect x="15.6945%" y="261" width="0.0190%" height="15" fill="rgb(211,50,8)" fg:x="18127" fg:w="22"/><text x="15.9445%" y="271.50"></text></g><g><title>dfbench`arrow_array::builder::generic_bytes_view_builder::GenericByteViewBuilder&lt;T&gt;::finish (43 samples, 0.04%)</title><rect x="15.6850%" y="277" width="0.0372%" height="15" fill="rgb(245,182,24)" fg:x="18116" fg:w="43"/><text x="15.9350%" y="287.50"></text></g><g><title>dfbench`arrow_array::record_batch::RecordBatch::try_new_impl (34 samples, 0.03%)</title><rect x="15.7239%" y="277" width="0.0294%" height="15" fill="rgb(242,14,37)" fg:x="18161" fg:w="34"/><text x="15.9739%" y="287.50"></text></g><g><title>dfbench`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (13 samples, 0.01%)</title><rect x="15.8841%" y="197" width="0.0113%" height="15" fill="rgb(246,228,12)" fg:x="18346" fg:w="13"/><text x="16.1341%" y="207.50"></text></g><g><title>dfbench`arrow_array::array::byte_view_array::_&lt;impl core::convert::From&lt;arrow_array::array::byte_view_array::GenericByteViewArray&lt;T&gt;&gt; for arrow_data::data::ArrayData&gt;::from (54 samples, 0.05%)</title><rect x="15.8555%" y="213" width="0.0468%" height="15" fill="rgb(213,55,15)" fg:x="18313" fg:w="54"/><text x="16.1055%" y="223.50"></text></g><g><title>dfbench`&lt;arrow_array::array::byte_view_array::GenericByteViewArray&lt;T&gt; as arrow_array::array::Array&gt;::to_data (73 samples, 0.06%)</title><rect x="15.8478%" y="229" width="0.0632%" height="15" fill="rgb(209,9,3)" fg:x="18304" fg:w="73"/><text x="16.0978%" y="239.50"></text></g><g><title>dfbench`arrow_data::data::ArrayDataBuilder::build_impl (32 samples, 0.03%)</title><rect x="15.9863%" y="197" width="0.0277%" height="15" fill="rgb(230,59,30)" fg:x="18464" fg:w="32"/><text x="16.2363%" y="207.50"></text></g><g><title>dfbench`arrow_array::array::primitive_array::_&lt;impl core::convert::From&lt;arrow_array::array::primitive_array::PrimitiveArray&lt;T&gt;&gt; for arrow_data::data::ArrayData&gt;::from (104 samples, 0.09%)</title><rect x="15.9309%" y="213" width="0.0900%" height="15" fill="rgb(209,121,21)" fg:x="18400" fg:w="104"/><text x="16.1809%" y="223.50"></text></g><g><title>dfbench`&lt;arrow_array::array::primitive_array::PrimitiveArray&lt;T&gt; as arrow_array::array::Array&gt;::to_data (136 samples, 0.12%)</title><rect x="15.9110%" y="229" width="0.1177%" height="15" fill="rgb(220,109,13)" fg:x="18377" fg:w="136"/><text x="16.1610%" y="239.50"></text></g><g><title>dfbench`arrow_data::transform::MutableArrayData::into_builder (35 samples, 0.03%)</title><rect x="16.0452%" y="229" width="0.0303%" height="15" fill="rgb(232,18,1)" fg:x="18532" fg:w="35"/><text x="16.2952%" y="239.50"></text></g><g><title>dfbench`_mi_free_delayed_block (16 samples, 0.01%)</title><rect x="16.1361%" y="181" width="0.0139%" height="15" fill="rgb(215,41,42)" fg:x="18637" fg:w="16"/><text x="16.3861%" y="191.50"></text></g><g><title>dfbench`mi_page_free_list_extend (17 samples, 0.01%)</title><rect x="16.1568%" y="165" width="0.0147%" height="15" fill="rgb(224,123,36)" fg:x="18661" fg:w="17"/><text x="16.4068%" y="175.50"></text></g><g><title>dfbench`mi_heap_malloc_zero_aligned_at_generic (48 samples, 0.04%)</title><rect x="16.1326%" y="213" width="0.0416%" height="15" fill="rgb(240,125,3)" fg:x="18633" fg:w="48"/><text x="16.3826%" y="223.50"></text></g><g><title>dfbench`_mi_malloc_generic (45 samples, 0.04%)</title><rect x="16.1352%" y="197" width="0.0390%" height="15" fill="rgb(205,98,50)" fg:x="18636" fg:w="45"/><text x="16.3852%" y="207.50"></text></g><g><title>dfbench`mi_find_page (28 samples, 0.02%)</title><rect x="16.1499%" y="181" width="0.0242%" height="15" fill="rgb(205,185,37)" fg:x="18653" fg:w="28"/><text x="16.3999%" y="191.50"></text></g><g><title>dfbench`mi_heap_malloc_zero_aligned_at_overalloc (30 samples, 0.03%)</title><rect x="16.1742%" y="213" width="0.0260%" height="15" fill="rgb(238,207,15)" fg:x="18681" fg:w="30"/><text x="16.4242%" y="223.50"></text></g><g><title>dfbench`_mi_malloc_generic (29 samples, 0.03%)</title><rect x="16.1750%" y="197" width="0.0251%" height="15" fill="rgb(213,199,42)" fg:x="18682" fg:w="29"/><text x="16.4250%" y="207.50"></text></g><g><title>dfbench`mi_page_fresh_alloc (19 samples, 0.02%)</title><rect x="16.1837%" y="181" width="0.0165%" height="15" fill="rgb(235,201,11)" fg:x="18692" fg:w="19"/><text x="16.4337%" y="191.50"></text></g><g><title>dfbench`mi_segments_page_alloc (18 samples, 0.02%)</title><rect x="16.1846%" y="165" width="0.0156%" height="15" fill="rgb(207,46,11)" fg:x="18693" fg:w="18"/><text x="16.4346%" y="175.50"></text></g><g><title>dfbench`arrow_data::transform::MutableArrayData::with_capacities (155 samples, 0.13%)</title><rect x="16.0755%" y="229" width="0.1342%" height="15" fill="rgb(241,35,35)" fg:x="18567" fg:w="155"/><text x="16.3255%" y="239.50"></text></g><g><title>dfbench`arrow_data::transform::build_extend_view::_{{closure}} (445 samples, 0.39%)</title><rect x="16.2097%" y="229" width="0.3853%" height="15" fill="rgb(243,32,47)" fg:x="18722" fg:w="445"/><text x="16.4597%" y="239.50"></text></g><g><title>dfbench`arrow_data::transform::primitive::build_extend::_{{closure}} (15 samples, 0.01%)</title><rect x="16.5949%" y="229" width="0.0130%" height="15" fill="rgb(247,202,23)" fg:x="19167" fg:w="15"/><text x="16.8449%" y="239.50"></text></g><g><title>dfbench`core::ptr::drop_in_place&lt;arrow_data::data::ArrayData&gt; (23 samples, 0.02%)</title><rect x="16.6114%" y="229" width="0.0199%" height="15" fill="rgb(219,102,11)" fg:x="19186" fg:w="23"/><text x="16.8614%" y="239.50"></text></g><g><title>dfbench`_mi_free_delayed_block (25 samples, 0.02%)</title><rect x="16.6478%" y="197" width="0.0216%" height="15" fill="rgb(243,110,44)" fg:x="19228" fg:w="25"/><text x="16.8978%" y="207.50"></text></g><g><title>dfbench`_mi_malloc_generic (36 samples, 0.03%)</title><rect x="16.6434%" y="213" width="0.0312%" height="15" fill="rgb(222,74,54)" fg:x="19223" fg:w="36"/><text x="16.8934%" y="223.50"></text></g><g><title>dfbench`mi_heap_malloc_zero_aligned_at_generic (37 samples, 0.03%)</title><rect x="16.6434%" y="229" width="0.0320%" height="15" fill="rgb(216,99,12)" fg:x="19223" fg:w="37"/><text x="16.8934%" y="239.50"></text></g><g><title>dfbench`arrow_select::concat::concat_fallback (1,861 samples, 1.61%)</title><rect x="15.7897%" y="245" width="1.6113%" height="15" fill="rgb(226,22,26)" fg:x="18237" fg:w="1861"/><text x="16.0397%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (832 samples, 0.72%)</title><rect x="16.6807%" y="229" width="0.7204%" height="15" fill="rgb(217,163,10)" fg:x="19266" fg:w="832"/><text x="16.9307%" y="239.50"></text></g><g><title>dfbench`arrow_select::concat::concat (1,903 samples, 1.65%)</title><rect x="15.7664%" y="261" width="1.6476%" height="15" fill="rgb(213,25,53)" fg:x="18210" fg:w="1903"/><text x="16.0164%" y="271.50"></text></g><g><title>dfbench`arrow_select::concat::concat_batches (1,924 samples, 1.67%)</title><rect x="15.7551%" y="277" width="1.6658%" height="15" fill="rgb(252,105,26)" fg:x="18197" fg:w="1924"/><text x="16.0051%" y="287.50"></text></g><g><title>dfbench`core::ptr::drop_in_place&lt;arrow_array::array::byte_view_array::GenericByteViewArray&lt;arrow_array::types::BinaryViewType&gt;&gt; (37 samples, 0.03%)</title><rect x="17.4642%" y="229" width="0.0320%" height="15" fill="rgb(220,39,43)" fg:x="20171" fg:w="37"/><text x="17.7142%" y="239.50"></text></g><g><title>dfbench`alloc::sync::Arc&lt;T,A&gt;::drop_slow (14 samples, 0.01%)</title><rect x="17.5066%" y="213" width="0.0121%" height="15" fill="rgb(229,68,48)" fg:x="20220" fg:w="14"/><text x="17.7566%" y="223.50"></text></g><g><title>dfbench`mi_free (12 samples, 0.01%)</title><rect x="17.5257%" y="213" width="0.0104%" height="15" fill="rgb(252,8,32)" fg:x="20242" fg:w="12"/><text x="17.7757%" y="223.50"></text></g><g><title>dfbench`mi_free_block_delayed_mt (34 samples, 0.03%)</title><rect x="17.5361%" y="213" width="0.0294%" height="15" fill="rgb(223,20,43)" fg:x="20254" fg:w="34"/><text x="17.7861%" y="223.50"></text></g><g><title>dfbench`mi_free_block_mt (12 samples, 0.01%)</title><rect x="17.5655%" y="213" width="0.0104%" height="15" fill="rgb(229,81,49)" fg:x="20288" fg:w="12"/><text x="17.8155%" y="223.50"></text></g><g><title>dfbench`core::ptr::drop_in_place&lt;arrow_array::array::primitive_array::PrimitiveArray&lt;arrow_array::types::Int8Type&gt;&gt; (99 samples, 0.09%)</title><rect x="17.4963%" y="229" width="0.0857%" height="15" fill="rgb(236,28,36)" fg:x="20208" fg:w="99"/><text x="17.7463%" y="239.50"></text></g><g><title>dfbench`mi_free (19 samples, 0.02%)</title><rect x="17.5898%" y="229" width="0.0165%" height="15" fill="rgb(249,185,26)" fg:x="20316" fg:w="19"/><text x="17.8398%" y="239.50"></text></g><g><title>dfbench`mi_free_block_delayed_mt (17 samples, 0.01%)</title><rect x="17.6062%" y="229" width="0.0147%" height="15" fill="rgb(249,174,33)" fg:x="20335" fg:w="17"/><text x="17.8562%" y="239.50"></text></g><g><title>dfbench`alloc::sync::Arc&lt;T,A&gt;::drop_slow (202 samples, 0.17%)</title><rect x="17.4504%" y="245" width="0.1749%" height="15" fill="rgb(233,201,37)" fg:x="20155" fg:w="202"/><text x="17.7004%" y="255.50"></text></g><g><title>dfbench`core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::sync::Arc&lt;dyn arrow_array::array::Array&gt;&gt;&gt; (234 samples, 0.20%)</title><rect x="17.4313%" y="261" width="0.2026%" height="15" fill="rgb(221,78,26)" fg:x="20133" fg:w="234"/><text x="17.6813%" y="271.50"></text></g><g><title>dfbench`mi_free (21 samples, 0.02%)</title><rect x="17.6339%" y="261" width="0.0182%" height="15" fill="rgb(250,127,30)" fg:x="20367" fg:w="21"/><text x="17.8839%" y="271.50"></text></g><g><title>dfbench`core::ptr::drop_in_place&lt;[arrow_array::record_batch::RecordBatch]&gt; (290 samples, 0.25%)</title><rect x="17.4209%" y="277" width="0.2511%" height="15" fill="rgb(230,49,44)" fg:x="20121" fg:w="290"/><text x="17.6709%" y="287.50"></text></g><g><title>dfbench`core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;arrow_buffer::buffer::immutable::Buffer&gt;&gt; (197 samples, 0.17%)</title><rect x="17.7231%" y="229" width="0.1706%" height="15" fill="rgb(229,67,23)" fg:x="20470" fg:w="197"/><text x="17.9731%" y="239.50"></text></g><g><title>dfbench`core::ptr::drop_in_place&lt;arrow_array::array::byte_view_array::GenericByteViewArray&lt;arrow_array::types::BinaryViewType&gt;&gt; (238 samples, 0.21%)</title><rect x="17.7196%" y="245" width="0.2061%" height="15" fill="rgb(249,83,47)" fg:x="20466" fg:w="238"/><text x="17.9696%" y="255.50"></text></g><g><title>dfbench`core::ptr::drop_in_place&lt;arrow_schema::datatype::DataType&gt; (13 samples, 0.01%)</title><rect x="17.9257%" y="245" width="0.0113%" height="15" fill="rgb(215,43,3)" fg:x="20704" fg:w="13"/><text x="18.1757%" y="255.50"></text></g><g><title>dfbench`mi_free_block_delayed_mt (108 samples, 0.09%)</title><rect x="17.9439%" y="245" width="0.0935%" height="15" fill="rgb(238,154,13)" fg:x="20725" fg:w="108"/><text x="18.1939%" y="255.50"></text></g><g><title>dfbench`alloc::sync::Arc&lt;T,A&gt;::drop_slow (396 samples, 0.34%)</title><rect x="17.7066%" y="261" width="0.3429%" height="15" fill="rgb(219,56,2)" fg:x="20451" fg:w="396"/><text x="17.9566%" y="271.50"></text></g><g><title>dfbench`core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::sync::Arc&lt;dyn arrow_array::array::Array&gt;&gt;&gt; (443 samples, 0.38%)</title><rect x="17.6720%" y="277" width="0.3836%" height="15" fill="rgb(233,0,4)" fg:x="20411" fg:w="443"/><text x="17.9220%" y="287.50"></text></g><g><title>dfbench`mi_free (20 samples, 0.02%)</title><rect x="18.0634%" y="277" width="0.0173%" height="15" fill="rgb(235,30,7)" fg:x="20863" fg:w="20"/><text x="18.3134%" y="287.50"></text></g><g><title>dfbench`mi_free_block_delayed_mt (17 samples, 0.01%)</title><rect x="18.0807%" y="277" width="0.0147%" height="15" fill="rgb(250,79,13)" fg:x="20883" fg:w="17"/><text x="18.3307%" y="287.50"></text></g><g><title>dfbench`mi_segment_try_purge (154 samples, 0.13%)</title><rect x="18.2720%" y="165" width="0.1333%" height="15" fill="rgb(211,146,34)" fg:x="21104" fg:w="154"/><text x="18.5220%" y="175.50"></text></g><g><title>dfbench`mi_segment_purge (153 samples, 0.13%)</title><rect x="18.2729%" y="149" width="0.1325%" height="15" fill="rgb(228,22,38)" fg:x="21105" fg:w="153"/><text x="18.5229%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`madvise (152 samples, 0.13%)</title><rect x="18.2738%" y="133" width="0.1316%" height="15" fill="rgb(235,168,5)" fg:x="21106" fg:w="152"/><text x="18.5238%" y="143.50"></text></g><g><title>dfbench`_mi_page_free (167 samples, 0.14%)</title><rect x="18.2660%" y="229" width="0.1446%" height="15" fill="rgb(221,155,16)" fg:x="21097" fg:w="167"/><text x="18.5160%" y="239.50"></text></g><g><title>dfbench`mi_segment_page_clear (166 samples, 0.14%)</title><rect x="18.2668%" y="213" width="0.1437%" height="15" fill="rgb(215,215,53)" fg:x="21098" fg:w="166"/><text x="18.5168%" y="223.50"></text></g><g><title>dfbench`mi_segment_span_free_coalesce (164 samples, 0.14%)</title><rect x="18.2686%" y="197" width="0.1420%" height="15" fill="rgb(223,4,10)" fg:x="21100" fg:w="164"/><text x="18.5186%" y="207.50"></text></g><g><title>dfbench`mi_segment_span_free (162 samples, 0.14%)</title><rect x="18.2703%" y="181" width="0.1403%" height="15" fill="rgb(234,103,6)" fg:x="21102" fg:w="162"/><text x="18.5203%" y="191.50"></text></g><g><title>dfbench`mi_arena_purge (278 samples, 0.24%)</title><rect x="18.4105%" y="197" width="0.2407%" height="15" fill="rgb(227,97,0)" fg:x="21264" fg:w="278"/><text x="18.6605%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`madvise (278 samples, 0.24%)</title><rect x="18.4105%" y="181" width="0.2407%" height="15" fill="rgb(234,150,53)" fg:x="21264" fg:w="278"/><text x="18.6605%" y="191.50"></text></g><g><title>dfbench`mi_segment_free (279 samples, 0.24%)</title><rect x="18.4105%" y="229" width="0.2416%" height="15" fill="rgb(228,201,54)" fg:x="21264" fg:w="279"/><text x="18.6605%" y="239.50"></text></g><g><title>dfbench`mi_arenas_try_purge (279 samples, 0.24%)</title><rect x="18.4105%" y="213" width="0.2416%" height="15" fill="rgb(222,22,37)" fg:x="21264" fg:w="279"/><text x="18.6605%" y="223.50"></text></g><g><title>dfbench`_mi_free_delayed_block (621 samples, 0.54%)</title><rect x="18.1170%" y="245" width="0.5377%" height="15" fill="rgb(237,53,32)" fg:x="20925" fg:w="621"/><text x="18.3670%" y="255.50"></text></g><g><title>dfbench`_mi_page_free (28 samples, 0.02%)</title><rect x="18.6764%" y="229" width="0.0242%" height="15" fill="rgb(233,25,53)" fg:x="21571" fg:w="28"/><text x="18.9264%" y="239.50"></text></g><g><title>dfbench`mi_segment_page_clear (27 samples, 0.02%)</title><rect x="18.6772%" y="213" width="0.0234%" height="15" fill="rgb(210,40,34)" fg:x="21572" fg:w="27"/><text x="18.9272%" y="223.50"></text></g><g><title>dfbench`mi_segment_span_free_coalesce (27 samples, 0.02%)</title><rect x="18.6772%" y="197" width="0.0234%" height="15" fill="rgb(241,220,44)" fg:x="21572" fg:w="27"/><text x="18.9272%" y="207.50"></text></g><g><title>dfbench`mi_segment_span_free (27 samples, 0.02%)</title><rect x="18.6772%" y="181" width="0.0234%" height="15" fill="rgb(235,28,35)" fg:x="21572" fg:w="27"/><text x="18.9272%" y="191.50"></text></g><g><title>dfbench`mi_segment_try_purge (27 samples, 0.02%)</title><rect x="18.6772%" y="165" width="0.0234%" height="15" fill="rgb(210,56,17)" fg:x="21572" fg:w="27"/><text x="18.9272%" y="175.50"></text></g><g><title>dfbench`mi_segment_purge (27 samples, 0.02%)</title><rect x="18.6772%" y="149" width="0.0234%" height="15" fill="rgb(224,130,29)" fg:x="21572" fg:w="27"/><text x="18.9272%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`madvise (27 samples, 0.02%)</title><rect x="18.6772%" y="133" width="0.0234%" height="15" fill="rgb(235,212,8)" fg:x="21572" fg:w="27"/><text x="18.9272%" y="143.50"></text></g><g><title>dfbench`mi_page_free_list_extend (12 samples, 0.01%)</title><rect x="18.7006%" y="229" width="0.0104%" height="15" fill="rgb(223,33,50)" fg:x="21599" fg:w="12"/><text x="18.9506%" y="239.50"></text></g><g><title>dfbench`mi_heap_malloc_zero_aligned_at_generic (701 samples, 0.61%)</title><rect x="18.1101%" y="277" width="0.6069%" height="15" fill="rgb(219,149,13)" fg:x="20917" fg:w="701"/><text x="18.3601%" y="287.50"></text></g><g><title>dfbench`_mi_malloc_generic (699 samples, 0.61%)</title><rect x="18.1118%" y="261" width="0.6052%" height="15" fill="rgb(250,156,29)" fg:x="20919" fg:w="699"/><text x="18.3618%" y="271.50"></text></g><g><title>dfbench`mi_find_page (65 samples, 0.06%)</title><rect x="18.6608%" y="245" width="0.0563%" height="15" fill="rgb(216,193,19)" fg:x="21553" fg:w="65"/><text x="18.9108%" y="255.50"></text></g><g><title>libsystem_c.dylib`clock_gettime_nsec_np (24 samples, 0.02%)</title><rect x="18.7413%" y="245" width="0.0208%" height="15" fill="rgb(216,135,14)" fg:x="21646" fg:w="24"/><text x="18.9913%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (211 samples, 0.18%)</title><rect x="18.7621%" y="245" width="0.1827%" height="15" fill="rgb(241,47,5)" fg:x="21670" fg:w="211"/><text x="19.0121%" y="255.50"></text></g><g><title>libsystem_c.dylib`clock_gettime (256 samples, 0.22%)</title><rect x="18.7240%" y="261" width="0.2216%" height="15" fill="rgb(233,42,35)" fg:x="21626" fg:w="256"/><text x="18.9740%" y="271.50"></text></g><g><title>dfbench`std::sys::pal::unix::time::Timespec::now (261 samples, 0.23%)</title><rect x="18.7222%" y="277" width="0.2260%" height="15" fill="rgb(231,13,6)" fg:x="21624" fg:w="261"/><text x="18.9722%" y="287.50"></text></g><g><title>dfbench`&lt;datafusion_physical_plan::coalesce_batches::CoalesceBatchesStream as futures_core::stream::Stream&gt;::poll_next (7,259 samples, 6.28%)</title><rect x="12.6676%" y="293" width="6.2849%" height="15" fill="rgb(207,181,40)" fg:x="14631" fg:w="7259"/><text x="12.9176%" y="303.50">dfbench`..</text></g><g><title>dfbench`DYLD-STUB$$memcpy (133 samples, 0.12%)</title><rect x="18.9577%" y="293" width="0.1152%" height="15" fill="rgb(254,173,49)" fg:x="21896" fg:w="133"/><text x="19.2077%" y="303.50"></text></g><g><title>dfbench`&lt;arrow_array::array::byte_view_array::GenericByteViewArray&lt;T&gt; as arrow_array::array::Array&gt;::slice (13 samples, 0.01%)</title><rect x="19.0772%" y="277" width="0.0113%" height="15" fill="rgb(221,1,38)" fg:x="22034" fg:w="13"/><text x="19.3272%" y="287.50"></text></g><g><title>dfbench`&lt;arrow_array::array::primitive_array::PrimitiveArray&lt;T&gt; as arrow_array::array::Array&gt;::slice (18 samples, 0.02%)</title><rect x="19.0885%" y="277" width="0.0156%" height="15" fill="rgb(206,124,46)" fg:x="22047" fg:w="18"/><text x="19.3385%" y="287.50"></text></g><g><title>dfbench`arrow_array::record_batch::RecordBatch::slice (34 samples, 0.03%)</title><rect x="19.0764%" y="293" width="0.0294%" height="15" fill="rgb(249,21,11)" fg:x="22033" fg:w="34"/><text x="19.3264%" y="303.50"></text></g><g><title>dfbench`mi_segment_try_purge (48 samples, 0.04%)</title><rect x="19.1205%" y="165" width="0.0416%" height="15" fill="rgb(222,201,40)" fg:x="22084" fg:w="48"/><text x="19.3705%" y="175.50"></text></g><g><title>dfbench`mi_segment_purge (48 samples, 0.04%)</title><rect x="19.1205%" y="149" width="0.0416%" height="15" fill="rgb(235,61,29)" fg:x="22084" fg:w="48"/><text x="19.3705%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`madvise (48 samples, 0.04%)</title><rect x="19.1205%" y="133" width="0.0416%" height="15" fill="rgb(219,207,3)" fg:x="22084" fg:w="48"/><text x="19.3705%" y="143.50"></text></g><g><title>dfbench`_mi_page_free (56 samples, 0.05%)</title><rect x="19.1170%" y="229" width="0.0485%" height="15" fill="rgb(222,56,46)" fg:x="22080" fg:w="56"/><text x="19.3670%" y="239.50"></text></g><g><title>dfbench`mi_segment_page_clear (56 samples, 0.05%)</title><rect x="19.1170%" y="213" width="0.0485%" height="15" fill="rgb(239,76,54)" fg:x="22080" fg:w="56"/><text x="19.3670%" y="223.50"></text></g><g><title>dfbench`mi_segment_span_free_coalesce (56 samples, 0.05%)</title><rect x="19.1170%" y="197" width="0.0485%" height="15" fill="rgb(231,124,27)" fg:x="22080" fg:w="56"/><text x="19.3670%" y="207.50"></text></g><g><title>dfbench`mi_segment_span_free (53 samples, 0.05%)</title><rect x="19.1196%" y="181" width="0.0459%" height="15" fill="rgb(249,195,6)" fg:x="22083" fg:w="53"/><text x="19.3696%" y="191.50"></text></g><g><title>dfbench`alloc::sync::Arc&lt;T,A&gt;::drop_slow (71 samples, 0.06%)</title><rect x="19.1162%" y="245" width="0.0615%" height="15" fill="rgb(237,174,47)" fg:x="22079" fg:w="71"/><text x="19.3662%" y="255.50"></text></g><g><title>dfbench`core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;arrow_buffer::buffer::immutable::Buffer&gt;&gt; (33 samples, 0.03%)</title><rect x="19.1777%" y="245" width="0.0286%" height="15" fill="rgb(206,201,31)" fg:x="22150" fg:w="33"/><text x="19.4277%" y="255.50"></text></g><g><title>dfbench`core::ptr::drop_in_place&lt;arrow_array::array::byte_view_array::GenericByteViewArray&lt;arrow_array::types::BinaryViewType&gt;&gt; (118 samples, 0.10%)</title><rect x="19.1136%" y="261" width="0.1022%" height="15" fill="rgb(231,57,52)" fg:x="22076" fg:w="118"/><text x="19.3636%" y="271.50"></text></g><g><title>dfbench`alloc::sync::Arc&lt;T,A&gt;::drop_slow (133 samples, 0.12%)</title><rect x="19.1110%" y="277" width="0.1152%" height="15" fill="rgb(248,177,22)" fg:x="22073" fg:w="133"/><text x="19.3610%" y="287.50"></text></g><g><title>dfbench`core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::sync::Arc&lt;dyn arrow_array::array::Array&gt;&gt;&gt; (143 samples, 0.12%)</title><rect x="19.1058%" y="293" width="0.1238%" height="15" fill="rgb(215,211,37)" fg:x="22067" fg:w="143"/><text x="19.3558%" y="303.50"></text></g><g><title>dfbench`&lt;datafusion_physical_plan::aggregates::group_values::multi_group_by::GroupValuesColumn&lt;_&gt; as datafusion_physical_plan::aggregates::group_values::GroupValues&gt;::clear_shrink (92 samples, 0.08%)</title><rect x="19.2296%" y="277" width="0.0797%" height="15" fill="rgb(241,128,51)" fg:x="22210" fg:w="92"/><text x="19.4796%" y="287.50"></text></g><g><title>dfbench`mi_free_block_mt (92 samples, 0.08%)</title><rect x="19.2296%" y="261" width="0.0797%" height="15" fill="rgb(227,165,31)" fg:x="22210" fg:w="92"/><text x="19.4796%" y="271.50"></text></g><g><title>dfbench`_mi_os_reset (92 samples, 0.08%)</title><rect x="19.2296%" y="245" width="0.0797%" height="15" fill="rgb(228,167,24)" fg:x="22210" fg:w="92"/><text x="19.4796%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`madvise (92 samples, 0.08%)</title><rect x="19.2296%" y="229" width="0.0797%" height="15" fill="rgb(228,143,12)" fg:x="22210" fg:w="92"/><text x="19.4796%" y="239.50"></text></g><g><title>dfbench`datafusion_physical_plan::aggregates::row_hash::GroupedHashAggregateStream::clear_all (110 samples, 0.10%)</title><rect x="19.2296%" y="293" width="0.0952%" height="15" fill="rgb(249,149,8)" fg:x="22210" fg:w="110"/><text x="19.4796%" y="303.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (17 samples, 0.01%)</title><rect x="19.3101%" y="277" width="0.0147%" height="15" fill="rgb(243,35,44)" fg:x="22303" fg:w="17"/><text x="19.5601%" y="287.50"></text></g><g><title>dfbench`_mi_malloc_generic (16 samples, 0.01%)</title><rect x="19.8539%" y="213" width="0.0139%" height="15" fill="rgb(246,89,9)" fg:x="22931" fg:w="16"/><text x="20.1039%" y="223.50"></text></g><g><title>dfbench`mi_free_block_mt (56 samples, 0.05%)</title><rect x="19.8694%" y="213" width="0.0485%" height="15" fill="rgb(233,213,13)" fg:x="22949" fg:w="56"/><text x="20.1194%" y="223.50"></text></g><g><title>dfbench`_mi_os_reset (56 samples, 0.05%)</title><rect x="19.8694%" y="197" width="0.0485%" height="15" fill="rgb(233,141,41)" fg:x="22949" fg:w="56"/><text x="20.1194%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`madvise (56 samples, 0.05%)</title><rect x="19.8694%" y="181" width="0.0485%" height="15" fill="rgb(239,167,4)" fg:x="22949" fg:w="56"/><text x="20.1194%" y="191.50"></text></g><g><title>dfbench`_mi_heap_realloc_zero (83 samples, 0.07%)</title><rect x="19.8539%" y="229" width="0.0719%" height="15" fill="rgb(209,217,16)" fg:x="22931" fg:w="83"/><text x="20.1039%" y="239.50"></text></g><g><title>dfbench`&lt;datafusion_functions_aggregate::count::CountGroupsAccumulator as datafusion_expr_common::groups_accumulator::GroupsAccumulator&gt;::merge_batch (1,474 samples, 1.28%)</title><rect x="19.3318%" y="277" width="1.2762%" height="15" fill="rgb(219,88,35)" fg:x="22328" fg:w="1474"/><text x="19.5818%" y="287.50"></text></g><g><title>dfbench`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (871 samples, 0.75%)</title><rect x="19.8539%" y="261" width="0.7541%" height="15" fill="rgb(220,193,23)" fg:x="22931" fg:w="871"/><text x="20.1039%" y="271.50"></text></g><g><title>dfbench`alloc::raw_vec::finish_grow (871 samples, 0.75%)</title><rect x="19.8539%" y="245" width="0.7541%" height="15" fill="rgb(230,90,52)" fg:x="22931" fg:w="871"/><text x="20.1039%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (788 samples, 0.68%)</title><rect x="19.9257%" y="229" width="0.6823%" height="15" fill="rgb(252,106,19)" fg:x="23014" fg:w="788"/><text x="20.1757%" y="239.50"></text></g><g><title>dfbench`DYLD-STUB$$memcpy (25 samples, 0.02%)</title><rect x="30.5223%" y="245" width="0.0216%" height="15" fill="rgb(206,74,20)" fg:x="35253" fg:w="25"/><text x="30.7723%" y="255.50"></text></g><g><title>dfbench`arrow_array::builder::generic_bytes_view_builder::make_view (433 samples, 0.37%)</title><rect x="30.5440%" y="245" width="0.3749%" height="15" fill="rgb(230,138,44)" fg:x="35278" fg:w="433"/><text x="30.7940%" y="255.50"></text></g><g><title>dfbench`mi_free_block_mt (116 samples, 0.10%)</title><rect x="32.3483%" y="181" width="0.1004%" height="15" fill="rgb(235,182,43)" fg:x="37362" fg:w="116"/><text x="32.5983%" y="191.50"></text></g><g><title>dfbench`_mi_os_reset (116 samples, 0.10%)</title><rect x="32.3483%" y="165" width="0.1004%" height="15" fill="rgb(242,16,51)" fg:x="37362" fg:w="116"/><text x="32.5983%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`madvise (116 samples, 0.10%)</title><rect x="32.3483%" y="149" width="0.1004%" height="15" fill="rgb(248,9,4)" fg:x="37362" fg:w="116"/><text x="32.5983%" y="159.50"></text></g><g><title>dfbench`_mi_page_free (26 samples, 0.02%)</title><rect x="32.4514%" y="133" width="0.0225%" height="15" fill="rgb(210,31,22)" fg:x="37481" fg:w="26"/><text x="32.7014%" y="143.50"></text></g><g><title>dfbench`mi_segment_page_clear (26 samples, 0.02%)</title><rect x="32.4514%" y="117" width="0.0225%" height="15" fill="rgb(239,54,39)" fg:x="37481" fg:w="26"/><text x="32.7014%" y="127.50"></text></g><g><title>dfbench`mi_segment_span_free_coalesce (26 samples, 0.02%)</title><rect x="32.4514%" y="101" width="0.0225%" height="15" fill="rgb(230,99,41)" fg:x="37481" fg:w="26"/><text x="32.7014%" y="111.50"></text></g><g><title>dfbench`mi_segment_span_free (26 samples, 0.02%)</title><rect x="32.4514%" y="85" width="0.0225%" height="15" fill="rgb(253,106,12)" fg:x="37481" fg:w="26"/><text x="32.7014%" y="95.50"></text></g><g><title>dfbench`mi_segment_try_purge (26 samples, 0.02%)</title><rect x="32.4514%" y="69" width="0.0225%" height="15" fill="rgb(213,46,41)" fg:x="37481" fg:w="26"/><text x="32.7014%" y="79.50"></text></g><g><title>dfbench`mi_segment_purge (26 samples, 0.02%)</title><rect x="32.4514%" y="53" width="0.0225%" height="15" fill="rgb(215,133,35)" fg:x="37481" fg:w="26"/><text x="32.7014%" y="63.50"></text></g><g><title>libsystem_kernel.dylib`madvise (26 samples, 0.02%)</title><rect x="32.4514%" y="37" width="0.0225%" height="15" fill="rgb(213,28,5)" fg:x="37481" fg:w="26"/><text x="32.7014%" y="47.50"></text></g><g><title>dfbench`_mi_free_delayed_block (94 samples, 0.08%)</title><rect x="32.4488%" y="149" width="0.0814%" height="15" fill="rgb(215,77,49)" fg:x="37478" fg:w="94"/><text x="32.6988%" y="159.50"></text></g><g><title>dfbench`mi_segment_free (65 samples, 0.06%)</title><rect x="32.4739%" y="133" width="0.0563%" height="15" fill="rgb(248,100,22)" fg:x="37507" fg:w="65"/><text x="32.7239%" y="143.50"></text></g><g><title>dfbench`mi_arenas_try_purge (65 samples, 0.06%)</title><rect x="32.4739%" y="117" width="0.0563%" height="15" fill="rgb(208,67,9)" fg:x="37507" fg:w="65"/><text x="32.7239%" y="127.50"></text></g><g><title>dfbench`mi_arena_purge (65 samples, 0.06%)</title><rect x="32.4739%" y="101" width="0.0563%" height="15" fill="rgb(219,133,21)" fg:x="37507" fg:w="65"/><text x="32.7239%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`madvise (65 samples, 0.06%)</title><rect x="32.4739%" y="85" width="0.0563%" height="15" fill="rgb(246,46,29)" fg:x="37507" fg:w="65"/><text x="32.7239%" y="95.50"></text></g><g><title>dfbench`mi_heap_malloc_zero_aligned_at_generic (108 samples, 0.09%)</title><rect x="32.4488%" y="181" width="0.0935%" height="15" fill="rgb(246,185,52)" fg:x="37478" fg:w="108"/><text x="32.6988%" y="191.50"></text></g><g><title>dfbench`_mi_malloc_generic (108 samples, 0.09%)</title><rect x="32.4488%" y="165" width="0.0935%" height="15" fill="rgb(252,136,11)" fg:x="37478" fg:w="108"/><text x="32.6988%" y="175.50"></text></g><g><title>dfbench`mi_page_fresh_alloc (14 samples, 0.01%)</title><rect x="32.5302%" y="149" width="0.0121%" height="15" fill="rgb(219,138,53)" fg:x="37572" fg:w="14"/><text x="32.7802%" y="159.50"></text></g><g><title>dfbench`mi_segment_huge_page_alloc (14 samples, 0.01%)</title><rect x="32.5302%" y="133" width="0.0121%" height="15" fill="rgb(211,51,23)" fg:x="37572" fg:w="14"/><text x="32.7802%" y="143.50"></text></g><g><title>libsystem_platform.dylib`__bzero (12 samples, 0.01%)</title><rect x="32.5319%" y="117" width="0.0104%" height="15" fill="rgb(247,221,28)" fg:x="37574" fg:w="12"/><text x="32.7819%" y="127.50"></text></g><g><title>dfbench`mi_heap_realloc_zero_aligned_at (232 samples, 0.20%)</title><rect x="32.3483%" y="197" width="0.2009%" height="15" fill="rgb(251,222,45)" fg:x="37362" fg:w="232"/><text x="32.5983%" y="207.50"></text></g><g><title>dfbench`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (2,191 samples, 1.90%)</title><rect x="32.3483%" y="229" width="1.8970%" height="15" fill="rgb(217,162,53)" fg:x="37362" fg:w="2191"/><text x="32.5983%" y="239.50">d..</text></g><g><title>dfbench`alloc::raw_vec::finish_grow (2,191 samples, 1.90%)</title><rect x="32.3483%" y="213" width="1.8970%" height="15" fill="rgb(229,93,14)" fg:x="37362" fg:w="2191"/><text x="32.5983%" y="223.50">d..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (1,959 samples, 1.70%)</title><rect x="32.5492%" y="197" width="1.6961%" height="15" fill="rgb(209,67,49)" fg:x="37594" fg:w="1959"/><text x="32.7992%" y="207.50"></text></g><g><title>dfbench`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (13 samples, 0.01%)</title><rect x="34.2453%" y="229" width="0.0113%" height="15" fill="rgb(213,87,29)" fg:x="39553" fg:w="13"/><text x="34.4953%" y="239.50"></text></g><g><title>dfbench`alloc::raw_vec::finish_grow (13 samples, 0.01%)</title><rect x="34.2453%" y="213" width="0.0113%" height="15" fill="rgb(205,151,52)" fg:x="39553" fg:w="13"/><text x="34.4953%" y="223.50"></text></g><g><title>dfbench`_mi_free_delayed_block (36 samples, 0.03%)</title><rect x="34.2566%" y="197" width="0.0312%" height="15" fill="rgb(253,215,39)" fg:x="39566" fg:w="36"/><text x="34.5066%" y="207.50"></text></g><g><title>dfbench`mi_segment_free (20 samples, 0.02%)</title><rect x="34.2704%" y="181" width="0.0173%" height="15" fill="rgb(221,220,41)" fg:x="39582" fg:w="20"/><text x="34.5204%" y="191.50"></text></g><g><title>dfbench`mi_arenas_try_purge (20 samples, 0.02%)</title><rect x="34.2704%" y="165" width="0.0173%" height="15" fill="rgb(218,133,21)" fg:x="39582" fg:w="20"/><text x="34.5204%" y="175.50"></text></g><g><title>dfbench`mi_arena_purge (20 samples, 0.02%)</title><rect x="34.2704%" y="149" width="0.0173%" height="15" fill="rgb(221,193,43)" fg:x="39582" fg:w="20"/><text x="34.5204%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`madvise (20 samples, 0.02%)</title><rect x="34.2704%" y="133" width="0.0173%" height="15" fill="rgb(240,128,52)" fg:x="39582" fg:w="20"/><text x="34.5204%" y="143.50"></text></g><g><title>dfbench`datafusion_physical_plan::aggregates::group_values::multi_group_by::bytes_view::ByteViewGroupValueBuilder&lt;B&gt;::do_append_val_inner (3,903 samples, 3.38%)</title><rect x="30.9189%" y="245" width="3.3793%" height="15" fill="rgb(253,114,12)" fg:x="35711" fg:w="3903"/><text x="31.1689%" y="255.50">dfb..</text></g><g><title>dfbench`mi_heap_malloc_zero_aligned_at_generic (48 samples, 0.04%)</title><rect x="34.2566%" y="229" width="0.0416%" height="15" fill="rgb(215,223,47)" fg:x="39566" fg:w="48"/><text x="34.5066%" y="239.50"></text></g><g><title>dfbench`_mi_malloc_generic (48 samples, 0.04%)</title><rect x="34.2566%" y="213" width="0.0416%" height="15" fill="rgb(248,225,23)" fg:x="39566" fg:w="48"/><text x="34.5066%" y="223.50"></text></g><g><title>dfbench`&lt;datafusion_physical_plan::aggregates::group_values::multi_group_by::bytes_view::ByteViewGroupValueBuilder&lt;B&gt; as datafusion_physical_plan::aggregates::group_values::multi_group_by::GroupColumn&gt;::vectorized_append (5,323 samples, 4.61%)</title><rect x="30.5085%" y="261" width="4.6087%" height="15" fill="rgb(250,108,0)" fg:x="35237" fg:w="5323"/><text x="30.7585%" y="271.50">dfben..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (946 samples, 0.82%)</title><rect x="34.2981%" y="245" width="0.8191%" height="15" fill="rgb(228,208,7)" fg:x="39614" fg:w="946"/><text x="34.5481%" y="255.50"></text></g><g><title>dfbench`datafusion_physical_plan::aggregates::group_values::multi_group_by::bytes_view::ByteViewGroupValueBuilder&lt;B&gt;::do_equal_to_inner (445 samples, 0.39%)</title><rect x="35.1406%" y="245" width="0.3853%" height="15" fill="rgb(244,45,10)" fg:x="40587" fg:w="445"/><text x="35.3906%" y="255.50"></text></g><g><title>dfbench`&lt;datafusion_physical_plan::aggregates::group_values::multi_group_by::bytes_view::ByteViewGroupValueBuilder&lt;B&gt; as datafusion_physical_plan::aggregates::group_values::multi_group_by::GroupColumn&gt;::vectorized_equal_to (513 samples, 0.44%)</title><rect x="35.1172%" y="261" width="0.4442%" height="15" fill="rgb(207,125,25)" fg:x="40560" fg:w="513"/><text x="35.3672%" y="271.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (41 samples, 0.04%)</title><rect x="35.5258%" y="245" width="0.0355%" height="15" fill="rgb(210,195,18)" fg:x="41032" fg:w="41"/><text x="35.7758%" y="255.50"></text></g><g><title>dfbench`_mi_page_free (14 samples, 0.01%)</title><rect x="36.6263%" y="165" width="0.0121%" height="15" fill="rgb(249,80,12)" fg:x="42303" fg:w="14"/><text x="36.8763%" y="175.50"></text></g><g><title>dfbench`mi_segment_page_clear (14 samples, 0.01%)</title><rect x="36.6263%" y="149" width="0.0121%" height="15" fill="rgb(221,65,9)" fg:x="42303" fg:w="14"/><text x="36.8763%" y="159.50"></text></g><g><title>dfbench`mi_segment_span_free_coalesce (14 samples, 0.01%)</title><rect x="36.6263%" y="133" width="0.0121%" height="15" fill="rgb(235,49,36)" fg:x="42303" fg:w="14"/><text x="36.8763%" y="143.50"></text></g><g><title>dfbench`mi_segment_span_free (14 samples, 0.01%)</title><rect x="36.6263%" y="117" width="0.0121%" height="15" fill="rgb(225,32,20)" fg:x="42303" fg:w="14"/><text x="36.8763%" y="127.50"></text></g><g><title>dfbench`mi_segment_try_purge (14 samples, 0.01%)</title><rect x="36.6263%" y="101" width="0.0121%" height="15" fill="rgb(215,141,46)" fg:x="42303" fg:w="14"/><text x="36.8763%" y="111.50"></text></g><g><title>dfbench`mi_segment_purge (14 samples, 0.01%)</title><rect x="36.6263%" y="85" width="0.0121%" height="15" fill="rgb(250,160,47)" fg:x="42303" fg:w="14"/><text x="36.8763%" y="95.50"></text></g><g><title>libsystem_kernel.dylib`madvise (14 samples, 0.01%)</title><rect x="36.6263%" y="69" width="0.0121%" height="15" fill="rgb(216,222,40)" fg:x="42303" fg:w="14"/><text x="36.8763%" y="79.50"></text></g><g><title>dfbench`_mi_free_delayed_block (34 samples, 0.03%)</title><rect x="36.6220%" y="181" width="0.0294%" height="15" fill="rgb(234,217,39)" fg:x="42298" fg:w="34"/><text x="36.8720%" y="191.50"></text></g><g><title>dfbench`mi_segment_free (15 samples, 0.01%)</title><rect x="36.6384%" y="165" width="0.0130%" height="15" fill="rgb(207,178,40)" fg:x="42317" fg:w="15"/><text x="36.8884%" y="175.50"></text></g><g><title>dfbench`mi_arenas_try_purge (15 samples, 0.01%)</title><rect x="36.6384%" y="149" width="0.0130%" height="15" fill="rgb(221,136,13)" fg:x="42317" fg:w="15"/><text x="36.8884%" y="159.50"></text></g><g><title>dfbench`mi_arena_purge (15 samples, 0.01%)</title><rect x="36.6384%" y="133" width="0.0130%" height="15" fill="rgb(249,199,10)" fg:x="42317" fg:w="15"/><text x="36.8884%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`madvise (15 samples, 0.01%)</title><rect x="36.6384%" y="117" width="0.0130%" height="15" fill="rgb(249,222,13)" fg:x="42317" fg:w="15"/><text x="36.8884%" y="127.50"></text></g><g><title>dfbench`_mi_malloc_generic (48 samples, 0.04%)</title><rect x="36.6220%" y="197" width="0.0416%" height="15" fill="rgb(244,185,38)" fg:x="42298" fg:w="48"/><text x="36.8720%" y="207.50"></text></g><g><title>dfbench`mi_page_fresh_alloc (12 samples, 0.01%)</title><rect x="36.6531%" y="181" width="0.0104%" height="15" fill="rgb(236,202,9)" fg:x="42334" fg:w="12"/><text x="36.9031%" y="191.50"></text></g><g><title>dfbench`mi_free_block_mt (72 samples, 0.06%)</title><rect x="36.6653%" y="197" width="0.0623%" height="15" fill="rgb(250,229,37)" fg:x="42348" fg:w="72"/><text x="36.9153%" y="207.50"></text></g><g><title>dfbench`_mi_os_reset (72 samples, 0.06%)</title><rect x="36.6653%" y="181" width="0.0623%" height="15" fill="rgb(206,174,23)" fg:x="42348" fg:w="72"/><text x="36.9153%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`madvise (72 samples, 0.06%)</title><rect x="36.6653%" y="165" width="0.0623%" height="15" fill="rgb(211,33,43)" fg:x="42348" fg:w="72"/><text x="36.9153%" y="175.50"></text></g><g><title>dfbench`_mi_heap_realloc_zero (131 samples, 0.11%)</title><rect x="36.6220%" y="213" width="0.1134%" height="15" fill="rgb(245,58,50)" fg:x="42298" fg:w="131"/><text x="36.8720%" y="223.50"></text></g><g><title>dfbench`&lt;datafusion_physical_plan::aggregates::group_values::multi_group_by::primitive::PrimitiveGroupValueBuilder&lt;T,_&gt; as datafusion_physical_plan::aggregates::group_values::multi_group_by::GroupColumn&gt;::vectorized_append (2,934 samples, 2.54%)</title><rect x="35.5613%" y="261" width="2.5403%" height="15" fill="rgb(244,68,36)" fg:x="41073" fg:w="2934"/><text x="35.8113%" y="271.50">df..</text></g><g><title>dfbench`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (1,709 samples, 1.48%)</title><rect x="36.6220%" y="245" width="1.4797%" height="15" fill="rgb(232,229,15)" fg:x="42298" fg:w="1709"/><text x="36.8720%" y="255.50"></text></g><g><title>dfbench`alloc::raw_vec::finish_grow (1,709 samples, 1.48%)</title><rect x="36.6220%" y="229" width="1.4797%" height="15" fill="rgb(254,30,23)" fg:x="42298" fg:w="1709"/><text x="36.8720%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1,577 samples, 1.37%)</title><rect x="36.7362%" y="213" width="1.3654%" height="15" fill="rgb(235,160,14)" fg:x="42430" fg:w="1577"/><text x="36.9862%" y="223.50"></text></g><g><title>dfbench`&lt;datafusion_physical_plan::aggregates::group_values::multi_group_by::primitive::PrimitiveGroupValueBuilder&lt;T,_&gt; as datafusion_physical_plan::aggregates::group_values::multi_group_by::GroupColumn&gt;::vectorized_equal_to (444 samples, 0.38%)</title><rect x="38.1016%" y="261" width="0.3844%" height="15" fill="rgb(212,155,44)" fg:x="44007" fg:w="444"/><text x="38.3516%" y="271.50"></text></g><g><title>dfbench`&lt;str as datafusion_common::hash_utils::HashValue&gt;::hash_one (1,044 samples, 0.90%)</title><rect x="38.4860%" y="261" width="0.9039%" height="15" fill="rgb(226,2,50)" fg:x="44451" fg:w="1044"/><text x="38.7360%" y="271.50"></text></g><g><title>dfbench`datafusion_common::hash_utils::create_hashes (1,429 samples, 1.24%)</title><rect x="39.3995%" y="261" width="1.2372%" height="15" fill="rgb(234,177,6)" fg:x="45506" fg:w="1429"/><text x="39.6495%" y="271.50"></text></g><g><title>dfbench`datafusion_physical_plan::aggregates::group_values::multi_group_by::bytes_view::ByteViewGroupValueBuilder&lt;B&gt;::do_append_val_inner (384 samples, 0.33%)</title><rect x="40.6367%" y="261" width="0.3325%" height="15" fill="rgb(217,24,9)" fg:x="46935" fg:w="384"/><text x="40.8867%" y="271.50"></text></g><g><title>dfbench`mi_free_block_mt (133 samples, 0.12%)</title><rect x="45.1484%" y="245" width="0.1152%" height="15" fill="rgb(220,13,46)" fg:x="52146" fg:w="133"/><text x="45.3984%" y="255.50"></text></g><g><title>dfbench`_mi_os_reset (133 samples, 0.12%)</title><rect x="45.1484%" y="229" width="0.1152%" height="15" fill="rgb(239,221,27)" fg:x="52146" fg:w="133"/><text x="45.3984%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`madvise (133 samples, 0.12%)</title><rect x="45.1484%" y="213" width="0.1152%" height="15" fill="rgb(222,198,25)" fg:x="52146" fg:w="133"/><text x="45.3984%" y="223.50"></text></g><g><title>dfbench`mi_segment_free (15 samples, 0.01%)</title><rect x="45.2636%" y="245" width="0.0130%" height="15" fill="rgb(211,99,13)" fg:x="52279" fg:w="15"/><text x="45.5136%" y="255.50"></text></g><g><title>dfbench`mi_arenas_try_purge (15 samples, 0.01%)</title><rect x="45.2636%" y="229" width="0.0130%" height="15" fill="rgb(232,111,31)" fg:x="52279" fg:w="15"/><text x="45.5136%" y="239.50"></text></g><g><title>dfbench`mi_arena_purge (15 samples, 0.01%)</title><rect x="45.2636%" y="213" width="0.0130%" height="15" fill="rgb(245,82,37)" fg:x="52279" fg:w="15"/><text x="45.5136%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`madvise (15 samples, 0.01%)</title><rect x="45.2636%" y="197" width="0.0130%" height="15" fill="rgb(227,149,46)" fg:x="52279" fg:w="15"/><text x="45.5136%" y="207.50"></text></g><g><title>dfbench`&lt;datafusion_physical_plan::aggregates::group_values::multi_group_by::GroupValuesColumn&lt;_&gt; as datafusion_physical_plan::aggregates::group_values::GroupValues&gt;::intern (28,672 samples, 24.82%)</title><rect x="20.6080%" y="277" width="24.8245%" height="15" fill="rgb(218,36,50)" fg:x="23802" fg:w="28672"/><text x="20.8580%" y="287.50">dfbench`&lt;datafusion_physical_plan::aggre..</text></g><g><title>dfbench`hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve_rehash (5,155 samples, 4.46%)</title><rect x="40.9692%" y="261" width="4.4632%" height="15" fill="rgb(226,80,48)" fg:x="47319" fg:w="5155"/><text x="41.2192%" y="271.50">dfben..</text></g><g><title>libsystem_platform.dylib`_platform_memset (180 samples, 0.16%)</title><rect x="45.2766%" y="245" width="0.1558%" height="15" fill="rgb(238,224,15)" fg:x="52294" fg:w="180"/><text x="45.5266%" y="255.50"></text></g><g><title>dfbench`datafusion_physical_plan::aggregates::evaluate_group_by (13 samples, 0.01%)</title><rect x="45.4350%" y="277" width="0.0113%" height="15" fill="rgb(241,136,10)" fg:x="52477" fg:w="13"/><text x="45.6850%" y="287.50"></text></g><g><title>libsystem_platform.dylib`__bzero (244 samples, 0.21%)</title><rect x="45.4584%" y="277" width="0.2113%" height="15" fill="rgb(208,32,45)" fg:x="52504" fg:w="244"/><text x="45.7084%" y="287.50"></text></g><g><title>dfbench`datafusion_physical_plan::aggregates::row_hash::GroupedHashAggregateStream::group_aggregate_batch (30,482 samples, 26.39%)</title><rect x="19.3248%" y="293" width="26.3916%" height="15" fill="rgb(207,135,9)" fg:x="22320" fg:w="30482"/><text x="19.5748%" y="303.50">dfbench`datafusion_physical_plan::aggregat..</text></g><g><title>libsystem_platform.dylib`_platform_memset (54 samples, 0.05%)</title><rect x="45.6697%" y="277" width="0.0468%" height="15" fill="rgb(206,86,44)" fg:x="52748" fg:w="54"/><text x="45.9197%" y="287.50"></text></g><g><title>dfbench`mi_free (17 samples, 0.01%)</title><rect x="45.7181%" y="293" width="0.0147%" height="15" fill="rgb(245,177,15)" fg:x="52804" fg:w="17"/><text x="45.9681%" y="303.50"></text></g><g><title>dfbench`mi_free_block_delayed_mt (18 samples, 0.02%)</title><rect x="45.7329%" y="293" width="0.0156%" height="15" fill="rgb(206,64,50)" fg:x="52821" fg:w="18"/><text x="45.9829%" y="303.50"></text></g><g><title>dfbench`std::sys::pal::unix::time::Timespec::now (22 samples, 0.02%)</title><rect x="45.7588%" y="293" width="0.0190%" height="15" fill="rgb(234,36,40)" fg:x="52851" fg:w="22"/><text x="46.0088%" y="303.50"></text></g><g><title>libsystem_c.dylib`clock_gettime (13 samples, 0.01%)</title><rect x="45.7666%" y="277" width="0.0113%" height="15" fill="rgb(213,64,8)" fg:x="52860" fg:w="13"/><text x="46.0166%" y="287.50"></text></g><g><title>dfbench`&lt;datafusion_physical_plan::aggregates::row_hash::GroupedHashAggregateStream as futures_core::stream::Stream&gt;::poll_next (39,676 samples, 34.35%)</title><rect x="12.6590%" y="309" width="34.3518%" height="15" fill="rgb(210,75,36)" fg:x="14621" fg:w="39676"/><text x="12.9090%" y="319.50">dfbench`&lt;datafusion_physical_plan::aggregates::row_hash:..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (1,423 samples, 1.23%)</title><rect x="45.7788%" y="293" width="1.2320%" height="15" fill="rgb(229,88,21)" fg:x="52874" fg:w="1423"/><text x="46.0288%" y="303.50"></text></g><g><title>dfbench`&lt;datafusion_physical_plan::projection::ProjectionStream as futures_core::stream::Stream&gt;::poll_next (39,697 samples, 34.37%)</title><rect x="12.6512%" y="325" width="34.3700%" height="15" fill="rgb(252,204,47)" fg:x="14612" fg:w="39697"/><text x="12.9012%" y="335.50">dfbench`&lt;datafusion_physical_plan::projection::Projectio..</text></g><g><title>dfbench`arrow_row::fixed::encode_not_null (381 samples, 0.33%)</title><rect x="47.2714%" y="309" width="0.3299%" height="15" fill="rgb(208,77,27)" fg:x="54598" fg:w="381"/><text x="47.5214%" y="319.50"></text></g><g><title>dfbench`mi_segment_free (65 samples, 0.06%)</title><rect x="47.6558%" y="245" width="0.0563%" height="15" fill="rgb(221,76,26)" fg:x="55042" fg:w="65"/><text x="47.9058%" y="255.50"></text></g><g><title>dfbench`mi_arenas_try_purge (65 samples, 0.06%)</title><rect x="47.6558%" y="229" width="0.0563%" height="15" fill="rgb(225,139,18)" fg:x="55042" fg:w="65"/><text x="47.9058%" y="239.50"></text></g><g><title>dfbench`mi_arena_purge (65 samples, 0.06%)</title><rect x="47.6558%" y="213" width="0.0563%" height="15" fill="rgb(230,137,11)" fg:x="55042" fg:w="65"/><text x="47.9058%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`madvise (65 samples, 0.06%)</title><rect x="47.6558%" y="197" width="0.0563%" height="15" fill="rgb(212,28,1)" fg:x="55042" fg:w="65"/><text x="47.9058%" y="207.50"></text></g><g><title>dfbench`_mi_free_delayed_block (75 samples, 0.06%)</title><rect x="47.6480%" y="261" width="0.0649%" height="15" fill="rgb(248,164,17)" fg:x="55033" fg:w="75"/><text x="47.8980%" y="271.50"></text></g><g><title>dfbench`_mi_malloc_generic (78 samples, 0.07%)</title><rect x="47.6480%" y="277" width="0.0675%" height="15" fill="rgb(222,171,42)" fg:x="55033" fg:w="78"/><text x="47.8980%" y="287.50"></text></g><g><title>dfbench`arrow_row::row_lengths (144 samples, 0.12%)</title><rect x="47.6013%" y="309" width="0.1247%" height="15" fill="rgb(243,84,45)" fg:x="54979" fg:w="144"/><text x="47.8513%" y="319.50"></text></g><g><title>dfbench`mi_heap_malloc_zero_aligned_at_generic (90 samples, 0.08%)</title><rect x="47.6480%" y="293" width="0.0779%" height="15" fill="rgb(252,49,23)" fg:x="55033" fg:w="90"/><text x="47.8980%" y="303.50"></text></g><g><title>libsystem_platform.dylib`__bzero (12 samples, 0.01%)</title><rect x="47.7156%" y="277" width="0.0104%" height="15" fill="rgb(215,19,7)" fg:x="55111" fg:w="12"/><text x="47.9656%" y="287.50"></text></g><g><title>dfbench`arrow_row::RowConverter::append (815 samples, 0.71%)</title><rect x="47.0221%" y="325" width="0.7056%" height="15" fill="rgb(238,81,41)" fg:x="54310" fg:w="815"/><text x="47.2721%" y="335.50"></text></g><g><title>dfbench`core::ptr::drop_in_place&lt;arrow_array::array::byte_view_array::GenericByteViewArray&lt;arrow_array::types::BinaryViewType&gt;&gt; (80 samples, 0.07%)</title><rect x="47.7303%" y="261" width="0.0693%" height="15" fill="rgb(210,199,37)" fg:x="55128" fg:w="80"/><text x="47.9803%" y="271.50"></text></g><g><title>dfbench`alloc::sync::Arc&lt;T,A&gt;::drop_slow (80 samples, 0.07%)</title><rect x="47.7303%" y="245" width="0.0693%" height="15" fill="rgb(244,192,49)" fg:x="55128" fg:w="80"/><text x="47.9803%" y="255.50"></text></g><g><title>dfbench`mi_free_block_mt (80 samples, 0.07%)</title><rect x="47.7303%" y="229" width="0.0693%" height="15" fill="rgb(226,211,11)" fg:x="55128" fg:w="80"/><text x="47.9803%" y="239.50"></text></g><g><title>dfbench`_mi_os_reset (80 samples, 0.07%)</title><rect x="47.7303%" y="213" width="0.0693%" height="15" fill="rgb(236,162,54)" fg:x="55128" fg:w="80"/><text x="47.9803%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`madvise (80 samples, 0.07%)</title><rect x="47.7303%" y="197" width="0.0693%" height="15" fill="rgb(220,229,9)" fg:x="55128" fg:w="80"/><text x="47.9803%" y="207.50"></text></g><g><title>dfbench`core::ptr::drop_in_place&lt;datafusion_physical_plan::topk::RecordBatchStore&gt; (209 samples, 0.18%)</title><rect x="47.7303%" y="325" width="0.1810%" height="15" fill="rgb(250,87,22)" fg:x="55128" fg:w="209"/><text x="47.9803%" y="335.50"></text></g><g><title>dfbench`hashbrown::raw::inner::RawTableInner::drop_elements (209 samples, 0.18%)</title><rect x="47.7303%" y="309" width="0.1810%" height="15" fill="rgb(239,43,17)" fg:x="55128" fg:w="209"/><text x="47.9803%" y="319.50"></text></g><g><title>dfbench`core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::sync::Arc&lt;dyn arrow_array::array::Array&gt;&gt;&gt; (209 samples, 0.18%)</title><rect x="47.7303%" y="293" width="0.1810%" height="15" fill="rgb(231,177,25)" fg:x="55128" fg:w="209"/><text x="47.9803%" y="303.50"></text></g><g><title>dfbench`alloc::sync::Arc&lt;T,A&gt;::drop_slow (209 samples, 0.18%)</title><rect x="47.7303%" y="277" width="0.1810%" height="15" fill="rgb(219,179,1)" fg:x="55128" fg:w="209"/><text x="47.9803%" y="287.50"></text></g><g><title>dfbench`core::ptr::drop_in_place&lt;arrow_array::array::primitive_array::PrimitiveArray&lt;arrow_array::types::Int8Type&gt;&gt; (129 samples, 0.11%)</title><rect x="47.7995%" y="261" width="0.1117%" height="15" fill="rgb(238,219,53)" fg:x="55208" fg:w="129"/><text x="48.0495%" y="271.50"></text></g><g><title>dfbench`alloc::sync::Arc&lt;T,A&gt;::drop_slow (129 samples, 0.11%)</title><rect x="47.7995%" y="245" width="0.1117%" height="15" fill="rgb(232,167,36)" fg:x="55208" fg:w="129"/><text x="48.0495%" y="255.50"></text></g><g><title>dfbench`mi_free_block_mt (129 samples, 0.11%)</title><rect x="47.7995%" y="229" width="0.1117%" height="15" fill="rgb(244,19,51)" fg:x="55208" fg:w="129"/><text x="48.0495%" y="239.50"></text></g><g><title>dfbench`_mi_os_reset (129 samples, 0.11%)</title><rect x="47.7995%" y="213" width="0.1117%" height="15" fill="rgb(224,6,22)" fg:x="55208" fg:w="129"/><text x="48.0495%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`madvise (129 samples, 0.11%)</title><rect x="47.7995%" y="197" width="0.1117%" height="15" fill="rgb(224,145,5)" fg:x="55208" fg:w="129"/><text x="48.0495%" y="207.50"></text></g><g><title>dfbench`datafusion_physical_plan::topk::TopKHeap::emit_with_state (23 samples, 0.02%)</title><rect x="47.9112%" y="325" width="0.0199%" height="15" fill="rgb(234,130,49)" fg:x="55337" fg:w="23"/><text x="48.1612%" y="335.50"></text></g><g><title>dfbench`&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::next (22 samples, 0.02%)</title><rect x="47.9121%" y="309" width="0.0190%" height="15" fill="rgb(254,6,2)" fg:x="55338" fg:w="22"/><text x="48.1621%" y="319.50"></text></g><g><title>dfbench`arrow_select::interleave::interleave (22 samples, 0.02%)</title><rect x="47.9121%" y="293" width="0.0190%" height="15" fill="rgb(208,96,46)" fg:x="55338" fg:w="22"/><text x="48.1621%" y="303.50"></text></g><g><title>dfbench`arrow_select::interleave::interleave_primitive (12 samples, 0.01%)</title><rect x="47.9208%" y="277" width="0.0104%" height="15" fill="rgb(239,3,39)" fg:x="55348" fg:w="12"/><text x="48.1708%" y="287.50"></text></g><g><title>dfbench`mi_heap_malloc_zero_aligned_at_generic (12 samples, 0.01%)</title><rect x="47.9208%" y="261" width="0.0104%" height="15" fill="rgb(233,210,1)" fg:x="55348" fg:w="12"/><text x="48.1708%" y="271.50"></text></g><g><title>dfbench`_mi_malloc_generic (12 samples, 0.01%)</title><rect x="47.9208%" y="245" width="0.0104%" height="15" fill="rgb(244,137,37)" fg:x="55348" fg:w="12"/><text x="48.1708%" y="255.50"></text></g><g><title>dfbench`&lt;datafusion_physical_plan::stream::RecordBatchStreamAdapter&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (41,162 samples, 35.64%)</title><rect x="12.3170%" y="341" width="35.6384%" height="15" fill="rgb(240,136,2)" fg:x="14226" fg:w="41162"/><text x="12.5670%" y="351.50">dfbench`&lt;datafusion_physical_plan::stream::RecordBatchStre..</text></g><g><title>libsystem_platform.dylib`__bzero (22 samples, 0.02%)</title><rect x="47.9363%" y="325" width="0.0190%" height="15" fill="rgb(239,18,37)" fg:x="55366" fg:w="22"/><text x="48.1863%" y="335.50"></text></g><g><title>dfbench`DYLD-STUB$$memcmp (67 samples, 0.06%)</title><rect x="47.9554%" y="341" width="0.0580%" height="15" fill="rgb(218,185,22)" fg:x="55388" fg:w="67"/><text x="48.2054%" y="351.50"></text></g><g><title>dfbench`datafusion_physical_plan::common::spawn_buffered::_{{closure}} (41,644 samples, 36.06%)</title><rect x="12.3161%" y="357" width="36.0557%" height="15" fill="rgb(225,218,4)" fg:x="14225" fg:w="41644"/><text x="12.5661%" y="367.50">dfbench`datafusion_physical_plan::common::spawn_buffered::_..</text></g><g><title>libsystem_platform.dylib`_platform_memcmp (413 samples, 0.36%)</title><rect x="48.0143%" y="341" width="0.3576%" height="15" fill="rgb(230,182,32)" fg:x="55456" fg:w="413"/><text x="48.2643%" y="351.50"></text></g><g><title>dfbench`arrow_buffer::buffer::scalar::ScalarBuffer&lt;T&gt;::new (16 samples, 0.01%)</title><rect x="48.9338%" y="293" width="0.0139%" height="15" fill="rgb(242,56,43)" fg:x="56518" fg:w="16"/><text x="49.1838%" y="303.50"></text></g><g><title>dfbench`&lt;arrow_array::array::primitive_array::PrimitiveArray&lt;T&gt; as core::convert::From&lt;arrow_data::data::ArrayData&gt;&gt;::from (19 samples, 0.02%)</title><rect x="48.9329%" y="309" width="0.0165%" height="15" fill="rgb(233,99,24)" fg:x="56517" fg:w="19"/><text x="49.1829%" y="319.50"></text></g><g><title>dfbench`&lt;arrow_array::array::primitive_array::PrimitiveArray&lt;arrow_array::types::UInt32Type&gt; as core::convert::From&lt;alloc::vec::Vec&lt;&lt;arrow_array::types::UInt32Type as arrow_array::types::ArrowPrimitiveType&gt;::Native&gt;&gt;&gt;::from (51 samples, 0.04%)</title><rect x="48.9242%" y="325" width="0.0442%" height="15" fill="rgb(234,209,42)" fg:x="56507" fg:w="51"/><text x="49.1742%" y="335.50"></text></g><g><title>dfbench`arrow_array::record_batch::RecordBatch::try_new_impl (15 samples, 0.01%)</title><rect x="48.9701%" y="325" width="0.0130%" height="15" fill="rgb(227,7,12)" fg:x="56560" fg:w="15"/><text x="49.2201%" y="335.50"></text></g><g><title>dfbench`alloc::alloc::exchange_malloc (15 samples, 0.01%)</title><rect x="49.2325%" y="277" width="0.0130%" height="15" fill="rgb(245,203,43)" fg:x="56863" fg:w="15"/><text x="49.4825%" y="287.50"></text></g><g><title>dfbench`mi_page_free_list_extend (34 samples, 0.03%)</title><rect x="49.8818%" y="197" width="0.0294%" height="15" fill="rgb(238,205,33)" fg:x="57613" fg:w="34"/><text x="50.1318%" y="207.50"></text></g><g><title>dfbench`mi_find_page (83 samples, 0.07%)</title><rect x="49.8489%" y="213" width="0.0719%" height="15" fill="rgb(231,56,7)" fg:x="57575" fg:w="83"/><text x="50.0989%" y="223.50"></text></g><g><title>dfbench`_mi_malloc_generic (104 samples, 0.09%)</title><rect x="49.8359%" y="229" width="0.0900%" height="15" fill="rgb(244,186,29)" fg:x="57560" fg:w="104"/><text x="50.0859%" y="239.50"></text></g><g><title>dfbench`mi_heap_malloc_zero_aligned_at_generic (109 samples, 0.09%)</title><rect x="49.8342%" y="245" width="0.0944%" height="15" fill="rgb(234,111,31)" fg:x="57558" fg:w="109"/><text x="50.0842%" y="255.50"></text></g><g><title>dfbench`arrow_select::take::take_native (670 samples, 0.58%)</title><rect x="49.3519%" y="261" width="0.5801%" height="15" fill="rgb(241,149,10)" fg:x="57001" fg:w="670"/><text x="49.6019%" y="271.50"></text></g><g><title>dfbench`arrow_select::take::take_byte_view (801 samples, 0.69%)</title><rect x="49.2515%" y="277" width="0.6935%" height="15" fill="rgb(249,206,44)" fg:x="56885" fg:w="801"/><text x="49.5015%" y="287.50"></text></g><g><title>dfbench`_mi_free_delayed_block (16 samples, 0.01%)</title><rect x="50.3069%" y="229" width="0.0139%" height="15" fill="rgb(251,153,30)" fg:x="58104" fg:w="16"/><text x="50.5569%" y="239.50"></text></g><g><title>dfbench`mi_find_page (32 samples, 0.03%)</title><rect x="50.3208%" y="229" width="0.0277%" height="15" fill="rgb(239,152,38)" fg:x="58120" fg:w="32"/><text x="50.5708%" y="239.50"></text></g><g><title>dfbench`_mi_malloc_generic (61 samples, 0.05%)</title><rect x="50.3052%" y="245" width="0.0528%" height="15" fill="rgb(249,139,47)" fg:x="58102" fg:w="61"/><text x="50.5552%" y="255.50"></text></g><g><title>dfbench`mi_heap_malloc_zero_aligned_at_generic (65 samples, 0.06%)</title><rect x="50.3052%" y="261" width="0.0563%" height="15" fill="rgb(244,64,35)" fg:x="58102" fg:w="65"/><text x="50.5552%" y="271.50"></text></g><g><title>dfbench`arrow_select::take::take_native (486 samples, 0.42%)</title><rect x="49.9450%" y="277" width="0.4208%" height="15" fill="rgb(216,46,15)" fg:x="57686" fg:w="486"/><text x="50.1950%" y="287.50"></text></g><g><title>dfbench`mi_segment_free (12 samples, 0.01%)</title><rect x="51.3043%" y="197" width="0.0104%" height="15" fill="rgb(250,74,19)" fg:x="59256" fg:w="12"/><text x="51.5543%" y="207.50"></text></g><g><title>dfbench`mi_arenas_try_purge (12 samples, 0.01%)</title><rect x="51.3043%" y="181" width="0.0104%" height="15" fill="rgb(249,42,33)" fg:x="59256" fg:w="12"/><text x="51.5543%" y="191.50"></text></g><g><title>dfbench`mi_arena_purge (12 samples, 0.01%)</title><rect x="51.3043%" y="165" width="0.0104%" height="15" fill="rgb(242,149,17)" fg:x="59256" fg:w="12"/><text x="51.5543%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`madvise (12 samples, 0.01%)</title><rect x="51.3043%" y="149" width="0.0104%" height="15" fill="rgb(244,29,21)" fg:x="59256" fg:w="12"/><text x="51.5543%" y="159.50"></text></g><g><title>dfbench`_mi_free_delayed_block (73 samples, 0.06%)</title><rect x="51.2533%" y="213" width="0.0632%" height="15" fill="rgb(220,130,37)" fg:x="59197" fg:w="73"/><text x="51.5033%" y="223.50"></text></g><g><title>dfbench`_mi_page_free (12 samples, 0.01%)</title><rect x="51.3450%" y="197" width="0.0104%" height="15" fill="rgb(211,67,2)" fg:x="59303" fg:w="12"/><text x="51.5950%" y="207.50"></text></g><g><title>dfbench`mi_segment_page_clear (12 samples, 0.01%)</title><rect x="51.3450%" y="181" width="0.0104%" height="15" fill="rgb(235,68,52)" fg:x="59303" fg:w="12"/><text x="51.5950%" y="191.50"></text></g><g><title>dfbench`mi_segment_span_free_coalesce (12 samples, 0.01%)</title><rect x="51.3450%" y="165" width="0.0104%" height="15" fill="rgb(246,142,3)" fg:x="59303" fg:w="12"/><text x="51.5950%" y="175.50"></text></g><g><title>dfbench`mi_segment_span_free (12 samples, 0.01%)</title><rect x="51.3450%" y="149" width="0.0104%" height="15" fill="rgb(241,25,7)" fg:x="59303" fg:w="12"/><text x="51.5950%" y="159.50"></text></g><g><title>dfbench`mi_page_free_list_extend (23 samples, 0.02%)</title><rect x="51.3554%" y="197" width="0.0199%" height="15" fill="rgb(242,119,39)" fg:x="59315" fg:w="23"/><text x="51.6054%" y="207.50"></text></g><g><title>dfbench`mi_find_page (71 samples, 0.06%)</title><rect x="51.3251%" y="213" width="0.0615%" height="15" fill="rgb(241,98,45)" fg:x="59280" fg:w="71"/><text x="51.5751%" y="223.50"></text></g><g><title>dfbench`mi_page_fresh_alloc (13 samples, 0.01%)</title><rect x="51.3753%" y="197" width="0.0113%" height="15" fill="rgb(254,28,30)" fg:x="59338" fg:w="13"/><text x="51.6253%" y="207.50"></text></g><g><title>dfbench`mi_segments_page_alloc (13 samples, 0.01%)</title><rect x="51.3753%" y="181" width="0.0113%" height="15" fill="rgb(241,142,54)" fg:x="59338" fg:w="13"/><text x="51.6253%" y="191.50"></text></g><g><title>dfbench`mi_page_free_list_extend (19 samples, 0.02%)</title><rect x="51.3866%" y="213" width="0.0165%" height="15" fill="rgb(222,85,15)" fg:x="59351" fg:w="19"/><text x="51.6366%" y="223.50"></text></g><g><title>dfbench`_mi_malloc_generic (190 samples, 0.16%)</title><rect x="51.2394%" y="229" width="0.1645%" height="15" fill="rgb(210,85,47)" fg:x="59181" fg:w="190"/><text x="51.4894%" y="239.50"></text></g><g><title>dfbench`mi_heap_malloc_zero_aligned_at_generic (194 samples, 0.17%)</title><rect x="51.2394%" y="245" width="0.1680%" height="15" fill="rgb(224,206,25)" fg:x="59181" fg:w="194"/><text x="51.4894%" y="255.50"></text></g><g><title>dfbench`arrow_select::take::take_native (1,182 samples, 1.02%)</title><rect x="50.3900%" y="261" width="1.0234%" height="15" fill="rgb(243,201,19)" fg:x="58200" fg:w="1182"/><text x="50.6400%" y="271.50"></text></g><g><title>dfbench`arrow_select::take::take_primitive (1,210 samples, 1.05%)</title><rect x="50.3684%" y="277" width="1.0476%" height="15" fill="rgb(236,59,4)" fg:x="58175" fg:w="1210"/><text x="50.6184%" y="287.50"></text></g><g><title>dfbench`arrow_select::take::take_impl (2,725 samples, 2.36%)</title><rect x="49.0662%" y="293" width="2.3593%" height="15" fill="rgb(254,179,45)" fg:x="56671" fg:w="2725"/><text x="49.3162%" y="303.50">d..</text></g><g><title>dfbench`core::ptr::drop_in_place&lt;arrow_array::array::primitive_array::PrimitiveArray&lt;arrow_array::types::Int8Type&gt;&gt; (14 samples, 0.01%)</title><rect x="51.4256%" y="293" width="0.0121%" height="15" fill="rgb(226,14,10)" fg:x="59396" fg:w="14"/><text x="51.6756%" y="303.50"></text></g><g><title>dfbench`arrow_select::take::take (2,787 samples, 2.41%)</title><rect x="49.0255%" y="309" width="2.4130%" height="15" fill="rgb(244,27,41)" fg:x="56624" fg:w="2787"/><text x="49.2755%" y="319.50">df..</text></g><g><title>dfbench`arrow_select::take::take_arrays (2,841 samples, 2.46%)</title><rect x="48.9866%" y="325" width="2.4598%" height="15" fill="rgb(235,35,32)" fg:x="56579" fg:w="2841"/><text x="49.2366%" y="335.50">df..</text></g><g><title>libsystem_c.dylib`clock_gettime_nsec_np (13 samples, 0.01%)</title><rect x="51.4602%" y="293" width="0.0113%" height="15" fill="rgb(218,68,31)" fg:x="59436" fg:w="13"/><text x="51.7102%" y="303.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (17 samples, 0.01%)</title><rect x="51.4714%" y="293" width="0.0147%" height="15" fill="rgb(207,120,37)" fg:x="59449" fg:w="17"/><text x="51.7214%" y="303.50"></text></g><g><title>dfbench`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (2,987 samples, 2.59%)</title><rect x="48.9147%" y="341" width="2.5862%" height="15" fill="rgb(227,98,0)" fg:x="56496" fg:w="2987"/><text x="49.1647%" y="351.50">df..</text></g><g><title>dfbench`std::sys::pal::unix::time::Timespec::now (53 samples, 0.05%)</title><rect x="51.4550%" y="325" width="0.0459%" height="15" fill="rgb(207,7,3)" fg:x="59430" fg:w="53"/><text x="51.7050%" y="335.50"></text></g><g><title>libsystem_c.dylib`clock_gettime (53 samples, 0.05%)</title><rect x="51.4550%" y="309" width="0.0459%" height="15" fill="rgb(206,98,19)" fg:x="59430" fg:w="53"/><text x="51.7050%" y="319.50"></text></g><g><title>libsystem_kernel.dylib`mach_timebase_info (17 samples, 0.01%)</title><rect x="51.4862%" y="293" width="0.0147%" height="15" fill="rgb(217,5,26)" fg:x="59466" fg:w="17"/><text x="51.7362%" y="303.50"></text></g><g><title>dfbench`_mi_page_free (16 samples, 0.01%)</title><rect x="51.5017%" y="229" width="0.0139%" height="15" fill="rgb(235,190,38)" fg:x="59484" fg:w="16"/><text x="51.7517%" y="239.50"></text></g><g><title>dfbench`mi_segment_page_clear (16 samples, 0.01%)</title><rect x="51.5017%" y="213" width="0.0139%" height="15" fill="rgb(247,86,24)" fg:x="59484" fg:w="16"/><text x="51.7517%" y="223.50"></text></g><g><title>dfbench`mi_segment_span_free_coalesce (16 samples, 0.01%)</title><rect x="51.5017%" y="197" width="0.0139%" height="15" fill="rgb(205,101,16)" fg:x="59484" fg:w="16"/><text x="51.7517%" y="207.50"></text></g><g><title>dfbench`mi_segment_span_free (16 samples, 0.01%)</title><rect x="51.5017%" y="181" width="0.0139%" height="15" fill="rgb(246,168,33)" fg:x="59484" fg:w="16"/><text x="51.7517%" y="191.50"></text></g><g><title>dfbench`mi_segment_try_purge (16 samples, 0.01%)</title><rect x="51.5017%" y="165" width="0.0139%" height="15" fill="rgb(231,114,1)" fg:x="59484" fg:w="16"/><text x="51.7517%" y="175.50"></text></g><g><title>dfbench`mi_segment_purge (16 samples, 0.01%)</title><rect x="51.5017%" y="149" width="0.0139%" height="15" fill="rgb(207,184,53)" fg:x="59484" fg:w="16"/><text x="51.7517%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`madvise (16 samples, 0.01%)</title><rect x="51.5017%" y="133" width="0.0139%" height="15" fill="rgb(224,95,51)" fg:x="59484" fg:w="16"/><text x="51.7517%" y="143.50"></text></g><g><title>dfbench`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (36 samples, 0.03%)</title><rect x="51.5017%" y="293" width="0.0312%" height="15" fill="rgb(212,188,45)" fg:x="59484" fg:w="36"/><text x="51.7517%" y="303.50"></text></g><g><title>dfbench`mi_heap_malloc_zero_aligned_at_generic (36 samples, 0.03%)</title><rect x="51.5017%" y="277" width="0.0312%" height="15" fill="rgb(223,154,38)" fg:x="59484" fg:w="36"/><text x="51.7517%" y="287.50"></text></g><g><title>dfbench`_mi_malloc_generic (36 samples, 0.03%)</title><rect x="51.5017%" y="261" width="0.0312%" height="15" fill="rgb(251,22,52)" fg:x="59484" fg:w="36"/><text x="51.7517%" y="271.50"></text></g><g><title>dfbench`_mi_free_delayed_block (36 samples, 0.03%)</title><rect x="51.5017%" y="245" width="0.0312%" height="15" fill="rgb(229,209,22)" fg:x="59484" fg:w="36"/><text x="51.7517%" y="255.50"></text></g><g><title>dfbench`mi_segment_free (20 samples, 0.02%)</title><rect x="51.5156%" y="229" width="0.0173%" height="15" fill="rgb(234,138,34)" fg:x="59500" fg:w="20"/><text x="51.7656%" y="239.50"></text></g><g><title>dfbench`mi_arenas_try_purge (20 samples, 0.02%)</title><rect x="51.5156%" y="213" width="0.0173%" height="15" fill="rgb(212,95,11)" fg:x="59500" fg:w="20"/><text x="51.7656%" y="223.50"></text></g><g><title>dfbench`mi_arena_purge (20 samples, 0.02%)</title><rect x="51.5156%" y="197" width="0.0173%" height="15" fill="rgb(240,179,47)" fg:x="59500" fg:w="20"/><text x="51.7656%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`madvise (20 samples, 0.02%)</title><rect x="51.5156%" y="181" width="0.0173%" height="15" fill="rgb(240,163,11)" fg:x="59500" fg:w="20"/><text x="51.7656%" y="191.50"></text></g><g><title>dfbench`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (43 samples, 0.04%)</title><rect x="51.5017%" y="309" width="0.0372%" height="15" fill="rgb(236,37,12)" fg:x="59484" fg:w="43"/><text x="51.7517%" y="319.50"></text></g><g><title>dfbench`&lt;datafusion::datasource::physical_plan::parquet::ParquetExec as datafusion_physical_plan::execution_plan::ExecutionPlan&gt;::execute (44 samples, 0.04%)</title><rect x="51.5017%" y="325" width="0.0381%" height="15" fill="rgb(232,164,16)" fg:x="59484" fg:w="44"/><text x="51.7517%" y="335.50"></text></g><g><title>dfbench`&lt;datafusion_physical_plan::aggregates::AggregateExec as datafusion_physical_plan::execution_plan::ExecutionPlan&gt;::execute (52 samples, 0.05%)</title><rect x="51.5017%" y="341" width="0.0450%" height="15" fill="rgb(244,205,15)" fg:x="59484" fg:w="52"/><text x="51.7517%" y="351.50"></text></g><g><title>dfbench`mi_free (12 samples, 0.01%)</title><rect x="51.5606%" y="277" width="0.0104%" height="15" fill="rgb(223,117,47)" fg:x="59552" fg:w="12"/><text x="51.8106%" y="287.50"></text></g><g><title>dfbench`mi_heap_malloc_zero_aligned_at_generic (15 samples, 0.01%)</title><rect x="51.8515%" y="197" width="0.0130%" height="15" fill="rgb(244,107,35)" fg:x="59888" fg:w="15"/><text x="52.1015%" y="207.50"></text></g><g><title>dfbench`_mi_malloc_generic (15 samples, 0.01%)</title><rect x="51.8515%" y="181" width="0.0130%" height="15" fill="rgb(205,140,8)" fg:x="59888" fg:w="15"/><text x="52.1015%" y="191.50"></text></g><g><title>dfbench`&lt;parquet::thrift::TCompactSliceInputProtocol as thrift::protocol::TInputProtocol&gt;::read_bytes (31 samples, 0.03%)</title><rect x="51.8455%" y="213" width="0.0268%" height="15" fill="rgb(228,84,46)" fg:x="59881" fg:w="31"/><text x="52.0955%" y="223.50"></text></g><g><title>dfbench`&lt;parquet::thrift::TCompactSliceInputProtocol as thrift::protocol::TInputProtocol&gt;::read_field_begin (18 samples, 0.02%)</title><rect x="51.8723%" y="213" width="0.0156%" height="15" fill="rgb(254,188,9)" fg:x="59912" fg:w="18"/><text x="52.1223%" y="223.50"></text></g><g><title>dfbench`&lt;parquet::format::Statistics as parquet::thrift::TSerializable&gt;::read_from_in_protocol (100 samples, 0.09%)</title><rect x="51.8204%" y="229" width="0.0866%" height="15" fill="rgb(206,112,54)" fg:x="59852" fg:w="100"/><text x="52.0704%" y="239.50"></text></g><g><title>dfbench`&lt;parquet::thrift::TCompactSliceInputProtocol as thrift::protocol::TInputProtocol&gt;::read_bytes (21 samples, 0.02%)</title><rect x="51.9069%" y="229" width="0.0182%" height="15" fill="rgb(216,84,49)" fg:x="59952" fg:w="21"/><text x="52.1569%" y="239.50"></text></g><g><title>dfbench`&lt;parquet::thrift::TCompactSliceInputProtocol as thrift::protocol::TInputProtocol&gt;::read_field_begin (75 samples, 0.06%)</title><rect x="51.9251%" y="229" width="0.0649%" height="15" fill="rgb(214,194,35)" fg:x="59973" fg:w="75"/><text x="52.1751%" y="239.50"></text></g><g><title>dfbench`mi_find_page (22 samples, 0.02%)</title><rect x="52.0091%" y="197" width="0.0190%" height="15" fill="rgb(249,28,3)" fg:x="60070" fg:w="22"/><text x="52.2591%" y="207.50"></text></g><g><title>dfbench`mi_heap_malloc_zero_aligned_at_generic (36 samples, 0.03%)</title><rect x="52.0074%" y="229" width="0.0312%" height="15" fill="rgb(222,56,52)" fg:x="60068" fg:w="36"/><text x="52.2574%" y="239.50"></text></g><g><title>dfbench`_mi_malloc_generic (36 samples, 0.03%)</title><rect x="52.0074%" y="213" width="0.0312%" height="15" fill="rgb(245,217,50)" fg:x="60068" fg:w="36"/><text x="52.2574%" y="223.50"></text></g><g><title>dfbench`mi_page_free_list_extend (12 samples, 0.01%)</title><rect x="52.0282%" y="197" width="0.0104%" height="15" fill="rgb(213,201,24)" fg:x="60092" fg:w="12"/><text x="52.2782%" y="207.50"></text></g><g><title>dfbench`thrift::protocol::compact::u8_to_type (47 samples, 0.04%)</title><rect x="52.0481%" y="229" width="0.0407%" height="15" fill="rgb(248,116,28)" fg:x="60115" fg:w="47"/><text x="52.2981%" y="239.50"></text></g><g><title>dfbench`&lt;parquet::format::ColumnChunk as parquet::thrift::TSerializable&gt;::read_from_in_protocol (527 samples, 0.46%)</title><rect x="51.6489%" y="245" width="0.4563%" height="15" fill="rgb(219,72,43)" fg:x="59654" fg:w="527"/><text x="51.8989%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (14 samples, 0.01%)</title><rect x="52.0931%" y="229" width="0.0121%" height="15" fill="rgb(209,138,14)" fg:x="60167" fg:w="14"/><text x="52.3431%" y="239.50"></text></g><g><title>dfbench`&lt;parquet::thrift::TCompactSliceInputProtocol as thrift::protocol::TInputProtocol&gt;::read_field_begin (18 samples, 0.02%)</title><rect x="52.1069%" y="245" width="0.0156%" height="15" fill="rgb(222,18,33)" fg:x="60183" fg:w="18"/><text x="52.3569%" y="255.50"></text></g><g><title>dfbench`mi_page_free_list_extend (13 samples, 0.01%)</title><rect x="52.1329%" y="197" width="0.0113%" height="15" fill="rgb(213,199,7)" fg:x="60213" fg:w="13"/><text x="52.3829%" y="207.50"></text></g><g><title>dfbench`mi_find_page (25 samples, 0.02%)</title><rect x="52.1260%" y="213" width="0.0216%" height="15" fill="rgb(250,110,10)" fg:x="60205" fg:w="25"/><text x="52.3760%" y="223.50"></text></g><g><title>dfbench`mi_heap_malloc_zero_aligned_at_generic (36 samples, 0.03%)</title><rect x="52.1260%" y="245" width="0.0312%" height="15" fill="rgb(248,123,6)" fg:x="60205" fg:w="36"/><text x="52.3760%" y="255.50"></text></g><g><title>dfbench`_mi_malloc_generic (36 samples, 0.03%)</title><rect x="52.1260%" y="229" width="0.0312%" height="15" fill="rgb(206,91,31)" fg:x="60205" fg:w="36"/><text x="52.3760%" y="239.50"></text></g><g><title>dfbench`&lt;parquet::format::FileMetaData as parquet::thrift::TSerializable&gt;::read_from_in_protocol (601 samples, 0.52%)</title><rect x="51.6437%" y="261" width="0.5204%" height="15" fill="rgb(211,154,13)" fg:x="59648" fg:w="601"/><text x="51.8937%" y="271.50"></text></g><g><title>dfbench`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (24 samples, 0.02%)</title><rect x="52.1650%" y="261" width="0.0208%" height="15" fill="rgb(225,148,7)" fg:x="60250" fg:w="24"/><text x="52.4150%" y="271.50"></text></g><g><title>dfbench`alloc::raw_vec::finish_grow (24 samples, 0.02%)</title><rect x="52.1650%" y="245" width="0.0208%" height="15" fill="rgb(220,160,43)" fg:x="60250" fg:w="24"/><text x="52.4150%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (24 samples, 0.02%)</title><rect x="52.1650%" y="229" width="0.0208%" height="15" fill="rgb(213,52,39)" fg:x="60250" fg:w="24"/><text x="52.4150%" y="239.50"></text></g><g><title>dfbench`parquet::file::statistics::from_thrift (34 samples, 0.03%)</title><rect x="52.1953%" y="261" width="0.0294%" height="15" fill="rgb(243,137,7)" fg:x="60285" fg:w="34"/><text x="52.4453%" y="271.50"></text></g><g><title>dfbench`parquet::file::metadata::reader::ParquetMetaDataReader::decode_metadata (818 samples, 0.71%)</title><rect x="51.5710%" y="277" width="0.7082%" height="15" fill="rgb(230,79,13)" fg:x="59564" fg:w="818"/><text x="51.8210%" y="287.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (60 samples, 0.05%)</title><rect x="52.2273%" y="261" width="0.0519%" height="15" fill="rgb(247,105,23)" fg:x="60322" fg:w="60"/><text x="52.4773%" y="271.50"></text></g><g><title>dfbench`&lt;parquet::arrow::async_reader::store::ParquetObjectReader as parquet::arrow::async_reader::AsyncFileReader&gt;::get_metadata::_{{closure}} (905 samples, 0.78%)</title><rect x="51.5580%" y="293" width="0.7836%" height="15" fill="rgb(223,179,41)" fg:x="59549" fg:w="905"/><text x="51.8080%" y="303.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (68 samples, 0.06%)</title><rect x="52.2827%" y="277" width="0.0589%" height="15" fill="rgb(218,9,34)" fg:x="60386" fg:w="68"/><text x="52.5327%" y="287.50"></text></g><g><title>dfbench`&lt;datafusion::datasource::physical_plan::parquet::opener::ParquetOpener as datafusion::datasource::physical_plan::file_stream::FileOpener&gt;::open::_{{closure}} (910 samples, 0.79%)</title><rect x="51.5572%" y="309" width="0.7879%" height="15" fill="rgb(222,106,8)" fg:x="59548" fg:w="910"/><text x="51.8072%" y="319.50"></text></g><g><title>dfbench`&lt;arrow_array::array::byte_view_array::GenericByteViewArray&lt;T&gt; as arrow_array::array::Array&gt;::to_data (12 samples, 0.01%)</title><rect x="52.3684%" y="245" width="0.0104%" height="15" fill="rgb(211,220,0)" fg:x="60485" fg:w="12"/><text x="52.6184%" y="255.50"></text></g><g><title>dfbench`&lt;arrow_array::array::primitive_array::PrimitiveArray&lt;T&gt; as arrow_array::array::Array&gt;::to_data (12 samples, 0.01%)</title><rect x="52.3788%" y="245" width="0.0104%" height="15" fill="rgb(229,52,16)" fg:x="60497" fg:w="12"/><text x="52.6288%" y="255.50"></text></g><g><title>dfbench`&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::next (51 samples, 0.04%)</title><rect x="52.3537%" y="277" width="0.0442%" height="15" fill="rgb(212,155,18)" fg:x="60468" fg:w="51"/><text x="52.6037%" y="287.50"></text></g><g><title>dfbench`arrow_cast::cast::cast_with_options (35 samples, 0.03%)</title><rect x="52.3676%" y="261" width="0.0303%" height="15" fill="rgb(242,21,14)" fg:x="60484" fg:w="35"/><text x="52.6176%" y="271.50"></text></g><g><title>dfbench`&lt;datafusion::datasource::schema_adapter::SchemaMapping as datafusion::datasource::schema_adapter::SchemaMapper&gt;::map_batch (63 samples, 0.05%)</title><rect x="52.3511%" y="293" width="0.0545%" height="15" fill="rgb(222,19,48)" fg:x="60465" fg:w="63"/><text x="52.6011%" y="303.50"></text></g><g><title>dfbench`&lt;arrow_array::array::byte_view_array::GenericByteViewArray&lt;T&gt; as arrow_array::array::Array&gt;::to_data (12 samples, 0.01%)</title><rect x="52.4230%" y="261" width="0.0104%" height="15" fill="rgb(232,45,27)" fg:x="60548" fg:w="12"/><text x="52.6730%" y="271.50"></text></g><g><title>dfbench`arrow_array::array::primitive_array::_&lt;impl core::convert::From&lt;arrow_array::array::primitive_array::PrimitiveArray&lt;T&gt;&gt; for arrow_data::data::ArrayData&gt;::from (12 samples, 0.01%)</title><rect x="52.4351%" y="245" width="0.0104%" height="15" fill="rgb(249,103,42)" fg:x="60562" fg:w="12"/><text x="52.6851%" y="255.50"></text></g><g><title>dfbench`&lt;arrow_array::array::primitive_array::PrimitiveArray&lt;T&gt; as arrow_array::array::Array&gt;::to_data (15 samples, 0.01%)</title><rect x="52.4334%" y="261" width="0.0130%" height="15" fill="rgb(246,81,33)" fg:x="60560" fg:w="15"/><text x="52.6834%" y="271.50"></text></g><g><title>dfbench`arrow_array::array::make_array (31 samples, 0.03%)</title><rect x="52.4498%" y="245" width="0.0268%" height="15" fill="rgb(252,33,42)" fg:x="60579" fg:w="31"/><text x="52.6998%" y="255.50"></text></g><g><title>dfbench`&lt;arrow_array::array::struct_array::StructArray as core::convert::From&lt;arrow_data::data::ArrayData&gt;&gt;::from (36 samples, 0.03%)</title><rect x="52.4463%" y="261" width="0.0312%" height="15" fill="rgb(209,212,41)" fg:x="60575" fg:w="36"/><text x="52.6963%" y="271.50"></text></g><g><title>dfbench`&lt;parquet::arrow::array_reader::byte_view_array::ByteViewArrayReader as parquet::arrow::array_reader::ArrayReader&gt;::consume_batch (17 samples, 0.01%)</title><rect x="52.4784%" y="261" width="0.0147%" height="15" fill="rgb(207,154,6)" fg:x="60612" fg:w="17"/><text x="52.7284%" y="271.50"></text></g><g><title>dfbench`arrow_array::array::primitive_array::_&lt;impl core::convert::From&lt;arrow_array::array::primitive_array::PrimitiveArray&lt;T&gt;&gt; for arrow_data::data::ArrayData&gt;::from (26 samples, 0.02%)</title><rect x="52.5121%" y="213" width="0.0225%" height="15" fill="rgb(223,64,47)" fg:x="60651" fg:w="26"/><text x="52.7621%" y="223.50"></text></g><g><title>dfbench`&lt;arrow_array::array::primitive_array::PrimitiveArray&lt;T&gt; as arrow_array::array::Array&gt;::to_data (27 samples, 0.02%)</title><rect x="52.5121%" y="229" width="0.0234%" height="15" fill="rgb(211,161,38)" fg:x="60651" fg:w="27"/><text x="52.7621%" y="239.50"></text></g><g><title>dfbench`arrow_cast::cast::cast_with_options (31 samples, 0.03%)</title><rect x="52.5121%" y="245" width="0.0268%" height="15" fill="rgb(219,138,40)" fg:x="60651" fg:w="31"/><text x="52.7621%" y="255.50"></text></g><g><title>dfbench`arrow_data::data::ArrayDataBuilder::build_impl (12 samples, 0.01%)</title><rect x="52.5390%" y="245" width="0.0104%" height="15" fill="rgb(241,228,46)" fg:x="60682" fg:w="12"/><text x="52.7890%" y="255.50"></text></g><g><title>dfbench`&lt;parquet::arrow::array_reader::primitive_array::PrimitiveArrayReader&lt;T&gt; as parquet::arrow::array_reader::ArrayReader&gt;::consume_batch (70 samples, 0.06%)</title><rect x="52.4931%" y="261" width="0.0606%" height="15" fill="rgb(223,209,38)" fg:x="60629" fg:w="70"/><text x="52.7431%" y="271.50"></text></g><g><title>dfbench`&lt;parquet::arrow::array_reader::struct_array::StructArrayReader as parquet::arrow::array_reader::ArrayReader&gt;::consume_batch (184 samples, 0.16%)</title><rect x="52.4169%" y="277" width="0.1593%" height="15" fill="rgb(236,164,45)" fg:x="60541" fg:w="184"/><text x="52.6669%" y="287.50"></text></g><g><title>dfbench`mi_heap_realloc_zero_aligned_at (25 samples, 0.02%)</title><rect x="53.3130%" y="213" width="0.0216%" height="15" fill="rgb(231,15,5)" fg:x="61576" fg:w="25"/><text x="53.5630%" y="223.50"></text></g><g><title>dfbench`mi_heap_malloc_zero_aligned_at_generic (12 samples, 0.01%)</title><rect x="53.3243%" y="197" width="0.0104%" height="15" fill="rgb(252,35,15)" fg:x="61589" fg:w="12"/><text x="53.5743%" y="207.50"></text></g><g><title>dfbench`_mi_malloc_generic (12 samples, 0.01%)</title><rect x="53.3243%" y="181" width="0.0104%" height="15" fill="rgb(248,181,18)" fg:x="61589" fg:w="12"/><text x="53.5743%" y="191.50"></text></g><g><title>dfbench`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (236 samples, 0.20%)</title><rect x="53.3052%" y="245" width="0.2043%" height="15" fill="rgb(233,39,42)" fg:x="61567" fg:w="236"/><text x="53.5552%" y="255.50"></text></g><g><title>dfbench`alloc::raw_vec::finish_grow (229 samples, 0.20%)</title><rect x="53.3113%" y="229" width="0.1983%" height="15" fill="rgb(238,110,33)" fg:x="61574" fg:w="229"/><text x="53.5613%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (200 samples, 0.17%)</title><rect x="53.3364%" y="213" width="0.1732%" height="15" fill="rgb(233,195,10)" fg:x="61603" fg:w="200"/><text x="53.5864%" y="223.50"></text></g><g><title>dfbench`arrow_array::builder::generic_bytes_view_builder::make_view (419 samples, 0.36%)</title><rect x="53.5104%" y="245" width="0.3628%" height="15" fill="rgb(254,105,3)" fg:x="61804" fg:w="419"/><text x="53.7604%" y="255.50"></text></g><g><title>dfbench`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (23 samples, 0.02%)</title><rect x="54.1580%" y="229" width="0.0199%" height="15" fill="rgb(221,225,9)" fg:x="62552" fg:w="23"/><text x="54.4080%" y="239.50"></text></g><g><title>dfbench`alloc::raw_vec::finish_grow (23 samples, 0.02%)</title><rect x="54.1580%" y="213" width="0.0199%" height="15" fill="rgb(224,227,45)" fg:x="62552" fg:w="23"/><text x="54.4080%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (14 samples, 0.01%)</title><rect x="54.1658%" y="197" width="0.0121%" height="15" fill="rgb(229,198,43)" fg:x="62561" fg:w="14"/><text x="54.4158%" y="207.50"></text></g><g><title>dfbench`parquet::arrow::array_reader::byte_view_array::ByteViewArrayDecoderPlain::read (3,676 samples, 3.18%)</title><rect x="53.8741%" y="245" width="3.1827%" height="15" fill="rgb(206,209,35)" fg:x="62224" fg:w="3676"/><text x="54.1241%" y="255.50">dfb..</text></g><g><title>dfbench`core::str::converts::from_utf8 (3,325 samples, 2.88%)</title><rect x="54.1780%" y="229" width="2.8788%" height="15" fill="rgb(245,195,53)" fg:x="62575" fg:w="3325"/><text x="54.4280%" y="239.50">df..</text></g><g><title>dfbench`&lt;parquet::arrow::array_reader::byte_view_array::ByteViewArrayColumnValueDecoder as parquet::column::reader::decoder::ColumnValueDecoder&gt;::set_data (18 samples, 0.02%)</title><rect x="57.0568%" y="229" width="0.0156%" height="15" fill="rgb(240,92,26)" fg:x="65900" fg:w="18"/><text x="57.3068%" y="239.50"></text></g><g><title>dfbench`arrow_array::builder::generic_bytes_view_builder::make_view (21 samples, 0.02%)</title><rect x="57.0724%" y="213" width="0.0182%" height="15" fill="rgb(207,40,23)" fg:x="65918" fg:w="21"/><text x="57.3224%" y="223.50"></text></g><g><title>dfbench`_mi_free_delayed_block (17 samples, 0.01%)</title><rect x="57.1416%" y="133" width="0.0147%" height="15" fill="rgb(223,111,35)" fg:x="65998" fg:w="17"/><text x="57.3916%" y="143.50"></text></g><g><title>dfbench`mi_segment_free (14 samples, 0.01%)</title><rect x="57.1442%" y="117" width="0.0121%" height="15" fill="rgb(229,147,28)" fg:x="66001" fg:w="14"/><text x="57.3942%" y="127.50"></text></g><g><title>dfbench`mi_arenas_try_purge (14 samples, 0.01%)</title><rect x="57.1442%" y="101" width="0.0121%" height="15" fill="rgb(211,29,28)" fg:x="66001" fg:w="14"/><text x="57.3942%" y="111.50"></text></g><g><title>dfbench`mi_arena_purge (14 samples, 0.01%)</title><rect x="57.1442%" y="85" width="0.0121%" height="15" fill="rgb(228,72,33)" fg:x="66001" fg:w="14"/><text x="57.3942%" y="95.50"></text></g><g><title>libsystem_kernel.dylib`madvise (14 samples, 0.01%)</title><rect x="57.1442%" y="69" width="0.0121%" height="15" fill="rgb(205,214,31)" fg:x="66001" fg:w="14"/><text x="57.3942%" y="79.50"></text></g><g><title>dfbench`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (18 samples, 0.02%)</title><rect x="57.1416%" y="197" width="0.0156%" height="15" fill="rgb(224,111,15)" fg:x="65998" fg:w="18"/><text x="57.3916%" y="207.50"></text></g><g><title>dfbench`alloc::raw_vec::finish_grow (18 samples, 0.02%)</title><rect x="57.1416%" y="181" width="0.0156%" height="15" fill="rgb(253,21,26)" fg:x="65998" fg:w="18"/><text x="57.3916%" y="191.50"></text></g><g><title>dfbench`mi_heap_malloc_zero_aligned_at_generic (18 samples, 0.02%)</title><rect x="57.1416%" y="165" width="0.0156%" height="15" fill="rgb(245,139,43)" fg:x="65998" fg:w="18"/><text x="57.3916%" y="175.50"></text></g><g><title>dfbench`_mi_malloc_generic (18 samples, 0.02%)</title><rect x="57.1416%" y="149" width="0.0156%" height="15" fill="rgb(252,170,7)" fg:x="65998" fg:w="18"/><text x="57.3916%" y="159.50"></text></g><g><title>dfbench`&lt;parquet::arrow::array_reader::byte_view_array::ByteViewArrayColumnValueDecoder as parquet::column::reader::decoder::ColumnValueDecoder&gt;::set_dict (1,342 samples, 1.16%)</title><rect x="57.0724%" y="229" width="1.1619%" height="15" fill="rgb(231,118,14)" fg:x="65918" fg:w="1342"/><text x="57.3224%" y="239.50"></text></g><g><title>dfbench`parquet::arrow::array_reader::byte_view_array::ByteViewArrayDecoderPlain::read (1,321 samples, 1.14%)</title><rect x="57.0905%" y="213" width="1.1437%" height="15" fill="rgb(238,83,0)" fg:x="65939" fg:w="1321"/><text x="57.3405%" y="223.50"></text></g><g><title>dfbench`core::str::converts::from_utf8 (1,244 samples, 1.08%)</title><rect x="57.1572%" y="197" width="1.0771%" height="15" fill="rgb(221,39,39)" fg:x="66016" fg:w="1244"/><text x="57.4072%" y="207.50"></text></g><g><title>dfbench`&lt;parquet::compression::snappy_codec::SnappyCodec as parquet::compression::Codec&gt;::decompress (3,367 samples, 2.92%)</title><rect x="58.2499%" y="197" width="2.9152%" height="15" fill="rgb(222,119,46)" fg:x="67278" fg:w="3367"/><text x="58.4999%" y="207.50">df..</text></g><g><title>dfbench`mi_heap_malloc_zero_aligned_at_generic (19 samples, 0.02%)</title><rect x="61.1676%" y="197" width="0.0165%" height="15" fill="rgb(222,165,49)" fg:x="70648" fg:w="19"/><text x="61.4176%" y="207.50"></text></g><g><title>dfbench`_mi_malloc_generic (18 samples, 0.02%)</title><rect x="61.1685%" y="181" width="0.0156%" height="15" fill="rgb(219,113,52)" fg:x="70649" fg:w="18"/><text x="61.4185%" y="191.50"></text></g><g><title>dfbench`mi_page_fresh_alloc (13 samples, 0.01%)</title><rect x="61.1728%" y="165" width="0.0113%" height="15" fill="rgb(214,7,15)" fg:x="70654" fg:w="13"/><text x="61.4228%" y="175.50"></text></g><g><title>dfbench`mi_segments_page_alloc (13 samples, 0.01%)</title><rect x="61.1728%" y="149" width="0.0113%" height="15" fill="rgb(235,32,4)" fg:x="70654" fg:w="13"/><text x="61.4228%" y="159.50"></text></g><g><title>dfbench`mi_segment_try_purge (12 samples, 0.01%)</title><rect x="61.1737%" y="133" width="0.0104%" height="15" fill="rgb(238,90,54)" fg:x="70655" fg:w="12"/><text x="61.4237%" y="143.50"></text></g><g><title>dfbench`mi_segment_purge (12 samples, 0.01%)</title><rect x="61.1737%" y="117" width="0.0104%" height="15" fill="rgb(213,208,19)" fg:x="70655" fg:w="12"/><text x="61.4237%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`madvise (12 samples, 0.01%)</title><rect x="61.1737%" y="101" width="0.0104%" height="15" fill="rgb(233,156,4)" fg:x="70655" fg:w="12"/><text x="61.4237%" y="111.50"></text></g><g><title>libsystem_platform.dylib`__bzero (163 samples, 0.14%)</title><rect x="61.1841%" y="197" width="0.1411%" height="15" fill="rgb(207,194,5)" fg:x="70667" fg:w="163"/><text x="61.4341%" y="207.50"></text></g><g><title>dfbench`parquet::file::serialized_reader::decode_page (3,578 samples, 3.10%)</title><rect x="58.2481%" y="213" width="3.0979%" height="15" fill="rgb(206,111,30)" fg:x="67276" fg:w="3578"/><text x="58.4981%" y="223.50">dfb..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (24 samples, 0.02%)</title><rect x="61.3252%" y="197" width="0.0208%" height="15" fill="rgb(243,70,54)" fg:x="70830" fg:w="24"/><text x="61.5752%" y="207.50"></text></g><g><title>dfbench`&lt;parquet::file::serialized_reader::SerializedPageReader&lt;R&gt; as parquet::column::page::PageReader&gt;::get_next_page (3,603 samples, 3.12%)</title><rect x="58.2343%" y="229" width="3.1195%" height="15" fill="rgb(242,28,8)" fg:x="67260" fg:w="3603"/><text x="58.4843%" y="239.50">dfb..</text></g><g><title>libsystem_platform.dylib`__bzero (56 samples, 0.05%)</title><rect x="61.3546%" y="229" width="0.0485%" height="15" fill="rgb(219,106,18)" fg:x="70864" fg:w="56"/><text x="61.6046%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (90 samples, 0.08%)</title><rect x="61.4031%" y="229" width="0.0779%" height="15" fill="rgb(244,222,10)" fg:x="70920" fg:w="90"/><text x="61.6531%" y="239.50"></text></g><g><title>dfbench`parquet::column::reader::GenericColumnReader&lt;R,D,V&gt;::read_new_page (5,130 samples, 4.44%)</title><rect x="57.0568%" y="245" width="4.4416%" height="15" fill="rgb(236,179,52)" fg:x="65900" fg:w="5130"/><text x="57.3068%" y="255.50">dfben..</text></g><g><title>libsystem_platform.dylib`_platform_memset (20 samples, 0.02%)</title><rect x="61.4811%" y="229" width="0.0173%" height="15" fill="rgb(213,23,39)" fg:x="71010" fg:w="20"/><text x="61.7311%" y="239.50"></text></g><g><title>dfbench`parquet::encodings::rle::RleDecoder::reload (41 samples, 0.04%)</title><rect x="61.5988%" y="229" width="0.0355%" height="15" fill="rgb(238,48,10)" fg:x="71146" fg:w="41"/><text x="61.8488%" y="239.50"></text></g><g><title>dfbench`parquet::util::bit_util::BitReader::get_vlq_int (20 samples, 0.02%)</title><rect x="61.6170%" y="213" width="0.0173%" height="15" fill="rgb(251,196,23)" fg:x="71167" fg:w="20"/><text x="61.8670%" y="223.50"></text></g><g><title>dfbench`parquet::util::bit_pack::unpack16 (15 samples, 0.01%)</title><rect x="61.6880%" y="213" width="0.0130%" height="15" fill="rgb(250,152,24)" fg:x="71249" fg:w="15"/><text x="61.9380%" y="223.50"></text></g><g><title>dfbench`parquet::util::bit_util::BitReader::get_value (78 samples, 0.07%)</title><rect x="61.7079%" y="213" width="0.0675%" height="15" fill="rgb(209,150,17)" fg:x="71272" fg:w="78"/><text x="61.9579%" y="223.50"></text></g><g><title>dfbench`parquet::util::bit_util::BitReader::get_batch (169 samples, 0.15%)</title><rect x="61.6343%" y="229" width="0.1463%" height="15" fill="rgb(234,202,34)" fg:x="71187" fg:w="169"/><text x="61.8843%" y="239.50"></text></g><g><title>dfbench`parquet::util::bit_util::BitReader::get_value (19 samples, 0.02%)</title><rect x="61.7806%" y="229" width="0.0165%" height="15" fill="rgb(253,148,53)" fg:x="71356" fg:w="19"/><text x="62.0306%" y="239.50"></text></g><g><title>dfbench`parquet::encodings::rle::RleDecoder::get_batch (348 samples, 0.30%)</title><rect x="61.4984%" y="245" width="0.3013%" height="15" fill="rgb(218,129,16)" fg:x="71030" fg:w="348"/><text x="61.7484%" y="255.50"></text></g><g><title>dfbench`&lt;parquet::arrow::array_reader::byte_view_array::ByteViewArrayReader as parquet::arrow::array_reader::ArrayReader&gt;::read_records (10,660 samples, 9.23%)</title><rect x="52.5771%" y="261" width="9.2295%" height="15" fill="rgb(216,85,19)" fg:x="60726" fg:w="10660"/><text x="52.8271%" y="271.50">dfbench`&lt;parq..</text></g><g><title>dfbench`mi_segment_try_purge (90 samples, 0.08%)</title><rect x="61.8360%" y="101" width="0.0779%" height="15" fill="rgb(235,228,7)" fg:x="71420" fg:w="90"/><text x="62.0860%" y="111.50"></text></g><g><title>dfbench`mi_segment_purge (89 samples, 0.08%)</title><rect x="61.8369%" y="85" width="0.0771%" height="15" fill="rgb(245,175,0)" fg:x="71421" fg:w="89"/><text x="62.0869%" y="95.50"></text></g><g><title>libsystem_kernel.dylib`madvise (89 samples, 0.08%)</title><rect x="61.8369%" y="69" width="0.0771%" height="15" fill="rgb(208,168,36)" fg:x="71421" fg:w="89"/><text x="62.0869%" y="79.50"></text></g><g><title>dfbench`_mi_page_free (94 samples, 0.08%)</title><rect x="61.8352%" y="165" width="0.0814%" height="15" fill="rgb(246,171,24)" fg:x="71419" fg:w="94"/><text x="62.0852%" y="175.50"></text></g><g><title>dfbench`mi_segment_page_clear (94 samples, 0.08%)</title><rect x="61.8352%" y="149" width="0.0814%" height="15" fill="rgb(215,142,24)" fg:x="71419" fg:w="94"/><text x="62.0852%" y="159.50"></text></g><g><title>dfbench`mi_segment_span_free_coalesce (94 samples, 0.08%)</title><rect x="61.8352%" y="133" width="0.0814%" height="15" fill="rgb(250,187,7)" fg:x="71419" fg:w="94"/><text x="62.0852%" y="143.50"></text></g><g><title>dfbench`mi_segment_span_free (93 samples, 0.08%)</title><rect x="61.8360%" y="117" width="0.0805%" height="15" fill="rgb(228,66,33)" fg:x="71420" fg:w="93"/><text x="62.0860%" y="127.50"></text></g><g><title>dfbench`_mi_free_delayed_block (332 samples, 0.29%)</title><rect x="61.8256%" y="181" width="0.2874%" height="15" fill="rgb(234,215,21)" fg:x="71408" fg:w="332"/><text x="62.0756%" y="191.50"></text></g><g><title>dfbench`mi_segment_free (227 samples, 0.20%)</title><rect x="61.9166%" y="165" width="0.1965%" height="15" fill="rgb(222,191,20)" fg:x="71513" fg:w="227"/><text x="62.1666%" y="175.50"></text></g><g><title>dfbench`mi_arenas_try_purge (227 samples, 0.20%)</title><rect x="61.9166%" y="149" width="0.1965%" height="15" fill="rgb(245,79,54)" fg:x="71513" fg:w="227"/><text x="62.1666%" y="159.50"></text></g><g><title>dfbench`mi_arena_purge (227 samples, 0.20%)</title><rect x="61.9166%" y="133" width="0.1965%" height="15" fill="rgb(240,10,37)" fg:x="71513" fg:w="227"/><text x="62.1666%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`madvise (227 samples, 0.20%)</title><rect x="61.9166%" y="117" width="0.1965%" height="15" fill="rgb(214,192,32)" fg:x="71513" fg:w="227"/><text x="62.1666%" y="127.50"></text></g><g><title>dfbench`mi_heap_malloc_zero_aligned_at_generic (350 samples, 0.30%)</title><rect x="61.8196%" y="213" width="0.3030%" height="15" fill="rgb(209,36,54)" fg:x="71401" fg:w="350"/><text x="62.0696%" y="223.50"></text></g><g><title>dfbench`_mi_malloc_generic (348 samples, 0.30%)</title><rect x="61.8213%" y="197" width="0.3013%" height="15" fill="rgb(220,10,11)" fg:x="71403" fg:w="348"/><text x="62.0713%" y="207.50"></text></g><g><title>dfbench`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (360 samples, 0.31%)</title><rect x="61.8153%" y="245" width="0.3117%" height="15" fill="rgb(221,106,17)" fg:x="71396" fg:w="360"/><text x="62.0653%" y="255.50"></text></g><g><title>dfbench`alloc::raw_vec::finish_grow (360 samples, 0.31%)</title><rect x="61.8153%" y="229" width="0.3117%" height="15" fill="rgb(251,142,44)" fg:x="71396" fg:w="360"/><text x="62.0653%" y="239.50"></text></g><g><title>dfbench`&lt;parquet::column::reader::decoder::ColumnValueDecoderImpl&lt;T&gt; as parquet::column::reader::decoder::ColumnValueDecoder&gt;::set_data (26 samples, 0.02%)</title><rect x="62.1295%" y="229" width="0.0225%" height="15" fill="rgb(238,13,15)" fg:x="71759" fg:w="26"/><text x="62.3795%" y="239.50"></text></g><g><title>dfbench`&lt;parquet::encodings::decoding::PlainDecoder&lt;T&gt; as parquet::encodings::decoding::Decoder&lt;T&gt;&gt;::set_data (17 samples, 0.01%)</title><rect x="62.1373%" y="213" width="0.0147%" height="15" fill="rgb(208,107,27)" fg:x="71768" fg:w="17"/><text x="62.3873%" y="223.50"></text></g><g><title>dfbench`bytes::bytes::shared_drop (17 samples, 0.01%)</title><rect x="62.1373%" y="197" width="0.0147%" height="15" fill="rgb(205,136,37)" fg:x="71768" fg:w="17"/><text x="62.3873%" y="207.50"></text></g><g><title>dfbench`_mi_page_free (17 samples, 0.01%)</title><rect x="62.1373%" y="181" width="0.0147%" height="15" fill="rgb(250,205,27)" fg:x="71768" fg:w="17"/><text x="62.3873%" y="191.50"></text></g><g><title>dfbench`mi_segment_page_clear (17 samples, 0.01%)</title><rect x="62.1373%" y="165" width="0.0147%" height="15" fill="rgb(210,80,43)" fg:x="71768" fg:w="17"/><text x="62.3873%" y="175.50"></text></g><g><title>dfbench`mi_segment_span_free_coalesce (17 samples, 0.01%)</title><rect x="62.1373%" y="149" width="0.0147%" height="15" fill="rgb(247,160,36)" fg:x="71768" fg:w="17"/><text x="62.3873%" y="159.50"></text></g><g><title>dfbench`mi_segment_span_free (17 samples, 0.01%)</title><rect x="62.1373%" y="133" width="0.0147%" height="15" fill="rgb(234,13,49)" fg:x="71768" fg:w="17"/><text x="62.3873%" y="143.50"></text></g><g><title>dfbench`mi_segment_try_purge (17 samples, 0.01%)</title><rect x="62.1373%" y="117" width="0.0147%" height="15" fill="rgb(234,122,0)" fg:x="71768" fg:w="17"/><text x="62.3873%" y="127.50"></text></g><g><title>dfbench`mi_segment_purge (17 samples, 0.01%)</title><rect x="62.1373%" y="101" width="0.0147%" height="15" fill="rgb(207,146,38)" fg:x="71768" fg:w="17"/><text x="62.3873%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`madvise (17 samples, 0.01%)</title><rect x="62.1373%" y="85" width="0.0147%" height="15" fill="rgb(207,177,25)" fg:x="71768" fg:w="17"/><text x="62.3873%" y="95.50"></text></g><g><title>dfbench`bytes::bytes::promotable_even_drop (17 samples, 0.01%)</title><rect x="62.1590%" y="213" width="0.0147%" height="15" fill="rgb(211,178,42)" fg:x="71793" fg:w="17"/><text x="62.4090%" y="223.50"></text></g><g><title>dfbench`mi_segment_free (16 samples, 0.01%)</title><rect x="62.1598%" y="197" width="0.0139%" height="15" fill="rgb(230,69,54)" fg:x="71794" fg:w="16"/><text x="62.4098%" y="207.50"></text></g><g><title>dfbench`mi_arenas_try_purge (16 samples, 0.01%)</title><rect x="62.1598%" y="181" width="0.0139%" height="15" fill="rgb(214,135,41)" fg:x="71794" fg:w="16"/><text x="62.4098%" y="191.50"></text></g><g><title>dfbench`mi_arena_purge (16 samples, 0.01%)</title><rect x="62.1598%" y="165" width="0.0139%" height="15" fill="rgb(237,67,25)" fg:x="71794" fg:w="16"/><text x="62.4098%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`madvise (16 samples, 0.01%)</title><rect x="62.1598%" y="149" width="0.0139%" height="15" fill="rgb(222,189,50)" fg:x="71794" fg:w="16"/><text x="62.4098%" y="159.50"></text></g><g><title>dfbench`&lt;parquet::column::reader::decoder::ColumnValueDecoderImpl&lt;T&gt; as parquet::column::reader::decoder::ColumnValueDecoder&gt;::set_dict (125 samples, 0.11%)</title><rect x="62.1521%" y="229" width="0.1082%" height="15" fill="rgb(245,148,34)" fg:x="71785" fg:w="125"/><text x="62.4021%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (99 samples, 0.09%)</title><rect x="62.1746%" y="213" width="0.0857%" height="15" fill="rgb(222,29,6)" fg:x="71811" fg:w="99"/><text x="62.4246%" y="223.50"></text></g><g><title>dfbench`mi_heap_malloc_zero_aligned_at_generic (14 samples, 0.01%)</title><rect x="62.2646%" y="213" width="0.0121%" height="15" fill="rgb(221,189,43)" fg:x="71915" fg:w="14"/><text x="62.5146%" y="223.50"></text></g><g><title>dfbench`_mi_malloc_generic (14 samples, 0.01%)</title><rect x="62.2646%" y="197" width="0.0121%" height="15" fill="rgb(207,36,27)" fg:x="71915" fg:w="14"/><text x="62.5146%" y="207.50"></text></g><g><title>dfbench`&lt;parquet::compression::snappy_codec::SnappyCodec as parquet::compression::Codec&gt;::decompress (2,196 samples, 1.90%)</title><rect x="62.2802%" y="197" width="1.9013%" height="15" fill="rgb(217,90,24)" fg:x="71933" fg:w="2196"/><text x="62.5302%" y="207.50">d..</text></g><g><title>dfbench`mi_heap_malloc_zero_aligned_at_generic (18 samples, 0.02%)</title><rect x="64.1832%" y="197" width="0.0156%" height="15" fill="rgb(224,66,35)" fg:x="74131" fg:w="18"/><text x="64.4332%" y="207.50"></text></g><g><title>dfbench`_mi_malloc_generic (18 samples, 0.02%)</title><rect x="64.1832%" y="181" width="0.0156%" height="15" fill="rgb(221,13,50)" fg:x="74131" fg:w="18"/><text x="64.4332%" y="191.50"></text></g><g><title>dfbench`mi_page_fresh_alloc (14 samples, 0.01%)</title><rect x="64.1867%" y="165" width="0.0121%" height="15" fill="rgb(236,68,49)" fg:x="74135" fg:w="14"/><text x="64.4367%" y="175.50"></text></g><g><title>dfbench`mi_segments_page_alloc (14 samples, 0.01%)</title><rect x="64.1867%" y="149" width="0.0121%" height="15" fill="rgb(229,146,28)" fg:x="74135" fg:w="14"/><text x="64.4367%" y="159.50"></text></g><g><title>libsystem_platform.dylib`__bzero (189 samples, 0.16%)</title><rect x="64.1988%" y="197" width="0.1636%" height="15" fill="rgb(225,31,38)" fg:x="74149" fg:w="189"/><text x="64.4488%" y="207.50"></text></g><g><title>dfbench`parquet::file::serialized_reader::decode_page (2,498 samples, 2.16%)</title><rect x="62.2776%" y="213" width="2.1628%" height="15" fill="rgb(250,208,3)" fg:x="71930" fg:w="2498"/><text x="62.5276%" y="223.50">d..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (90 samples, 0.08%)</title><rect x="64.3625%" y="197" width="0.0779%" height="15" fill="rgb(246,54,23)" fg:x="74338" fg:w="90"/><text x="64.6125%" y="207.50"></text></g><g><title>dfbench`&lt;parquet::file::serialized_reader::SerializedPageReader&lt;R&gt; as parquet::column::page::PageReader&gt;::get_next_page (2,527 samples, 2.19%)</title><rect x="62.2603%" y="229" width="2.1879%" height="15" fill="rgb(243,76,11)" fg:x="71910" fg:w="2527"/><text x="62.5103%" y="239.50">d..</text></g><g><title>libsystem_platform.dylib`__bzero (180 samples, 0.16%)</title><rect x="64.4482%" y="229" width="0.1558%" height="15" fill="rgb(245,21,50)" fg:x="74437" fg:w="180"/><text x="64.6982%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (170 samples, 0.15%)</title><rect x="64.6040%" y="229" width="0.1472%" height="15" fill="rgb(228,9,43)" fg:x="74617" fg:w="170"/><text x="64.8540%" y="239.50"></text></g><g><title>dfbench`parquet::column::reader::GenericColumnReader&lt;R,D,V&gt;::read_new_page (3,049 samples, 2.64%)</title><rect x="62.1278%" y="245" width="2.6398%" height="15" fill="rgb(208,100,47)" fg:x="71757" fg:w="3049"/><text x="62.3778%" y="255.50">df..</text></g><g><title>libsystem_platform.dylib`_platform_memset (19 samples, 0.02%)</title><rect x="64.7512%" y="229" width="0.0165%" height="15" fill="rgb(232,26,8)" fg:x="74787" fg:w="19"/><text x="65.0012%" y="239.50"></text></g><g><title>dfbench`parquet::encodings::rle::RleDecoder::reload (87 samples, 0.08%)</title><rect x="65.9330%" y="229" width="0.0753%" height="15" fill="rgb(216,166,38)" fg:x="76152" fg:w="87"/><text x="66.1830%" y="239.50"></text></g><g><title>dfbench`parquet::util::bit_util::BitReader::get_vlq_int (28 samples, 0.02%)</title><rect x="65.9841%" y="213" width="0.0242%" height="15" fill="rgb(251,202,51)" fg:x="76211" fg:w="28"/><text x="66.2341%" y="223.50"></text></g><g><title>dfbench`parquet::util::bit_pack::unpack32 (154 samples, 0.13%)</title><rect x="66.1400%" y="213" width="0.1333%" height="15" fill="rgb(254,216,34)" fg:x="76391" fg:w="154"/><text x="66.3900%" y="223.50"></text></g><g><title>dfbench`parquet::util::bit_util::BitReader::get_value (161 samples, 0.14%)</title><rect x="66.2733%" y="213" width="0.1394%" height="15" fill="rgb(251,32,27)" fg:x="76545" fg:w="161"/><text x="66.5233%" y="223.50"></text></g><g><title>dfbench`parquet::util::bit_util::BitReader::get_batch (495 samples, 0.43%)</title><rect x="66.0101%" y="229" width="0.4286%" height="15" fill="rgb(208,127,28)" fg:x="76241" fg:w="495"/><text x="66.2601%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (30 samples, 0.03%)</title><rect x="66.4127%" y="213" width="0.0260%" height="15" fill="rgb(224,137,22)" fg:x="76706" fg:w="30"/><text x="66.6627%" y="223.50"></text></g><g><title>dfbench`parquet::util::bit_util::BitReader::get_value (31 samples, 0.03%)</title><rect x="66.4387%" y="229" width="0.0268%" height="15" fill="rgb(254,70,32)" fg:x="76736" fg:w="31"/><text x="66.6887%" y="239.50"></text></g><g><title>dfbench`parquet::encodings::rle::RleDecoder::get_batch_with_dict (1,972 samples, 1.71%)</title><rect x="64.7677%" y="245" width="1.7074%" height="15" fill="rgb(229,75,37)" fg:x="74806" fg:w="1972"/><text x="65.0177%" y="255.50"></text></g><g><title>dfbench`parquet::encodings::rle::RleDecoder::reload (16 samples, 0.01%)</title><rect x="66.4750%" y="245" width="0.0139%" height="15" fill="rgb(252,64,23)" fg:x="76778" fg:w="16"/><text x="66.7250%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (66 samples, 0.06%)</title><rect x="66.4975%" y="245" width="0.0571%" height="15" fill="rgb(232,162,48)" fg:x="76804" fg:w="66"/><text x="66.7475%" y="255.50"></text></g><g><title>dfbench`&lt;parquet::arrow::array_reader::primitive_array::PrimitiveArrayReader&lt;T&gt; as parquet::arrow::array_reader::ArrayReader&gt;::read_records (5,485 samples, 4.75%)</title><rect x="61.8066%" y="261" width="4.7490%" height="15" fill="rgb(246,160,12)" fg:x="71386" fg:w="5485"/><text x="62.0566%" y="271.50">dfbenc..</text></g><g><title>libsystem_platform.dylib`__bzero (72 samples, 0.06%)</title><rect x="66.5582%" y="261" width="0.0623%" height="15" fill="rgb(247,166,0)" fg:x="76874" fg:w="72"/><text x="66.8082%" y="271.50"></text></g><g><title>dfbench`&lt;parquet::arrow::array_reader::struct_array::StructArrayReader as parquet::arrow::array_reader::ArrayReader&gt;::read_records (16,225 samples, 14.05%)</title><rect x="52.5762%" y="277" width="14.0477%" height="15" fill="rgb(249,219,21)" fg:x="60725" fg:w="16225"/><text x="52.8262%" y="287.50">dfbench`&lt;parquet::arr..</text></g><g><title>dfbench`&lt;parquet::arrow::arrow_reader::ParquetRecordBatchReader as core::iter::traits::iterator::Iterator&gt;::next (16,426 samples, 14.22%)</title><rect x="52.4056%" y="293" width="14.2218%" height="15" fill="rgb(205,209,3)" fg:x="60528" fg:w="16426"/><text x="52.6556%" y="303.50">dfbench`&lt;parquet::arro..</text></g><g><title>dfbench`core::ptr::drop_in_place&lt;core::option::Option&lt;parquet::column::reader::GenericColumnReader&lt;parquet::column::reader::decoder::RepetitionLevelDecoderImpl,parquet::arrow::record_reader::definition_levels::DefinitionLevelBufferDecoder,parquet::arrow::array_reader::byte_view_array::ByteViewArrayColumnValueDecoder&gt;&gt;&gt; (18 samples, 0.02%)</title><rect x="66.6309%" y="245" width="0.0156%" height="15" fill="rgb(243,44,1)" fg:x="76958" fg:w="18"/><text x="66.8809%" y="255.50"></text></g><g><title>dfbench`_mi_page_free (45 samples, 0.04%)</title><rect x="66.6491%" y="213" width="0.0390%" height="15" fill="rgb(206,159,16)" fg:x="76979" fg:w="45"/><text x="66.8991%" y="223.50"></text></g><g><title>dfbench`mi_segment_page_clear (45 samples, 0.04%)</title><rect x="66.6491%" y="197" width="0.0390%" height="15" fill="rgb(244,77,30)" fg:x="76979" fg:w="45"/><text x="66.8991%" y="207.50"></text></g><g><title>dfbench`mi_segment_span_free_coalesce (45 samples, 0.04%)</title><rect x="66.6491%" y="181" width="0.0390%" height="15" fill="rgb(218,69,12)" fg:x="76979" fg:w="45"/><text x="66.8991%" y="191.50"></text></g><g><title>dfbench`mi_segment_span_free (45 samples, 0.04%)</title><rect x="66.6491%" y="165" width="0.0390%" height="15" fill="rgb(212,87,7)" fg:x="76979" fg:w="45"/><text x="66.8991%" y="175.50"></text></g><g><title>dfbench`mi_segment_try_purge (45 samples, 0.04%)</title><rect x="66.6491%" y="149" width="0.0390%" height="15" fill="rgb(245,114,25)" fg:x="76979" fg:w="45"/><text x="66.8991%" y="159.50"></text></g><g><title>dfbench`mi_segment_purge (45 samples, 0.04%)</title><rect x="66.6491%" y="133" width="0.0390%" height="15" fill="rgb(210,61,42)" fg:x="76979" fg:w="45"/><text x="66.8991%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`madvise (45 samples, 0.04%)</title><rect x="66.6491%" y="117" width="0.0390%" height="15" fill="rgb(211,52,33)" fg:x="76979" fg:w="45"/><text x="66.8991%" y="127.50"></text></g><g><title>dfbench`core::ptr::drop_in_place&lt;parquet::encodings::decoding::DictDecoder&lt;parquet::data_type::DoubleType&gt;&gt; (73 samples, 0.06%)</title><rect x="66.6491%" y="229" width="0.0632%" height="15" fill="rgb(234,58,33)" fg:x="76979" fg:w="73"/><text x="66.8991%" y="239.50"></text></g><g><title>dfbench`bytes::bytes::shared_drop (28 samples, 0.02%)</title><rect x="66.6880%" y="213" width="0.0242%" height="15" fill="rgb(220,115,36)" fg:x="77024" fg:w="28"/><text x="66.9380%" y="223.50"></text></g><g><title>dfbench`_mi_page_free (28 samples, 0.02%)</title><rect x="66.6880%" y="197" width="0.0242%" height="15" fill="rgb(243,153,54)" fg:x="77024" fg:w="28"/><text x="66.9380%" y="207.50"></text></g><g><title>dfbench`mi_segment_page_clear (28 samples, 0.02%)</title><rect x="66.6880%" y="181" width="0.0242%" height="15" fill="rgb(251,47,18)" fg:x="77024" fg:w="28"/><text x="66.9380%" y="191.50"></text></g><g><title>dfbench`mi_segment_span_free_coalesce (28 samples, 0.02%)</title><rect x="66.6880%" y="165" width="0.0242%" height="15" fill="rgb(242,102,42)" fg:x="77024" fg:w="28"/><text x="66.9380%" y="175.50"></text></g><g><title>dfbench`mi_segment_span_free (28 samples, 0.02%)</title><rect x="66.6880%" y="149" width="0.0242%" height="15" fill="rgb(234,31,38)" fg:x="77024" fg:w="28"/><text x="66.9380%" y="159.50"></text></g><g><title>dfbench`mi_segment_try_purge (28 samples, 0.02%)</title><rect x="66.6880%" y="133" width="0.0242%" height="15" fill="rgb(221,117,51)" fg:x="77024" fg:w="28"/><text x="66.9380%" y="143.50"></text></g><g><title>dfbench`mi_segment_purge (28 samples, 0.02%)</title><rect x="66.6880%" y="117" width="0.0242%" height="15" fill="rgb(212,20,18)" fg:x="77024" fg:w="28"/><text x="66.9380%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`madvise (28 samples, 0.02%)</title><rect x="66.6880%" y="101" width="0.0242%" height="15" fill="rgb(245,133,36)" fg:x="77024" fg:w="28"/><text x="66.9380%" y="111.50"></text></g><g><title>dfbench`core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;parquet::basic::Encoding,alloc::boxed::Box&lt;dyn parquet::encodings::decoding::Decoder&lt;parquet::data_type::BoolType&gt;&gt;&gt;&gt; (77 samples, 0.07%)</title><rect x="66.6482%" y="245" width="0.0667%" height="15" fill="rgb(212,6,19)" fg:x="76978" fg:w="77"/><text x="66.8982%" y="255.50"></text></g><g><title>dfbench`core::ptr::drop_in_place&lt;parquet::arrow::arrow_reader::ParquetRecordBatchReader&gt; (101 samples, 0.09%)</title><rect x="66.6283%" y="293" width="0.0874%" height="15" fill="rgb(218,1,36)" fg:x="76955" fg:w="101"/><text x="66.8783%" y="303.50"></text></g><g><title>dfbench`core::ptr::drop_in_place&lt;parquet::arrow::array_reader::struct_array::StructArrayReader&gt; (101 samples, 0.09%)</title><rect x="66.6283%" y="277" width="0.0874%" height="15" fill="rgb(246,84,54)" fg:x="76955" fg:w="101"/><text x="66.8783%" y="287.50"></text></g><g><title>dfbench`core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::boxed::Box&lt;dyn arrow_json::reader::ArrayDecoder&gt;&gt;&gt; (101 samples, 0.09%)</title><rect x="66.6283%" y="261" width="0.0874%" height="15" fill="rgb(242,110,6)" fg:x="76955" fg:w="101"/><text x="66.8783%" y="271.50"></text></g><g><title>dfbench`_mi_free_delayed_block (15 samples, 0.01%)</title><rect x="66.7209%" y="213" width="0.0130%" height="15" fill="rgb(214,47,5)" fg:x="77062" fg:w="15"/><text x="66.9709%" y="223.50"></text></g><g><title>dfbench`mi_segment_free (12 samples, 0.01%)</title><rect x="66.7235%" y="197" width="0.0104%" height="15" fill="rgb(218,159,25)" fg:x="77065" fg:w="12"/><text x="66.9735%" y="207.50"></text></g><g><title>dfbench`mi_arenas_try_purge (12 samples, 0.01%)</title><rect x="66.7235%" y="181" width="0.0104%" height="15" fill="rgb(215,211,28)" fg:x="77065" fg:w="12"/><text x="66.9735%" y="191.50"></text></g><g><title>dfbench`mi_arena_purge (12 samples, 0.01%)</title><rect x="66.7235%" y="165" width="0.0104%" height="15" fill="rgb(238,59,32)" fg:x="77065" fg:w="12"/><text x="66.9735%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`madvise (12 samples, 0.01%)</title><rect x="66.7235%" y="149" width="0.0104%" height="15" fill="rgb(226,82,3)" fg:x="77065" fg:w="12"/><text x="66.9735%" y="159.50"></text></g><g><title>dfbench`mi_heap_malloc_zero_aligned_at_generic (17 samples, 0.01%)</title><rect x="66.7209%" y="245" width="0.0147%" height="15" fill="rgb(240,164,32)" fg:x="77062" fg:w="17"/><text x="66.9709%" y="255.50"></text></g><g><title>dfbench`_mi_malloc_generic (17 samples, 0.01%)</title><rect x="66.7209%" y="229" width="0.0147%" height="15" fill="rgb(232,46,7)" fg:x="77062" fg:w="17"/><text x="66.9709%" y="239.50"></text></g><g><title>dfbench`parquet::arrow::array_reader::builder::build_reader (27 samples, 0.02%)</title><rect x="66.7183%" y="261" width="0.0234%" height="15" fill="rgb(229,129,53)" fg:x="77059" fg:w="27"/><text x="66.9683%" y="271.50"></text></g><g><title>dfbench`parquet::arrow::array_reader::builder::build_array_reader (29 samples, 0.03%)</title><rect x="66.7175%" y="277" width="0.0251%" height="15" fill="rgb(234,188,29)" fg:x="77058" fg:w="29"/><text x="66.9675%" y="287.50"></text></g><g><title>dfbench`&lt;futures_util::stream::stream::map::Map&lt;St,F&gt; as futures_core::stream::Stream&gt;::poll_next (16,650 samples, 14.42%)</title><rect x="52.3459%" y="309" width="14.4157%" height="15" fill="rgb(246,141,4)" fg:x="60459" fg:w="16650"/><text x="52.5959%" y="319.50">dfbench`&lt;futures_util:..</text></g><g><title>dfbench`parquet::arrow::async_reader::ReaderFactory&lt;T&gt;::read_row_group::_{{closure}} (52 samples, 0.05%)</title><rect x="66.7166%" y="293" width="0.0450%" height="15" fill="rgb(229,23,39)" fg:x="77057" fg:w="52"/><text x="66.9666%" y="303.50"></text></g><g><title>dfbench`parquet::arrow::async_reader::InMemoryRowGroup::fetch::_{{closure}} (21 samples, 0.02%)</title><rect x="66.7434%" y="277" width="0.0182%" height="15" fill="rgb(206,12,3)" fg:x="77088" fg:w="21"/><text x="66.9934%" y="287.50"></text></g><g><title>dfbench`&lt;parquet::arrow::async_reader::store::ParquetObjectReader as parquet::arrow::async_reader::AsyncFileReader&gt;::get_byte_ranges::_{{closure}} (18 samples, 0.02%)</title><rect x="66.7460%" y="261" width="0.0156%" height="15" fill="rgb(252,226,20)" fg:x="77091" fg:w="18"/><text x="66.9960%" y="271.50"></text></g><g><title>dfbench`&lt;alloc::sync::Arc&lt;dyn object_store::ObjectStore&gt; as object_store::ObjectStore&gt;::get_ranges::_{{closure}} (17 samples, 0.01%)</title><rect x="66.7469%" y="245" width="0.0147%" height="15" fill="rgb(216,123,35)" fg:x="77092" fg:w="17"/><text x="66.9969%" y="255.50"></text></g><g><title>dfbench`&lt;object_store::local::LocalFileSystem as object_store::ObjectStore&gt;::get_ranges::_{{closure}} (17 samples, 0.01%)</title><rect x="66.7469%" y="229" width="0.0147%" height="15" fill="rgb(212,68,40)" fg:x="77092" fg:w="17"/><text x="66.9969%" y="239.50"></text></g><g><title>dfbench`tokio::runtime::blocking::pool::Spawner::spawn_task (12 samples, 0.01%)</title><rect x="66.7512%" y="213" width="0.0104%" height="15" fill="rgb(254,125,32)" fg:x="77097" fg:w="12"/><text x="67.0012%" y="223.50"></text></g><g><title>dfbench`&lt;datafusion::datasource::physical_plan::file_stream::FileStream&lt;F&gt; as futures_core::stream::Stream&gt;::poll_next (17,579 samples, 15.22%)</title><rect x="51.5511%" y="325" width="15.2200%" height="15" fill="rgb(253,97,22)" fg:x="59541" fg:w="17579"/><text x="51.8011%" y="335.50">dfbench`&lt;datafusion::da..</text></g><g><title>dfbench`&lt;arrow_array::array::byte_view_array::GenericByteViewArray&lt;T&gt; as arrow_array::array::Array&gt;::slice (24 samples, 0.02%)</title><rect x="66.7902%" y="309" width="0.0208%" height="15" fill="rgb(241,101,14)" fg:x="77142" fg:w="24"/><text x="67.0402%" y="319.50"></text></g><g><title>dfbench`&lt;arrow_array::array::primitive_array::PrimitiveArray&lt;T&gt; as arrow_array::array::Array&gt;::slice (14 samples, 0.01%)</title><rect x="66.8110%" y="309" width="0.0121%" height="15" fill="rgb(238,103,29)" fg:x="77166" fg:w="14"/><text x="67.0610%" y="319.50"></text></g><g><title>dfbench`arrow_array::record_batch::RecordBatch::slice (43 samples, 0.04%)</title><rect x="66.7876%" y="325" width="0.0372%" height="15" fill="rgb(233,195,47)" fg:x="77139" fg:w="43"/><text x="67.0376%" y="335.50"></text></g><g><title>dfbench`core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;arrow_buffer::buffer::immutable::Buffer&gt;&gt; (33 samples, 0.03%)</title><rect x="66.8283%" y="277" width="0.0286%" height="15" fill="rgb(246,218,30)" fg:x="77186" fg:w="33"/><text x="67.0783%" y="287.50"></text></g><g><title>dfbench`alloc::sync::Arc&lt;T,A&gt;::drop_slow (27 samples, 0.02%)</title><rect x="66.8335%" y="261" width="0.0234%" height="15" fill="rgb(219,145,47)" fg:x="77192" fg:w="27"/><text x="67.0835%" y="271.50"></text></g><g><title>dfbench`alloc::sync::Arc&lt;T,A&gt;::drop_slow (27 samples, 0.02%)</title><rect x="66.8335%" y="245" width="0.0234%" height="15" fill="rgb(243,12,26)" fg:x="77192" fg:w="27"/><text x="67.0835%" y="255.50"></text></g><g><title>dfbench`bytes::bytes::shared_drop (26 samples, 0.02%)</title><rect x="66.8343%" y="229" width="0.0225%" height="15" fill="rgb(214,87,16)" fg:x="77193" fg:w="26"/><text x="67.0843%" y="239.50"></text></g><g><title>dfbench`_mi_page_free (25 samples, 0.02%)</title><rect x="66.8352%" y="213" width="0.0216%" height="15" fill="rgb(208,99,42)" fg:x="77194" fg:w="25"/><text x="67.0852%" y="223.50"></text></g><g><title>dfbench`mi_segment_page_clear (25 samples, 0.02%)</title><rect x="66.8352%" y="197" width="0.0216%" height="15" fill="rgb(253,99,2)" fg:x="77194" fg:w="25"/><text x="67.0852%" y="207.50"></text></g><g><title>dfbench`mi_segment_span_free_coalesce (25 samples, 0.02%)</title><rect x="66.8352%" y="181" width="0.0216%" height="15" fill="rgb(220,168,23)" fg:x="77194" fg:w="25"/><text x="67.0852%" y="191.50"></text></g><g><title>dfbench`mi_segment_span_free (24 samples, 0.02%)</title><rect x="66.8361%" y="165" width="0.0208%" height="15" fill="rgb(242,38,24)" fg:x="77195" fg:w="24"/><text x="67.0861%" y="175.50"></text></g><g><title>dfbench`mi_segment_try_purge (24 samples, 0.02%)</title><rect x="66.8361%" y="149" width="0.0208%" height="15" fill="rgb(225,182,9)" fg:x="77195" fg:w="24"/><text x="67.0861%" y="159.50"></text></g><g><title>dfbench`mi_segment_purge (24 samples, 0.02%)</title><rect x="66.8361%" y="133" width="0.0208%" height="15" fill="rgb(243,178,37)" fg:x="77195" fg:w="24"/><text x="67.0861%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`madvise (24 samples, 0.02%)</title><rect x="66.8361%" y="117" width="0.0208%" height="15" fill="rgb(232,139,19)" fg:x="77195" fg:w="24"/><text x="67.0861%" y="127.50"></text></g><g><title>dfbench`core::ptr::drop_in_place&lt;arrow_array::array::byte_view_array::GenericByteViewArray&lt;arrow_array::types::BinaryViewType&gt;&gt; (42 samples, 0.04%)</title><rect x="66.8274%" y="293" width="0.0364%" height="15" fill="rgb(225,201,24)" fg:x="77185" fg:w="42"/><text x="67.0774%" y="303.50"></text></g><g><title>dfbench`alloc::sync::Arc&lt;T,A&gt;::drop_slow (54 samples, 0.05%)</title><rect x="66.8266%" y="309" width="0.0468%" height="15" fill="rgb(221,47,46)" fg:x="77184" fg:w="54"/><text x="67.0766%" y="319.50"></text></g><g><title>dfbench`core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::sync::Arc&lt;dyn arrow_array::array::Array&gt;&gt;&gt; (58 samples, 0.05%)</title><rect x="66.8248%" y="325" width="0.0502%" height="15" fill="rgb(249,23,13)" fg:x="77182" fg:w="58"/><text x="67.0748%" y="335.50"></text></g><g><title>dfbench`chrono::naive::date::NaiveDate::from_num_days_from_ce_opt (148 samples, 0.13%)</title><rect x="66.9971%" y="213" width="0.1281%" height="15" fill="rgb(219,9,5)" fg:x="77381" fg:w="148"/><text x="67.2471%" y="223.50"></text></g><g><title>dfbench`&lt;arrow_array::array::primitive_array::PrimitiveArray&lt;arrow_array::types::TimestampSecondType&gt; as arrow_arith::temporal::ExtractDatePartExt&gt;::date_part (286 samples, 0.25%)</title><rect x="66.8794%" y="229" width="0.2476%" height="15" fill="rgb(254,171,16)" fg:x="77245" fg:w="286"/><text x="67.1294%" y="239.50"></text></g><g><title>dfbench`core::ops::function::FnOnce::call_once (19 samples, 0.02%)</title><rect x="67.1348%" y="229" width="0.0165%" height="15" fill="rgb(230,171,20)" fg:x="77540" fg:w="19"/><text x="67.3848%" y="239.50"></text></g><g><title>dfbench`arrow_arith::temporal::date_part (317 samples, 0.27%)</title><rect x="66.8794%" y="245" width="0.2745%" height="15" fill="rgb(210,71,41)" fg:x="77245" fg:w="317"/><text x="67.1294%" y="255.50"></text></g><g><title>dfbench`&lt;datafusion_functions::datetime::date_part::DatePartFunc as datafusion_expr::udf::ScalarUDFImpl&gt;::invoke (336 samples, 0.29%)</title><rect x="66.8768%" y="277" width="0.2909%" height="15" fill="rgb(206,173,20)" fg:x="77242" fg:w="336"/><text x="67.1268%" y="287.50"></text></g><g><title>dfbench`datafusion_functions::datetime::date_part::date_part_f64 (333 samples, 0.29%)</title><rect x="66.8794%" y="261" width="0.2883%" height="15" fill="rgb(233,88,34)" fg:x="77245" fg:w="333"/><text x="67.1294%" y="271.50"></text></g><g><title>dfbench`arrow_cast::cast::cast_with_options (16 samples, 0.01%)</title><rect x="67.1538%" y="245" width="0.0139%" height="15" fill="rgb(223,209,46)" fg:x="77562" fg:w="16"/><text x="67.4038%" y="255.50"></text></g><g><title>dfbench`datafusion_physical_plan::aggregates::evaluate_group_by (344 samples, 0.30%)</title><rect x="66.8750%" y="325" width="0.2978%" height="15" fill="rgb(250,43,18)" fg:x="77240" fg:w="344"/><text x="67.1250%" y="335.50"></text></g><g><title>dfbench`&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::next (343 samples, 0.30%)</title><rect x="66.8759%" y="309" width="0.2970%" height="15" fill="rgb(208,13,10)" fg:x="77241" fg:w="343"/><text x="67.1259%" y="319.50"></text></g><g><title>dfbench`&lt;datafusion_physical_expr::scalar_function::ScalarFunctionExpr as datafusion_physical_expr_common::physical_expr::PhysicalExpr&gt;::evaluate (343 samples, 0.30%)</title><rect x="66.8759%" y="293" width="0.2970%" height="15" fill="rgb(212,200,36)" fg:x="77241" fg:w="343"/><text x="67.1259%" y="303.50"></text></g><g><title>dfbench`&lt;datafusion_physical_plan::aggregates::group_values::multi_group_by::GroupValuesColumn&lt;_&gt; as datafusion_physical_plan::aggregates::group_values::GroupValues&gt;::clear_shrink (106 samples, 0.09%)</title><rect x="67.1798%" y="309" width="0.0918%" height="15" fill="rgb(225,90,30)" fg:x="77592" fg:w="106"/><text x="67.4298%" y="319.50"></text></g><g><title>dfbench`mi_free_block_mt (106 samples, 0.09%)</title><rect x="67.1798%" y="293" width="0.0918%" height="15" fill="rgb(236,182,39)" fg:x="77592" fg:w="106"/><text x="67.4298%" y="303.50"></text></g><g><title>dfbench`_mi_os_reset (106 samples, 0.09%)</title><rect x="67.1798%" y="277" width="0.0918%" height="15" fill="rgb(212,144,35)" fg:x="77592" fg:w="106"/><text x="67.4298%" y="287.50"></text></g><g><title>libsystem_kernel.dylib`madvise (106 samples, 0.09%)</title><rect x="67.1798%" y="261" width="0.0918%" height="15" fill="rgb(228,63,44)" fg:x="77592" fg:w="106"/><text x="67.4298%" y="271.50"></text></g><g><title>dfbench`datafusion_physical_plan::aggregates::row_hash::GroupedHashAggregateStream::clear_all (118 samples, 0.10%)</title><rect x="67.1798%" y="325" width="0.1022%" height="15" fill="rgb(228,109,6)" fg:x="77592" fg:w="118"/><text x="67.4298%" y="335.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (12 samples, 0.01%)</title><rect x="67.2716%" y="309" width="0.0104%" height="15" fill="rgb(238,117,24)" fg:x="77698" fg:w="12"/><text x="67.5216%" y="319.50"></text></g><g><title>dfbench`mi_free_block_mt (35 samples, 0.03%)</title><rect x="67.7227%" y="245" width="0.0303%" height="15" fill="rgb(242,26,26)" fg:x="78219" fg:w="35"/><text x="67.9727%" y="255.50"></text></g><g><title>dfbench`_mi_os_reset (35 samples, 0.03%)</title><rect x="67.7227%" y="229" width="0.0303%" height="15" fill="rgb(221,92,48)" fg:x="78219" fg:w="35"/><text x="67.9727%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`madvise (35 samples, 0.03%)</title><rect x="67.7227%" y="213" width="0.0303%" height="15" fill="rgb(209,209,32)" fg:x="78219" fg:w="35"/><text x="67.9727%" y="223.50"></text></g><g><title>dfbench`_mi_heap_realloc_zero (50 samples, 0.04%)</title><rect x="67.7131%" y="261" width="0.0433%" height="15" fill="rgb(221,70,22)" fg:x="78208" fg:w="50"/><text x="67.9631%" y="271.50"></text></g><g><title>dfbench`&lt;datafusion_functions_aggregate::count::CountGroupsAccumulator as datafusion_expr_common::groups_accumulator::GroupsAccumulator&gt;::update_batch (884 samples, 0.77%)</title><rect x="67.2872%" y="309" width="0.7654%" height="15" fill="rgb(248,145,5)" fg:x="77716" fg:w="884"/><text x="67.5372%" y="319.50"></text></g><g><title>dfbench`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (392 samples, 0.34%)</title><rect x="67.7131%" y="293" width="0.3394%" height="15" fill="rgb(226,116,26)" fg:x="78208" fg:w="392"/><text x="67.9631%" y="303.50"></text></g><g><title>dfbench`alloc::raw_vec::finish_grow (392 samples, 0.34%)</title><rect x="67.7131%" y="277" width="0.3394%" height="15" fill="rgb(244,5,17)" fg:x="78208" fg:w="392"/><text x="67.9631%" y="287.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (342 samples, 0.30%)</title><rect x="67.7564%" y="261" width="0.2961%" height="15" fill="rgb(252,159,33)" fg:x="78258" fg:w="342"/><text x="68.0064%" y="271.50"></text></g><g><title>dfbench`DYLD-STUB$$memcpy (21 samples, 0.02%)</title><rect x="80.5193%" y="277" width="0.0182%" height="15" fill="rgb(206,71,0)" fg:x="92999" fg:w="21"/><text x="80.7693%" y="287.50"></text></g><g><title>dfbench`arrow_array::builder::generic_bytes_view_builder::make_view (408 samples, 0.35%)</title><rect x="80.5375%" y="277" width="0.3532%" height="15" fill="rgb(233,118,54)" fg:x="93020" fg:w="408"/><text x="80.7875%" y="287.50"></text></g><g><title>dfbench`mi_free_block_mt (79 samples, 0.07%)</title><rect x="82.1436%" y="213" width="0.0684%" height="15" fill="rgb(234,83,48)" fg:x="94875" fg:w="79"/><text x="82.3936%" y="223.50"></text></g><g><title>dfbench`_mi_os_reset (79 samples, 0.07%)</title><rect x="82.1436%" y="197" width="0.0684%" height="15" fill="rgb(228,3,54)" fg:x="94875" fg:w="79"/><text x="82.3936%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`madvise (79 samples, 0.07%)</title><rect x="82.1436%" y="181" width="0.0684%" height="15" fill="rgb(226,155,13)" fg:x="94875" fg:w="79"/><text x="82.3936%" y="191.50"></text></g><g><title>dfbench`mi_heap_realloc_zero_aligned_at (98 samples, 0.08%)</title><rect x="82.1418%" y="229" width="0.0848%" height="15" fill="rgb(241,28,37)" fg:x="94873" fg:w="98"/><text x="82.3918%" y="239.50"></text></g><g><title>dfbench`mi_heap_malloc_zero_aligned_at_generic (17 samples, 0.01%)</title><rect x="82.2120%" y="213" width="0.0147%" height="15" fill="rgb(233,93,10)" fg:x="94954" fg:w="17"/><text x="82.4620%" y="223.50"></text></g><g><title>dfbench`_mi_malloc_generic (17 samples, 0.01%)</title><rect x="82.2120%" y="197" width="0.0147%" height="15" fill="rgb(225,113,19)" fg:x="94954" fg:w="17"/><text x="82.4620%" y="207.50"></text></g><g><title>dfbench`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (1,005 samples, 0.87%)</title><rect x="82.1410%" y="261" width="0.8701%" height="15" fill="rgb(241,2,18)" fg:x="94872" fg:w="1005"/><text x="82.3910%" y="271.50"></text></g><g><title>dfbench`alloc::raw_vec::finish_grow (1,005 samples, 0.87%)</title><rect x="82.1410%" y="245" width="0.8701%" height="15" fill="rgb(228,207,21)" fg:x="94872" fg:w="1005"/><text x="82.3910%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (906 samples, 0.78%)</title><rect x="82.2267%" y="229" width="0.7844%" height="15" fill="rgb(213,211,35)" fg:x="94971" fg:w="906"/><text x="82.4767%" y="239.50"></text></g><g><title>dfbench`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (25 samples, 0.02%)</title><rect x="83.0111%" y="261" width="0.0216%" height="15" fill="rgb(209,83,10)" fg:x="95877" fg:w="25"/><text x="83.2611%" y="271.50"></text></g><g><title>dfbench`alloc::raw_vec::finish_grow (25 samples, 0.02%)</title><rect x="83.0111%" y="245" width="0.0216%" height="15" fill="rgb(209,164,1)" fg:x="95877" fg:w="25"/><text x="83.2611%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (22 samples, 0.02%)</title><rect x="83.0137%" y="229" width="0.0190%" height="15" fill="rgb(213,184,43)" fg:x="95880" fg:w="22"/><text x="83.2637%" y="239.50"></text></g><g><title>dfbench`datafusion_physical_plan::aggregates::group_values::multi_group_by::bytes_view::ByteViewGroupValueBuilder&lt;B&gt;::do_append_val_inner (2,491 samples, 2.16%)</title><rect x="80.8907%" y="277" width="2.1567%" height="15" fill="rgb(231,61,34)" fg:x="93428" fg:w="2491"/><text x="81.1407%" y="287.50">d..</text></g><g><title>dfbench`mi_heap_malloc_zero_aligned_at_generic (17 samples, 0.01%)</title><rect x="83.0328%" y="261" width="0.0147%" height="15" fill="rgb(235,75,3)" fg:x="95902" fg:w="17"/><text x="83.2828%" y="271.50"></text></g><g><title>dfbench`_mi_malloc_generic (17 samples, 0.01%)</title><rect x="83.0328%" y="245" width="0.0147%" height="15" fill="rgb(220,106,47)" fg:x="95902" fg:w="17"/><text x="83.2828%" y="255.50"></text></g><g><title>dfbench`&lt;datafusion_physical_plan::aggregates::group_values::multi_group_by::bytes_view::ByteViewGroupValueBuilder&lt;B&gt; as datafusion_physical_plan::aggregates::group_values::multi_group_by::GroupColumn&gt;::vectorized_append (3,741 samples, 3.24%)</title><rect x="80.5029%" y="293" width="3.2390%" height="15" fill="rgb(210,196,33)" fg:x="92980" fg:w="3741"/><text x="80.7529%" y="303.50">dfb..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (802 samples, 0.69%)</title><rect x="83.0475%" y="277" width="0.6944%" height="15" fill="rgb(229,154,42)" fg:x="95919" fg:w="802"/><text x="83.2975%" y="287.50"></text></g><g><title>dfbench`DYLD-STUB$$memcmp (67 samples, 0.06%)</title><rect x="83.8830%" y="277" width="0.0580%" height="15" fill="rgb(228,114,26)" fg:x="96884" fg:w="67"/><text x="84.1330%" y="287.50"></text></g><g><title>dfbench`datafusion_physical_plan::aggregates::group_values::multi_group_by::bytes_view::ByteViewGroupValueBuilder&lt;B&gt;::do_equal_to_inner (675 samples, 0.58%)</title><rect x="83.9410%" y="277" width="0.5844%" height="15" fill="rgb(208,144,1)" fg:x="96951" fg:w="675"/><text x="84.1910%" y="287.50"></text></g><g><title>dfbench`&lt;datafusion_physical_plan::aggregates::group_values::multi_group_by::bytes_view::ByteViewGroupValueBuilder&lt;B&gt; as datafusion_physical_plan::aggregates::group_values::multi_group_by::GroupColumn&gt;::vectorized_equal_to (1,212 samples, 1.05%)</title><rect x="83.7419%" y="293" width="1.0494%" height="15" fill="rgb(239,112,37)" fg:x="96721" fg:w="1212"/><text x="83.9919%" y="303.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (307 samples, 0.27%)</title><rect x="84.5254%" y="277" width="0.2658%" height="15" fill="rgb(210,96,50)" fg:x="97626" fg:w="307"/><text x="84.7754%" y="287.50"></text></g><g><title>dfbench`_mi_malloc_generic (16 samples, 0.01%)</title><rect x="85.7765%" y="229" width="0.0139%" height="15" fill="rgb(222,178,2)" fg:x="99071" fg:w="16"/><text x="86.0265%" y="239.50"></text></g><g><title>dfbench`mi_free_block_mt (37 samples, 0.03%)</title><rect x="85.7938%" y="229" width="0.0320%" height="15" fill="rgb(226,74,18)" fg:x="99091" fg:w="37"/><text x="86.0438%" y="239.50"></text></g><g><title>dfbench`_mi_os_reset (37 samples, 0.03%)</title><rect x="85.7938%" y="213" width="0.0320%" height="15" fill="rgb(225,67,54)" fg:x="99091" fg:w="37"/><text x="86.0438%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`madvise (37 samples, 0.03%)</title><rect x="85.7938%" y="197" width="0.0320%" height="15" fill="rgb(251,92,32)" fg:x="99091" fg:w="37"/><text x="86.0438%" y="207.50"></text></g><g><title>dfbench`_mi_heap_realloc_zero (77 samples, 0.07%)</title><rect x="85.7765%" y="245" width="0.0667%" height="15" fill="rgb(228,149,22)" fg:x="99071" fg:w="77"/><text x="86.0265%" y="255.50"></text></g><g><title>dfbench`mi_segment_free (20 samples, 0.02%)</title><rect x="85.8259%" y="229" width="0.0173%" height="15" fill="rgb(243,54,13)" fg:x="99128" fg:w="20"/><text x="86.0759%" y="239.50"></text></g><g><title>dfbench`mi_arenas_try_purge (20 samples, 0.02%)</title><rect x="85.8259%" y="213" width="0.0173%" height="15" fill="rgb(243,180,28)" fg:x="99128" fg:w="20"/><text x="86.0759%" y="223.50"></text></g><g><title>dfbench`mi_arena_purge (20 samples, 0.02%)</title><rect x="85.8259%" y="197" width="0.0173%" height="15" fill="rgb(208,167,24)" fg:x="99128" fg:w="20"/><text x="86.0759%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`madvise (20 samples, 0.02%)</title><rect x="85.8259%" y="181" width="0.0173%" height="15" fill="rgb(245,73,45)" fg:x="99128" fg:w="20"/><text x="86.0759%" y="191.50"></text></g><g><title>dfbench`&lt;datafusion_physical_plan::aggregates::group_values::multi_group_by::primitive::PrimitiveGroupValueBuilder&lt;T,_&gt; as datafusion_physical_plan::aggregates::group_values::multi_group_by::GroupColumn&gt;::vectorized_append (2,016 samples, 1.75%)</title><rect x="84.7912%" y="293" width="1.7455%" height="15" fill="rgb(237,203,48)" fg:x="97933" fg:w="2016"/><text x="85.0412%" y="303.50"></text></g><g><title>dfbench`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (878 samples, 0.76%)</title><rect x="85.7765%" y="277" width="0.7602%" height="15" fill="rgb(211,197,16)" fg:x="99071" fg:w="878"/><text x="86.0265%" y="287.50"></text></g><g><title>dfbench`alloc::raw_vec::finish_grow (878 samples, 0.76%)</title><rect x="85.7765%" y="261" width="0.7602%" height="15" fill="rgb(243,99,51)" fg:x="99071" fg:w="878"/><text x="86.0265%" y="271.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (801 samples, 0.69%)</title><rect x="85.8432%" y="245" width="0.6935%" height="15" fill="rgb(215,123,29)" fg:x="99148" fg:w="801"/><text x="86.0932%" y="255.50"></text></g><g><title>dfbench`&lt;datafusion_physical_plan::aggregates::group_values::multi_group_by::primitive::PrimitiveGroupValueBuilder&lt;T,_&gt; as datafusion_physical_plan::aggregates::group_values::multi_group_by::GroupColumn&gt;::vectorized_equal_to (787 samples, 0.68%)</title><rect x="86.5367%" y="293" width="0.6814%" height="15" fill="rgb(239,186,37)" fg:x="99949" fg:w="787"/><text x="86.7867%" y="303.50"></text></g><g><title>dfbench`&lt;str as datafusion_common::hash_utils::HashValue&gt;::hash_one (1,346 samples, 1.17%)</title><rect x="87.2181%" y="293" width="1.1654%" height="15" fill="rgb(252,136,39)" fg:x="100736" fg:w="1346"/><text x="87.4681%" y="303.50"></text></g><g><title>dfbench`datafusion_common::hash_utils::create_hashes (1,804 samples, 1.56%)</title><rect x="88.3860%" y="293" width="1.5619%" height="15" fill="rgb(223,213,32)" fg:x="102085" fg:w="1804"/><text x="88.6360%" y="303.50"></text></g><g><title>dfbench`datafusion_physical_plan::aggregates::group_values::multi_group_by::bytes_view::ByteViewGroupValueBuilder&lt;B&gt;::do_append_val_inner (310 samples, 0.27%)</title><rect x="89.9480%" y="293" width="0.2684%" height="15" fill="rgb(233,115,5)" fg:x="103889" fg:w="310"/><text x="90.1980%" y="303.50"></text></g><g><title>dfbench`mi_free_block_mt (119 samples, 0.10%)</title><rect x="93.4744%" y="277" width="0.1030%" height="15" fill="rgb(207,226,44)" fg:x="107962" fg:w="119"/><text x="93.7244%" y="287.50"></text></g><g><title>dfbench`_mi_os_reset (119 samples, 0.10%)</title><rect x="93.4744%" y="261" width="0.1030%" height="15" fill="rgb(208,126,0)" fg:x="107962" fg:w="119"/><text x="93.7244%" y="271.50"></text></g><g><title>libsystem_kernel.dylib`madvise (119 samples, 0.10%)</title><rect x="93.4744%" y="245" width="0.1030%" height="15" fill="rgb(244,66,21)" fg:x="107962" fg:w="119"/><text x="93.7244%" y="255.50"></text></g><g><title>dfbench`mi_segment_free (16 samples, 0.01%)</title><rect x="93.5774%" y="277" width="0.0139%" height="15" fill="rgb(222,97,12)" fg:x="108081" fg:w="16"/><text x="93.8274%" y="287.50"></text></g><g><title>dfbench`mi_arenas_try_purge (13 samples, 0.01%)</title><rect x="93.5800%" y="261" width="0.0113%" height="15" fill="rgb(219,213,19)" fg:x="108084" fg:w="13"/><text x="93.8300%" y="271.50"></text></g><g><title>dfbench`mi_arena_purge (13 samples, 0.01%)</title><rect x="93.5800%" y="245" width="0.0113%" height="15" fill="rgb(252,169,30)" fg:x="108084" fg:w="13"/><text x="93.8300%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`madvise (13 samples, 0.01%)</title><rect x="93.5800%" y="229" width="0.0113%" height="15" fill="rgb(206,32,51)" fg:x="108084" fg:w="13"/><text x="93.8300%" y="239.50"></text></g><g><title>dfbench`&lt;datafusion_physical_plan::aggregates::group_values::multi_group_by::GroupValuesColumn&lt;_&gt; as datafusion_physical_plan::aggregates::group_values::GroupValues&gt;::intern (29,618 samples, 25.64%)</title><rect x="68.0525%" y="309" width="25.6435%" height="15" fill="rgb(250,172,42)" fg:x="78600" fg:w="29618"/><text x="68.3025%" y="319.50">dfbench`&lt;datafusion_physical_plan::aggreg..</text></g><g><title>dfbench`hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve_rehash (4,016 samples, 3.48%)</title><rect x="90.2190%" y="293" width="3.4771%" height="15" fill="rgb(209,34,43)" fg:x="104202" fg:w="4016"/><text x="90.4690%" y="303.50">dfb..</text></g><g><title>libsystem_platform.dylib`_platform_memset (121 samples, 0.10%)</title><rect x="93.5913%" y="277" width="0.1048%" height="15" fill="rgb(223,11,35)" fg:x="108097" fg:w="121"/><text x="93.8413%" y="287.50"></text></g><g><title>dfbench`core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::sync::Arc&lt;dyn arrow_array::array::Array&gt;&gt;&gt; (19 samples, 0.02%)</title><rect x="93.6978%" y="309" width="0.0165%" height="15" fill="rgb(251,219,26)" fg:x="108220" fg:w="19"/><text x="93.9478%" y="319.50"></text></g><g><title>dfbench`alloc::sync::Arc&lt;T,A&gt;::drop_slow (14 samples, 0.01%)</title><rect x="93.7021%" y="293" width="0.0121%" height="15" fill="rgb(231,119,3)" fg:x="108225" fg:w="14"/><text x="93.9521%" y="303.50"></text></g><g><title>dfbench`chrono::naive::date::NaiveDate::from_num_days_from_ce_opt (1,719 samples, 1.49%)</title><rect x="94.9290%" y="197" width="1.4883%" height="15" fill="rgb(216,97,11)" fg:x="109642" fg:w="1719"/><text x="95.1790%" y="207.50"></text></g><g><title>dfbench`mi_heap_malloc_zero_aligned_at_generic (13 samples, 0.01%)</title><rect x="96.4173%" y="197" width="0.0113%" height="15" fill="rgb(223,59,9)" fg:x="111361" fg:w="13"/><text x="96.6673%" y="207.50"></text></g><g><title>dfbench`_mi_malloc_generic (13 samples, 0.01%)</title><rect x="96.4173%" y="181" width="0.0113%" height="15" fill="rgb(233,93,31)" fg:x="111361" fg:w="13"/><text x="96.6673%" y="191.50"></text></g><g><title>dfbench`&lt;arrow_array::array::primitive_array::PrimitiveArray&lt;arrow_array::types::TimestampSecondType&gt; as arrow_arith::temporal::ExtractDatePartExt&gt;::date_part (3,084 samples, 2.67%)</title><rect x="93.7610%" y="213" width="2.6702%" height="15" fill="rgb(239,81,33)" fg:x="108293" fg:w="3084"/><text x="94.0110%" y="223.50">df..</text></g><g><title>dfbench`chrono::naive::date::NaiveDate::from_num_days_from_ce_opt (96 samples, 0.08%)</title><rect x="96.4320%" y="213" width="0.0831%" height="15" fill="rgb(213,120,34)" fg:x="111378" fg:w="96"/><text x="96.6820%" y="223.50"></text></g><g><title>dfbench`core::ops::function::FnOnce::call_once (243 samples, 0.21%)</title><rect x="96.5151%" y="213" width="0.2104%" height="15" fill="rgb(243,49,53)" fg:x="111474" fg:w="243"/><text x="96.7651%" y="223.50"></text></g><g><title>libsystem_platform.dylib`__bzero (26 samples, 0.02%)</title><rect x="96.7264%" y="213" width="0.0225%" height="15" fill="rgb(247,216,33)" fg:x="111718" fg:w="26"/><text x="96.9764%" y="223.50"></text></g><g><title>dfbench`arrow_arith::temporal::date_part (3,469 samples, 3.00%)</title><rect x="93.7497%" y="229" width="3.0035%" height="15" fill="rgb(226,26,14)" fg:x="108280" fg:w="3469"/><text x="93.9997%" y="239.50">dfb..</text></g><g><title>dfbench`arrow_buffer::util::bit_mask::set_bits (16 samples, 0.01%)</title><rect x="96.8285%" y="197" width="0.0139%" height="15" fill="rgb(215,49,53)" fg:x="111836" fg:w="16"/><text x="97.0785%" y="207.50"></text></g><g><title>dfbench`mi_heap_malloc_zero_aligned_at_generic (34 samples, 0.03%)</title><rect x="96.8424%" y="197" width="0.0294%" height="15" fill="rgb(245,162,40)" fg:x="111852" fg:w="34"/><text x="97.0924%" y="207.50"></text></g><g><title>dfbench`_mi_malloc_generic (34 samples, 0.03%)</title><rect x="96.8424%" y="181" width="0.0294%" height="15" fill="rgb(229,68,17)" fg:x="111852" fg:w="34"/><text x="97.0924%" y="191.50"></text></g><g><title>dfbench`_mi_free_delayed_block (34 samples, 0.03%)</title><rect x="96.8424%" y="165" width="0.0294%" height="15" fill="rgb(213,182,10)" fg:x="111852" fg:w="34"/><text x="97.0924%" y="175.50"></text></g><g><title>dfbench`mi_segment_free (25 samples, 0.02%)</title><rect x="96.8502%" y="149" width="0.0216%" height="15" fill="rgb(245,125,30)" fg:x="111861" fg:w="25"/><text x="97.1002%" y="159.50"></text></g><g><title>dfbench`mi_arenas_try_purge (25 samples, 0.02%)</title><rect x="96.8502%" y="133" width="0.0216%" height="15" fill="rgb(232,202,2)" fg:x="111861" fg:w="25"/><text x="97.1002%" y="143.50"></text></g><g><title>dfbench`mi_arena_purge (25 samples, 0.02%)</title><rect x="96.8502%" y="117" width="0.0216%" height="15" fill="rgb(237,140,51)" fg:x="111861" fg:w="25"/><text x="97.1002%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`madvise (25 samples, 0.02%)</title><rect x="96.8502%" y="101" width="0.0216%" height="15" fill="rgb(236,157,25)" fg:x="111861" fg:w="25"/><text x="97.1002%" y="111.50"></text></g><g><title>dfbench`arrow_cast::cast::cast_numeric_arrays (134 samples, 0.12%)</title><rect x="96.7575%" y="213" width="0.1160%" height="15" fill="rgb(219,209,0)" fg:x="111754" fg:w="134"/><text x="97.0075%" y="223.50"></text></g><g><title>libsystem_platform.dylib`__bzero (27 samples, 0.02%)</title><rect x="96.8736%" y="213" width="0.0234%" height="15" fill="rgb(240,116,54)" fg:x="111888" fg:w="27"/><text x="97.1236%" y="223.50"></text></g><g><title>dfbench`arrow_cast::cast::cast_with_options (167 samples, 0.14%)</title><rect x="96.7550%" y="229" width="0.1446%" height="15" fill="rgb(216,10,36)" fg:x="111751" fg:w="167"/><text x="97.0050%" y="239.50"></text></g><g><title>dfbench`datafusion_functions::datetime::date_part::date_part_f64 (3,657 samples, 3.17%)</title><rect x="93.7385%" y="245" width="3.1663%" height="15" fill="rgb(222,72,44)" fg:x="108267" fg:w="3657"/><text x="93.9885%" y="255.50">dfb..</text></g><g><title>dfbench`&lt;datafusion_functions::datetime::date_part::DatePartFunc as datafusion_expr::udf::ScalarUDFImpl&gt;::invoke (3,663 samples, 3.17%)</title><rect x="93.7341%" y="261" width="3.1715%" height="15" fill="rgb(232,159,9)" fg:x="108262" fg:w="3663"/><text x="93.9841%" y="271.50">dfb..</text></g><g><title>dfbench`&lt;datafusion_functions::datetime::to_timestamp::ToTimestampSecondsFunc as datafusion_expr::udf::ScalarUDFImpl&gt;::invoke (23 samples, 0.02%)</title><rect x="96.9073%" y="245" width="0.0199%" height="15" fill="rgb(210,39,32)" fg:x="111927" fg:w="23"/><text x="97.1573%" y="255.50"></text></g><g><title>dfbench`arrow_cast::cast::cast_with_options (20 samples, 0.02%)</title><rect x="96.9099%" y="229" width="0.0173%" height="15" fill="rgb(216,194,45)" fg:x="111930" fg:w="20"/><text x="97.1599%" y="239.50"></text></g><g><title>dfbench`&lt;datafusion_physical_expr::scalar_function::ScalarFunctionExpr as datafusion_physical_expr_common::physical_expr::PhysicalExpr&gt;::evaluate (32 samples, 0.03%)</title><rect x="96.9056%" y="261" width="0.0277%" height="15" fill="rgb(218,18,35)" fg:x="111925" fg:w="32"/><text x="97.1556%" y="271.50"></text></g><g><title>dfbench`&lt;datafusion_physical_expr::scalar_function::ScalarFunctionExpr as datafusion_physical_expr_common::physical_expr::PhysicalExpr&gt;::evaluate (3,712 samples, 3.21%)</title><rect x="93.7281%" y="277" width="3.2139%" height="15" fill="rgb(207,83,51)" fg:x="108255" fg:w="3712"/><text x="93.9781%" y="287.50">dfb..</text></g><g><title>dfbench`&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::next (3,721 samples, 3.22%)</title><rect x="93.7212%" y="293" width="3.2217%" height="15" fill="rgb(225,63,43)" fg:x="108247" fg:w="3721"/><text x="93.9712%" y="303.50">dfb..</text></g><g><title>dfbench`datafusion_physical_plan::aggregates::evaluate_group_by (3,728 samples, 3.23%)</title><rect x="93.7168%" y="309" width="3.2277%" height="15" fill="rgb(207,57,36)" fg:x="108242" fg:w="3728"/><text x="93.9668%" y="319.50">dfb..</text></g><g><title>dfbench`&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::next (87 samples, 0.08%)</title><rect x="96.9472%" y="293" width="0.0753%" height="15" fill="rgb(216,99,33)" fg:x="111973" fg:w="87"/><text x="97.1972%" y="303.50"></text></g><g><title>dfbench`datafusion_common::scalar::ScalarValue::to_array_of_size (79 samples, 0.07%)</title><rect x="96.9541%" y="277" width="0.0684%" height="15" fill="rgb(225,42,16)" fg:x="111981" fg:w="79"/><text x="97.2041%" y="287.50"></text></g><g><title>dfbench`arrow_array::array::primitive_array::PrimitiveArray&lt;T&gt;::from_value (79 samples, 0.07%)</title><rect x="96.9541%" y="261" width="0.0684%" height="15" fill="rgb(220,201,45)" fg:x="111981" fg:w="79"/><text x="97.2041%" y="271.50"></text></g><g><title>dfbench`datafusion_physical_plan::aggregates::evaluate_many (92 samples, 0.08%)</title><rect x="96.9446%" y="309" width="0.0797%" height="15" fill="rgb(225,33,4)" fg:x="111970" fg:w="92"/><text x="97.1946%" y="319.50"></text></g><g><title>libsystem_platform.dylib`__bzero (204 samples, 0.18%)</title><rect x="97.0407%" y="309" width="0.1766%" height="15" fill="rgb(224,33,50)" fg:x="112081" fg:w="204"/><text x="97.2907%" y="319.50"></text></g><g><title>dfbench`datafusion_physical_plan::aggregates::row_hash::GroupedHashAggregateStream::group_aggregate_batch (34,742 samples, 30.08%)</title><rect x="67.2820%" y="325" width="30.0799%" height="15" fill="rgb(246,198,51)" fg:x="77710" fg:w="34742"/><text x="67.5320%" y="335.50">dfbench`datafusion_physical_plan::aggregates::ro..</text></g><g><title>libsystem_platform.dylib`_platform_memset (167 samples, 0.14%)</title><rect x="97.2173%" y="309" width="0.1446%" height="15" fill="rgb(205,22,4)" fg:x="112285" fg:w="167"/><text x="97.4673%" y="319.50"></text></g><g><title>dfbench`&lt;datafusion_physical_plan::aggregates::row_hash::GroupedHashAggregateStream as futures_core::stream::Stream&gt;::poll_next (52,931 samples, 45.83%)</title><rect x="51.5468%" y="341" width="45.8281%" height="15" fill="rgb(206,3,8)" fg:x="59536" fg:w="52931"/><text x="51.7968%" y="351.50">dfbench`&lt;datafusion_physical_plan::aggregates::row_hash::GroupedHashAggrega..</text></g><g><title>dfbench`parking_lot::condvar::Condvar::notify_one_slow (14 samples, 0.01%)</title><rect x="97.4078%" y="277" width="0.0121%" height="15" fill="rgb(251,23,15)" fg:x="112505" fg:w="14"/><text x="97.6578%" y="287.50"></text></g><g><title>dfbench`&lt;datafusion_physical_plan::repartition::distributor_channels::SendFuture&lt;T&gt; as core::future::future::Future&gt;::poll (53 samples, 0.05%)</title><rect x="97.3749%" y="341" width="0.0459%" height="15" fill="rgb(252,88,28)" fg:x="112467" fg:w="53"/><text x="97.6249%" y="351.50"></text></g><g><title>dfbench`tokio::runtime::task::waker::wake_by_val (28 samples, 0.02%)</title><rect x="97.3965%" y="325" width="0.0242%" height="15" fill="rgb(212,127,14)" fg:x="112492" fg:w="28"/><text x="97.6465%" y="335.50"></text></g><g><title>dfbench`tokio::runtime::scheduler::multi_thread::worker::_&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::schedule_task (28 samples, 0.02%)</title><rect x="97.3965%" y="309" width="0.0242%" height="15" fill="rgb(247,145,37)" fg:x="112492" fg:w="28"/><text x="97.6465%" y="319.50"></text></g><g><title>dfbench`tokio::runtime::scheduler::multi_thread::worker::_&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::schedule_task::_{{closure}} (26 samples, 0.02%)</title><rect x="97.3982%" y="293" width="0.0225%" height="15" fill="rgb(209,117,53)" fg:x="112494" fg:w="26"/><text x="97.6482%" y="303.50"></text></g><g><title>dfbench`&lt;str as datafusion_common::hash_utils::HashValue&gt;::hash_one (1,014 samples, 0.88%)</title><rect x="97.4208%" y="341" width="0.8779%" height="15" fill="rgb(212,90,42)" fg:x="112520" fg:w="1014"/><text x="97.6708%" y="351.50"></text></g><g><title>dfbench`mi_free_block_mt (62 samples, 0.05%)</title><rect x="98.3039%" y="277" width="0.0537%" height="15" fill="rgb(218,164,37)" fg:x="113540" fg:w="62"/><text x="98.5539%" y="287.50"></text></g><g><title>dfbench`_mi_os_reset (62 samples, 0.05%)</title><rect x="98.3039%" y="261" width="0.0537%" height="15" fill="rgb(246,65,34)" fg:x="113540" fg:w="62"/><text x="98.5539%" y="271.50"></text></g><g><title>libsystem_kernel.dylib`madvise (62 samples, 0.05%)</title><rect x="98.3039%" y="245" width="0.0537%" height="15" fill="rgb(231,100,33)" fg:x="113540" fg:w="62"/><text x="98.5539%" y="255.50"></text></g><g><title>dfbench`alloc::sync::Arc&lt;T,A&gt;::drop_slow (69 samples, 0.06%)</title><rect x="98.3039%" y="293" width="0.0597%" height="15" fill="rgb(228,126,14)" fg:x="113540" fg:w="69"/><text x="98.5539%" y="303.50"></text></g><g><title>dfbench`core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;arrow_buffer::buffer::immutable::Buffer&gt;&gt; (13 samples, 0.01%)</title><rect x="98.3636%" y="293" width="0.0113%" height="15" fill="rgb(215,173,21)" fg:x="113609" fg:w="13"/><text x="98.6136%" y="303.50"></text></g><g><title>dfbench`core::ptr::drop_in_place&lt;arrow_array::array::byte_view_array::GenericByteViewArray&lt;arrow_array::types::BinaryViewType&gt;&gt; (84 samples, 0.07%)</title><rect x="98.3030%" y="309" width="0.0727%" height="15" fill="rgb(210,6,40)" fg:x="113539" fg:w="84"/><text x="98.5530%" y="319.50"></text></g><g><title>dfbench`mi_free_block_mt (116 samples, 0.10%)</title><rect x="98.3775%" y="277" width="0.1004%" height="15" fill="rgb(212,48,18)" fg:x="113625" fg:w="116"/><text x="98.6275%" y="287.50"></text></g><g><title>dfbench`_mi_os_reset (116 samples, 0.10%)</title><rect x="98.3775%" y="261" width="0.1004%" height="15" fill="rgb(230,214,11)" fg:x="113625" fg:w="116"/><text x="98.6275%" y="271.50"></text></g><g><title>libsystem_kernel.dylib`madvise (116 samples, 0.10%)</title><rect x="98.3775%" y="245" width="0.1004%" height="15" fill="rgb(254,105,39)" fg:x="113625" fg:w="116"/><text x="98.6275%" y="255.50"></text></g><g><title>dfbench`alloc::sync::Arc&lt;T,A&gt;::drop_slow (137 samples, 0.12%)</title><rect x="98.3775%" y="293" width="0.1186%" height="15" fill="rgb(245,158,5)" fg:x="113625" fg:w="137"/><text x="98.6275%" y="303.50"></text></g><g><title>dfbench`mi_segment_free (21 samples, 0.02%)</title><rect x="98.4779%" y="277" width="0.0182%" height="15" fill="rgb(249,208,11)" fg:x="113741" fg:w="21"/><text x="98.7279%" y="287.50"></text></g><g><title>dfbench`mi_arenas_try_purge (21 samples, 0.02%)</title><rect x="98.4779%" y="261" width="0.0182%" height="15" fill="rgb(210,39,28)" fg:x="113741" fg:w="21"/><text x="98.7279%" y="271.50"></text></g><g><title>dfbench`mi_arena_purge (21 samples, 0.02%)</title><rect x="98.4779%" y="245" width="0.0182%" height="15" fill="rgb(211,56,53)" fg:x="113741" fg:w="21"/><text x="98.7279%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`madvise (21 samples, 0.02%)</title><rect x="98.4779%" y="229" width="0.0182%" height="15" fill="rgb(226,201,30)" fg:x="113741" fg:w="21"/><text x="98.7279%" y="239.50"></text></g><g><title>dfbench`core::ptr::drop_in_place&lt;arrow_array::array::primitive_array::PrimitiveArray&lt;arrow_array::types::Int8Type&gt;&gt; (141 samples, 0.12%)</title><rect x="98.3757%" y="309" width="0.1221%" height="15" fill="rgb(239,101,34)" fg:x="113623" fg:w="141"/><text x="98.6257%" y="319.50"></text></g><g><title>dfbench`alloc::sync::Arc&lt;T,A&gt;::drop_slow (231 samples, 0.20%)</title><rect x="98.3021%" y="325" width="0.2000%" height="15" fill="rgb(226,209,5)" fg:x="113538" fg:w="231"/><text x="98.5521%" y="335.50"></text></g><g><title>dfbench`core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::sync::Arc&lt;dyn arrow_array::array::Array&gt;&gt;&gt; (234 samples, 0.20%)</title><rect x="98.3021%" y="341" width="0.2026%" height="15" fill="rgb(250,105,47)" fg:x="113538" fg:w="234"/><text x="98.5521%" y="351.50"></text></g><g><title>dfbench`core::ptr::drop_in_place&lt;parquet::file::metadata::ColumnChunkMetaData&gt; (19 samples, 0.02%)</title><rect x="98.5065%" y="213" width="0.0165%" height="15" fill="rgb(230,72,3)" fg:x="113774" fg:w="19"/><text x="98.7565%" y="223.50"></text></g><g><title>dfbench`mi_free_block_delayed_mt (13 samples, 0.01%)</title><rect x="98.5307%" y="213" width="0.0113%" height="15" fill="rgb(232,218,39)" fg:x="113802" fg:w="13"/><text x="98.7807%" y="223.50"></text></g><g><title>dfbench`core::ptr::drop_in_place&lt;datafusion_physical_plan::aggregates::row_hash::GroupedHashAggregateStream&gt; (50 samples, 0.04%)</title><rect x="98.5047%" y="341" width="0.0433%" height="15" fill="rgb(248,166,6)" fg:x="113772" fg:w="50"/><text x="98.7547%" y="351.50"></text></g><g><title>dfbench`core::ptr::drop_in_place&lt;datafusion::datasource::physical_plan::file_stream::FileStream&lt;datafusion::datasource::physical_plan::parquet::opener::ParquetOpener&gt;&gt; (50 samples, 0.04%)</title><rect x="98.5047%" y="325" width="0.0433%" height="15" fill="rgb(247,89,20)" fg:x="113772" fg:w="50"/><text x="98.7547%" y="335.50"></text></g><g><title>dfbench`core::ptr::drop_in_place&lt;datafusion::datasource::physical_plan::file_stream::FileStreamState&gt; (50 samples, 0.04%)</title><rect x="98.5047%" y="309" width="0.0433%" height="15" fill="rgb(248,130,54)" fg:x="113772" fg:w="50"/><text x="98.7547%" y="319.50"></text></g><g><title>dfbench`core::ptr::drop_in_place&lt;futures_util::stream::stream::map::Map&lt;futures_util::stream::try_stream::MapErr&lt;parquet::arrow::async_reader::ParquetRecordBatchStream&lt;alloc::boxed::Box&lt;dyn parquet::arrow::async_reader::AsyncFileReader&gt;&gt;,&lt;datafusion::datasource::physical_plan::parquet::opener::ParquetOpener as datafusion::datasource::physical_plan::file_stream::FileOpener&gt;::open::{{closure}}::{{closure}}&gt;,&lt;datafusion::datasource::physical_plan::parquet::opener::ParquetOpener as datafusion::datasource::physical_plan::file_stream::FileOpener&gt;::open::{{closure}}::{{closure}}&gt;&gt; (50 samples, 0.04%)</title><rect x="98.5047%" y="293" width="0.0433%" height="15" fill="rgb(234,196,4)" fg:x="113772" fg:w="50"/><text x="98.7547%" y="303.50"></text></g><g><title>dfbench`core::ptr::drop_in_place&lt;parquet::arrow::async_reader::ReaderFactory&lt;alloc::boxed::Box&lt;dyn parquet::arrow::async_reader::AsyncFileReader&gt;&gt;&gt; (50 samples, 0.04%)</title><rect x="98.5047%" y="277" width="0.0433%" height="15" fill="rgb(250,143,31)" fg:x="113772" fg:w="50"/><text x="98.7547%" y="287.50"></text></g><g><title>dfbench`alloc::sync::Arc&lt;T,A&gt;::drop_slow (50 samples, 0.04%)</title><rect x="98.5047%" y="261" width="0.0433%" height="15" fill="rgb(211,110,34)" fg:x="113772" fg:w="50"/><text x="98.7547%" y="271.50"></text></g><g><title>dfbench`core::ptr::drop_in_place&lt;parquet::file::metadata::ParquetMetaData&gt; (50 samples, 0.04%)</title><rect x="98.5047%" y="245" width="0.0433%" height="15" fill="rgb(215,124,48)" fg:x="113772" fg:w="50"/><text x="98.7547%" y="255.50"></text></g><g><title>dfbench`core::ptr::drop_in_place&lt;parquet::file::metadata::RowGroupMetaData&gt; (49 samples, 0.04%)</title><rect x="98.5056%" y="229" width="0.0424%" height="15" fill="rgb(216,46,13)" fg:x="113773" fg:w="49"/><text x="98.7556%" y="239.50"></text></g><g><title>dfbench`datafusion_common::hash_utils::create_hashes (1,368 samples, 1.18%)</title><rect x="98.5524%" y="341" width="1.1844%" height="15" fill="rgb(205,184,25)" fg:x="113827" fg:w="1368"/><text x="98.8024%" y="351.50"></text></g><g><title>dfbench`_mi_free_delayed_block (50 samples, 0.04%)</title><rect x="99.7532%" y="309" width="0.0433%" height="15" fill="rgb(228,1,10)" fg:x="115214" fg:w="50"/><text x="100.0032%" y="319.50"></text></g><g><title>dfbench`mi_find_page (14 samples, 0.01%)</title><rect x="99.8000%" y="309" width="0.0121%" height="15" fill="rgb(213,116,27)" fg:x="115268" fg:w="14"/><text x="100.0500%" y="319.50"></text></g><g><title>dfbench`_mi_malloc_generic (90 samples, 0.08%)</title><rect x="99.7489%" y="325" width="0.0779%" height="15" fill="rgb(241,95,50)" fg:x="115209" fg:w="90"/><text x="99.9989%" y="335.50"></text></g><g><title>dfbench`mi_page_free_list_extend (17 samples, 0.01%)</title><rect x="99.8121%" y="309" width="0.0147%" height="15" fill="rgb(238,48,32)" fg:x="115282" fg:w="17"/><text x="100.0621%" y="319.50"></text></g><g><title>dfbench`mi_heap_malloc_zero_aligned_at_generic (95 samples, 0.08%)</title><rect x="99.7472%" y="341" width="0.0823%" height="15" fill="rgb(235,113,49)" fg:x="115207" fg:w="95"/><text x="99.9972%" y="351.50"></text></g><g><title>libsystem_c.dylib`clock_gettime (101 samples, 0.09%)</title><rect x="99.8364%" y="325" width="0.0874%" height="15" fill="rgb(205,127,43)" fg:x="115310" fg:w="101"/><text x="100.0864%" y="335.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (99 samples, 0.09%)</title><rect x="99.8381%" y="309" width="0.0857%" height="15" fill="rgb(250,162,2)" fg:x="115312" fg:w="99"/><text x="100.0881%" y="319.50"></text></g><g><title>dfbench`std::sys::pal::unix::time::Timespec::now (104 samples, 0.09%)</title><rect x="99.8346%" y="341" width="0.0900%" height="15" fill="rgb(220,13,41)" fg:x="115308" fg:w="104"/><text x="100.0846%" y="351.50"></text></g><g><title>dfbench`datafusion_physical_plan::repartition::RepartitionExec::pull_from_input::_{{closure}} (59,546 samples, 51.56%)</title><rect x="48.3718%" y="357" width="51.5554%" height="15" fill="rgb(249,221,25)" fg:x="55869" fg:w="59546"/><text x="48.6218%" y="367.50">dfbench`datafusion_physical_plan::repartition::RepartitionExec::pull_from_input::_{{c..</text></g><g><title>dfbench`tokio::runtime::task::raw::poll (101,235 samples, 87.65%)</title><rect x="12.2988%" y="373" width="87.6501%" height="15" fill="rgb(215,208,19)" fg:x="14205" fg:w="101235"/><text x="12.5488%" y="383.50">dfbench`tokio::runtime::task::raw::poll</text></g><g><title>libsystem_platform.dylib`__bzero (15 samples, 0.01%)</title><rect x="99.9359%" y="357" width="0.0130%" height="15" fill="rgb(236,175,2)" fg:x="115425" fg:w="15"/><text x="100.1859%" y="367.50"></text></g><g><title>dfbench`tokio::runtime::scheduler::multi_thread::worker::Context::run_task (101,253 samples, 87.67%)</title><rect x="12.2841%" y="389" width="87.6657%" height="15" fill="rgb(241,52,2)" fg:x="14188" fg:w="101253"/><text x="12.5341%" y="399.50">dfbench`tokio::runtime::scheduler::multi_thread::worker::Context::run_task</text></g><g><title>dfbench`tokio::runtime::task::raw::poll (103,128 samples, 89.29%)</title><rect x="10.6884%" y="405" width="89.2891%" height="15" fill="rgb(248,140,14)" fg:x="12345" fg:w="103128"/><text x="10.9384%" y="415.50">dfbench`tokio::runtime::task::raw::poll</text></g><g><title>libsystem_kernel.dylib`close (26 samples, 0.02%)</title><rect x="99.9550%" y="389" width="0.0225%" height="15" fill="rgb(253,22,42)" fg:x="115447" fg:w="26"/><text x="100.2050%" y="399.50"></text></g><g><title>dfbench`std::sys::pal::unix::thread::Thread::new::thread_start (103,145 samples, 89.30%)</title><rect x="10.6754%" y="453" width="89.3038%" height="15" fill="rgb(234,61,47)" fg:x="12330" fg:w="103145"/><text x="10.9254%" y="463.50">dfbench`std::sys::pal::unix::thread::Thread::new::thread_start</text></g><g><title>dfbench`core::ops::function::FnOnce::call_once{{vtable.shim}} (103,145 samples, 89.30%)</title><rect x="10.6754%" y="437" width="89.3038%" height="15" fill="rgb(208,226,15)" fg:x="12330" fg:w="103145"/><text x="10.9254%" y="447.50">dfbench`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>dfbench`std::sys_common::backtrace::__rust_begin_short_backtrace (103,145 samples, 89.30%)</title><rect x="10.6754%" y="421" width="89.3038%" height="15" fill="rgb(217,221,4)" fg:x="12330" fg:w="103145"/><text x="10.9254%" y="431.50">dfbench`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>dfbench`_mi_free_delayed_block (15 samples, 0.01%)</title><rect x="99.9835%" y="389" width="0.0130%" height="15" fill="rgb(212,174,34)" fg:x="115480" fg:w="15"/><text x="100.2335%" y="399.50"></text></g><g><title>dfbench`_mi_page_free (15 samples, 0.01%)</title><rect x="99.9835%" y="373" width="0.0130%" height="15" fill="rgb(253,83,4)" fg:x="115480" fg:w="15"/><text x="100.2335%" y="383.50"></text></g><g><title>dfbench`mi_segment_page_clear (15 samples, 0.01%)</title><rect x="99.9835%" y="357" width="0.0130%" height="15" fill="rgb(250,195,49)" fg:x="115480" fg:w="15"/><text x="100.2335%" y="367.50"></text></g><g><title>dfbench`mi_segment_span_free_coalesce (15 samples, 0.01%)</title><rect x="99.9835%" y="341" width="0.0130%" height="15" fill="rgb(241,192,25)" fg:x="115480" fg:w="15"/><text x="100.2335%" y="351.50"></text></g><g><title>dfbench`mi_segment_span_free (15 samples, 0.01%)</title><rect x="99.9835%" y="325" width="0.0130%" height="15" fill="rgb(208,124,10)" fg:x="115480" fg:w="15"/><text x="100.2335%" y="335.50"></text></g><g><title>dfbench`mi_segment_try_purge (15 samples, 0.01%)</title><rect x="99.9835%" y="309" width="0.0130%" height="15" fill="rgb(222,33,0)" fg:x="115480" fg:w="15"/><text x="100.2335%" y="319.50"></text></g><g><title>dfbench`mi_segment_purge (15 samples, 0.01%)</title><rect x="99.9835%" y="293" width="0.0130%" height="15" fill="rgb(234,209,28)" fg:x="115480" fg:w="15"/><text x="100.2335%" y="303.50"></text></g><g><title>libsystem_kernel.dylib`madvise (15 samples, 0.01%)</title><rect x="99.9835%" y="277" width="0.0130%" height="15" fill="rgb(224,11,23)" fg:x="115480" fg:w="15"/><text x="100.2335%" y="287.50"></text></g><g><title>dfbench`mi_heap_collect_ex (19 samples, 0.02%)</title><rect x="99.9827%" y="405" width="0.0165%" height="15" fill="rgb(232,99,1)" fg:x="115479" fg:w="19"/><text x="100.2327%" y="415.50"></text></g><g><title>all (115,499 samples, 100%)</title><rect x="0.0000%" y="501" width="100.0000%" height="15" fill="rgb(237,95,45)" fg:x="0" fg:w="115499"/><text x="0.2500%" y="511.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (103,169 samples, 89.32%)</title><rect x="10.6754%" y="485" width="89.3246%" height="15" fill="rgb(208,109,11)" fg:x="12330" fg:w="103169"/><text x="10.9254%" y="495.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (103,169 samples, 89.32%)</title><rect x="10.6754%" y="469" width="89.3246%" height="15" fill="rgb(216,190,48)" fg:x="12330" fg:w="103169"/><text x="10.9254%" y="479.50">libsystem_pthread.dylib`_pthread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_exit (23 samples, 0.02%)</title><rect x="99.9801%" y="453" width="0.0199%" height="15" fill="rgb(251,171,36)" fg:x="115476" fg:w="23"/><text x="100.2301%" y="463.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_tsd_cleanup (20 samples, 0.02%)</title><rect x="99.9827%" y="437" width="0.0173%" height="15" fill="rgb(230,62,22)" fg:x="115479" fg:w="20"/><text x="100.2327%" y="447.50"></text></g><g><title>dfbench`_mi_thread_done (20 samples, 0.02%)</title><rect x="99.9827%" y="421" width="0.0173%" height="15" fill="rgb(225,114,35)" fg:x="115479" fg:w="20"/><text x="100.2327%" y="431.50"></text></g></svg></svg>