<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="566" onload="init(evt)" viewBox="0 0 1200 566" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="566" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="549.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="549.00"> </text><svg id="frames" x="10" width="1180" total_samples="268154"><g><title>dfbench`dfbench::main (1,120 samples, 0.42%)</title><rect x="0.0007%" y="453" width="0.4177%" height="15" fill="rgb(227,0,7)" fg:x="2" fg:w="1120"/><text x="0.2507%" y="463.50"></text></g><g><title>dfbench`dfbench::main::_{{closure}} (379 samples, 0.14%)</title><rect x="0.4184%" y="453" width="0.1413%" height="15" fill="rgb(217,0,24)" fg:x="1122" fg:w="379"/><text x="0.6684%" y="463.50"></text></g><g><title>dfbench`datafusion_physical_plan::execution_plan::collect::_{{closure}} (123 samples, 0.05%)</title><rect x="0.5601%" y="437" width="0.0459%" height="15" fill="rgb(221,193,54)" fg:x="1502" fg:w="123"/><text x="0.8101%" y="447.50"></text></g><g><title>dfbench`datafusion_physical_plan::common::collect::_{{closure}} (103 samples, 0.04%)</title><rect x="1.1713%" y="421" width="0.0384%" height="15" fill="rgb(248,212,6)" fg:x="3141" fg:w="103"/><text x="1.4213%" y="431.50"></text></g><g><title>dfbench`&lt;futures_util::stream::try_stream::try_collect::TryCollect&lt;St,C&gt; as core::future::future::Future&gt;::poll (199 samples, 0.07%)</title><rect x="1.4074%" y="405" width="0.0742%" height="15" fill="rgb(208,68,35)" fg:x="3774" fg:w="199"/><text x="1.6574%" y="415.50"></text></g><g><title>dfbench`&lt;datafusion_physical_plan::sorts::merge::SortPreservingMergeStream&lt;C&gt; as futures_core::stream::Stream&gt;::poll_next (137 samples, 0.05%)</title><rect x="1.5946%" y="389" width="0.0511%" height="15" fill="rgb(232,128,0)" fg:x="4276" fg:w="137"/><text x="1.8446%" y="399.50"></text></g><g><title>dfbench`&lt;alloc::collections::vec_deque::VecDeque&lt;T,A&gt; as core::clone::Clone&gt;::clone (430 samples, 0.16%)</title><rect x="1.8694%" y="373" width="0.1604%" height="15" fill="rgb(207,160,47)" fg:x="5013" fg:w="430"/><text x="2.1194%" y="383.50"></text></g><g><title>dfbench`mi_malloc_aligned (500 samples, 0.19%)</title><rect x="4.2021%" y="341" width="0.1865%" height="15" fill="rgb(228,23,34)" fg:x="11268" fg:w="500"/><text x="4.4521%" y="351.50"></text></g><g><title>dfbench`&lt;alloc::collections::vec_deque::VecDeque&lt;T,A&gt; as core::clone::Clone&gt;::clone (5,401 samples, 2.01%)</title><rect x="2.4314%" y="357" width="2.0141%" height="15" fill="rgb(218,30,26)" fg:x="6520" fg:w="5401"/><text x="2.6814%" y="367.50">d..</text></g><g><title>libdyld.dylib`tlv_get_addr (153 samples, 0.06%)</title><rect x="4.3885%" y="341" width="0.0571%" height="15" fill="rgb(220,122,19)" fg:x="11768" fg:w="153"/><text x="4.6385%" y="351.50"></text></g><g><title>dfbench`&lt;datafusion_physical_plan::sorts::stream::FieldCursorStream&lt;T&gt; as datafusion_physical_plan::sorts::stream::PartitionedStream&gt;::poll_next (257 samples, 0.10%)</title><rect x="4.4456%" y="357" width="0.0958%" height="15" fill="rgb(250,228,42)" fg:x="11921" fg:w="257"/><text x="4.6956%" y="367.50"></text></g><g><title>dfbench`datafusion_physical_plan::metrics::baseline::BaselineMetrics::record_poll (406 samples, 0.15%)</title><rect x="4.5414%" y="357" width="0.1514%" height="15" fill="rgb(240,193,28)" fg:x="12178" fg:w="406"/><text x="4.7914%" y="367.50"></text></g><g><title>dfbench`&lt;datafusion_physical_plan::stream::RecordBatchStreamAdapter&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (131 samples, 0.05%)</title><rect x="4.9315%" y="325" width="0.0489%" height="15" fill="rgb(216,20,37)" fg:x="13224" fg:w="131"/><text x="5.1815%" y="335.50"></text></g><g><title>dfbench`&lt;futures_util::stream::select::Select&lt;St1,St2&gt; as futures_core::stream::Stream&gt;::poll_next (176 samples, 0.07%)</title><rect x="4.9803%" y="325" width="0.0656%" height="15" fill="rgb(206,188,39)" fg:x="13355" fg:w="176"/><text x="5.2303%" y="335.50"></text></g><g><title>dfbench`&lt;futures_util::stream::stream::filter_map::FilterMap&lt;St,Fut,F&gt; as futures_core::stream::Stream&gt;::poll_next (1,736 samples, 0.65%)</title><rect x="5.4719%" y="293" width="0.6474%" height="15" fill="rgb(217,207,13)" fg:x="14673" fg:w="1736"/><text x="5.7219%" y="303.50"></text></g><g><title>dfbench`tokio::task::join_set::JoinSet&lt;T&gt;::join_next::_{{closure}} (889 samples, 0.33%)</title><rect x="5.7877%" y="277" width="0.3315%" height="15" fill="rgb(231,73,38)" fg:x="15520" fg:w="889"/><text x="6.0377%" y="287.50"></text></g><g><title>dfbench`tokio::runtime::park::clone (220 samples, 0.08%)</title><rect x="6.7454%" y="277" width="0.0820%" height="15" fill="rgb(225,20,46)" fg:x="18088" fg:w="220"/><text x="6.9954%" y="287.50"></text></g><g><title>dfbench`tokio::runtime::park::drop_waker (192 samples, 0.07%)</title><rect x="6.8274%" y="277" width="0.0716%" height="15" fill="rgb(210,31,41)" fg:x="18308" fg:w="192"/><text x="7.0774%" y="287.50"></text></g><g><title>dfbench`tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (1,351 samples, 0.50%)</title><rect x="6.8990%" y="277" width="0.5038%" height="15" fill="rgb(221,200,47)" fg:x="18500" fg:w="1351"/><text x="7.1490%" y="287.50"></text></g><g><title>dfbench`&lt;futures_util::stream::unfold::Unfold&lt;T,F,Fut&gt; as futures_core::stream::Stream&gt;::poll_next (4,020 samples, 1.50%)</title><rect x="6.1192%" y="293" width="1.4991%" height="15" fill="rgb(226,26,5)" fg:x="16409" fg:w="4020"/><text x="6.3692%" y="303.50"></text></g><g><title>dfbench`tokio::sync::task::atomic_waker::AtomicWaker::register_by_ref (578 samples, 0.22%)</title><rect x="7.4028%" y="277" width="0.2155%" height="15" fill="rgb(249,33,26)" fg:x="19851" fg:w="578"/><text x="7.6528%" y="287.50"></text></g><g><title>dfbench`tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (256 samples, 0.10%)</title><rect x="7.6184%" y="293" width="0.0955%" height="15" fill="rgb(235,183,28)" fg:x="20429" fg:w="256"/><text x="7.8684%" y="303.50"></text></g><g><title>dfbench`tokio::sync::task::atomic_waker::AtomicWaker::register_by_ref (330 samples, 0.12%)</title><rect x="7.7139%" y="293" width="0.1231%" height="15" fill="rgb(221,5,38)" fg:x="20685" fg:w="330"/><text x="7.9639%" y="303.50"></text></g><g><title>dfbench`tokio::task::join_set::JoinSet&lt;T&gt;::join_next::_{{closure}} (380 samples, 0.14%)</title><rect x="7.8369%" y="293" width="0.1417%" height="15" fill="rgb(247,18,42)" fg:x="21015" fg:w="380"/><text x="8.0869%" y="303.50"></text></g><g><title>dfbench`&lt;futures_util::stream::select::Select&lt;St1,St2&gt; as futures_core::stream::Stream&gt;::poll_next (8,218 samples, 3.06%)</title><rect x="5.1571%" y="309" width="3.0647%" height="15" fill="rgb(241,131,45)" fg:x="13829" fg:w="8218"/><text x="5.4071%" y="319.50">dfb..</text></g><g><title>libdyld.dylib`tlv_get_addr (652 samples, 0.24%)</title><rect x="7.9786%" y="293" width="0.2431%" height="15" fill="rgb(249,31,29)" fg:x="21395" fg:w="652"/><text x="8.2286%" y="303.50"></text></g><g><title>dfbench`&lt;futures_util::stream::stream::filter_map::FilterMap&lt;St,Fut,F&gt; as futures_core::stream::Stream&gt;::poll_next (457 samples, 0.17%)</title><rect x="8.2218%" y="309" width="0.1704%" height="15" fill="rgb(225,111,53)" fg:x="22047" fg:w="457"/><text x="8.4718%" y="319.50"></text></g><g><title>dfbench`&lt;futures_util::stream::unfold::Unfold&lt;T,F,Fut&gt; as futures_core::stream::Stream&gt;::poll_next (289 samples, 0.11%)</title><rect x="8.3922%" y="309" width="0.1078%" height="15" fill="rgb(238,160,17)" fg:x="22504" fg:w="289"/><text x="8.6422%" y="319.50"></text></g><g><title>dfbench`&lt;datafusion_physical_plan::sorts::stream::FieldCursorStream&lt;T&gt; as datafusion_physical_plan::sorts::stream::PartitionedStream&gt;::poll_next (9,953 samples, 3.71%)</title><rect x="4.8461%" y="341" width="3.7117%" height="15" fill="rgb(214,148,48)" fg:x="12995" fg:w="9953"/><text x="5.0961%" y="351.50">dfbe..</text></g><g><title>dfbench`datafusion_physical_plan::sorts::stream::FusedStreams::poll_next (9,417 samples, 3.51%)</title><rect x="5.0460%" y="325" width="3.5118%" height="15" fill="rgb(232,36,49)" fg:x="13531" fg:w="9417"/><text x="5.2960%" y="335.50">dfb..</text></g><g><title>dfbench`futures_util::stream::select::select::round_robin (155 samples, 0.06%)</title><rect x="8.5000%" y="309" width="0.0578%" height="15" fill="rgb(209,103,24)" fg:x="22793" fg:w="155"/><text x="8.7500%" y="319.50"></text></g><g><title>dfbench`datafusion_physical_plan::sorts::merge::SortPreservingMergeStream&lt;C&gt;::maybe_poll_stream (10,839 samples, 4.04%)</title><rect x="4.6928%" y="357" width="4.0421%" height="15" fill="rgb(229,88,8)" fg:x="12584" fg:w="10839"/><text x="4.9428%" y="367.50">dfbe..</text></g><g><title>dfbench`datafusion_physical_plan::sorts::stream::FusedStreams::poll_next (475 samples, 0.18%)</title><rect x="8.5578%" y="341" width="0.1771%" height="15" fill="rgb(213,181,19)" fg:x="22948" fg:w="475"/><text x="8.8078%" y="351.50"></text></g><g><title>dfbench`&lt;datafusion_physical_plan::sorts::merge::SortPreservingMergeStream&lt;C&gt; as futures_core::stream::Stream&gt;::poll_next (18,120 samples, 6.76%)</title><rect x="2.0298%" y="373" width="6.7573%" height="15" fill="rgb(254,191,54)" fg:x="5443" fg:w="18120"/><text x="2.2798%" y="383.50">dfbench`&lt;..</text></g><g><title>dfbench`tokio::runtime::park::wake_by_ref (131 samples, 0.05%)</title><rect x="8.7383%" y="357" width="0.0489%" height="15" fill="rgb(241,83,37)" fg:x="23432" fg:w="131"/><text x="8.9883%" y="367.50"></text></g><g><title>dfbench`datafusion_physical_plan::metrics::baseline::BaselineMetrics::record_poll (154 samples, 0.06%)</title><rect x="8.7871%" y="373" width="0.0574%" height="15" fill="rgb(233,36,39)" fg:x="23563" fg:w="154"/><text x="9.0371%" y="383.50"></text></g><g><title>dfbench`datafusion_physical_plan::sorts::merge::SortPreservingMergeStream&lt;C&gt;::maybe_poll_stream (273 samples, 0.10%)</title><rect x="8.8445%" y="373" width="0.1018%" height="15" fill="rgb(226,3,54)" fg:x="23717" fg:w="273"/><text x="9.0945%" y="383.50"></text></g><g><title>dfbench`mi_free (572 samples, 0.21%)</title><rect x="8.9464%" y="373" width="0.2133%" height="15" fill="rgb(245,192,40)" fg:x="23990" fg:w="572"/><text x="9.1964%" y="383.50"></text></g><g><title>dfbench`datafusion_physical_plan::common::collect::_{{closure}} (20,708 samples, 7.72%)</title><rect x="1.4816%" y="405" width="7.7224%" height="15" fill="rgb(238,167,29)" fg:x="3973" fg:w="20708"/><text x="1.7316%" y="415.50">dfbench`dat..</text></g><g><title>dfbench`&lt;futures_util::stream::try_stream::try_collect::TryCollect&lt;St,C&gt; as core::future::future::Future&gt;::poll (20,268 samples, 7.56%)</title><rect x="1.6457%" y="389" width="7.5583%" height="15" fill="rgb(232,182,51)" fg:x="4413" fg:w="20268"/><text x="1.8957%" y="399.50">dfbench`&lt;f..</text></g><g><title>dfbench`tokio::runtime::park::wake_by_ref (119 samples, 0.04%)</title><rect x="9.1597%" y="373" width="0.0444%" height="15" fill="rgb(231,60,39)" fg:x="24562" fg:w="119"/><text x="9.4097%" y="383.50"></text></g><g><title>dfbench`datafusion_physical_plan::execution_plan::collect::_{{closure}} (21,438 samples, 7.99%)</title><rect x="1.2098%" y="421" width="7.9947%" height="15" fill="rgb(208,69,12)" fg:x="3244" fg:w="21438"/><text x="1.4598%" y="431.50">dfbench`dat..</text></g><g><title>dfbench`dfbench::main::_{{closure}} (23,058 samples, 8.60%)</title><rect x="0.6060%" y="437" width="8.5988%" height="15" fill="rgb(235,93,37)" fg:x="1625" fg:w="23058"/><text x="0.8560%" y="447.50">dfbench`dfbe..</text></g><g><title>dfbench`dfbench::main (23,521 samples, 8.77%)</title><rect x="0.5598%" y="453" width="8.7715%" height="15" fill="rgb(213,116,39)" fg:x="1501" fg:w="23521"/><text x="0.8098%" y="463.50">dfbench`dfbe..</text></g><g><title>dfbench`tokio::runtime::park::Inner::park (339 samples, 0.13%)</title><rect x="9.2048%" y="437" width="0.1264%" height="15" fill="rgb(222,207,29)" fg:x="24683" fg:w="339"/><text x="9.4548%" y="447.50"></text></g><g><title>dfbench`main (25,791 samples, 9.62%)</title><rect x="0.0007%" y="485" width="9.6180%" height="15" fill="rgb(206,96,30)" fg:x="2" fg:w="25791"/><text x="0.2507%" y="495.50">dfbench`main</text></g><g><title>dfbench`std::sys::backtrace::__rust_begin_short_backtrace (25,791 samples, 9.62%)</title><rect x="0.0007%" y="469" width="9.6180%" height="15" fill="rgb(218,138,4)" fg:x="2" fg:w="25791"/><text x="0.2507%" y="479.50">dfbench`std::s..</text></g><g><title>libdyld.dylib`tlv_get_addr (767 samples, 0.29%)</title><rect x="9.3327%" y="453" width="0.2860%" height="15" fill="rgb(250,191,14)" fg:x="25026" fg:w="767"/><text x="9.5827%" y="463.50"></text></g><g><title>dfbench`mi_arenas_try_purge (42 samples, 0.02%)</title><rect x="9.6187%" y="421" width="0.0157%" height="15" fill="rgb(239,60,40)" fg:x="25793" fg:w="42"/><text x="9.8687%" y="431.50"></text></g><g><title>dfbench`mi_arena_purge (42 samples, 0.02%)</title><rect x="9.6187%" y="405" width="0.0157%" height="15" fill="rgb(206,27,48)" fg:x="25793" fg:w="42"/><text x="9.8687%" y="415.50"></text></g><g><title>libsystem_kernel.dylib`madvise (42 samples, 0.02%)</title><rect x="9.6187%" y="389" width="0.0157%" height="15" fill="rgb(225,35,8)" fg:x="25793" fg:w="42"/><text x="9.8687%" y="399.50"></text></g><g><title>libsystem_c.dylib`exit (43 samples, 0.02%)</title><rect x="9.6187%" y="469" width="0.0160%" height="15" fill="rgb(250,213,24)" fg:x="25793" fg:w="43"/><text x="9.8687%" y="479.50"></text></g><g><title>libsystem_c.dylib`__cxa_finalize_ranges (43 samples, 0.02%)</title><rect x="9.6187%" y="453" width="0.0160%" height="15" fill="rgb(247,123,22)" fg:x="25793" fg:w="43"/><text x="9.8687%" y="463.50"></text></g><g><title>dfbench`mi_process_done (43 samples, 0.02%)</title><rect x="9.6187%" y="437" width="0.0160%" height="15" fill="rgb(231,138,38)" fg:x="25793" fg:w="43"/><text x="9.8687%" y="447.50"></text></g><g><title>dyld`start (25,835 samples, 9.63%)</title><rect x="0.0007%" y="501" width="9.6344%" height="15" fill="rgb(231,145,46)" fg:x="2" fg:w="25835"/><text x="0.2507%" y="511.50">dyld`start</text></g><g><title>libdyld.dylib`dyld4::LibSystemHelpers::getenv (44 samples, 0.02%)</title><rect x="9.6187%" y="485" width="0.0164%" height="15" fill="rgb(251,118,11)" fg:x="25793" fg:w="44"/><text x="9.8687%" y="495.50"></text></g><g><title>libsystem_kernel.dylib`__exit (66 samples, 0.02%)</title><rect x="9.6351%" y="501" width="0.0246%" height="15" fill="rgb(217,147,25)" fg:x="25837" fg:w="66"/><text x="9.8851%" y="511.50"></text></g><g><title>dfbench`mi_segment_try_purge (30 samples, 0.01%)</title><rect x="9.6680%" y="261" width="0.0112%" height="15" fill="rgb(247,81,37)" fg:x="25925" fg:w="30"/><text x="9.9180%" y="271.50"></text></g><g><title>dfbench`mi_segment_purge (30 samples, 0.01%)</title><rect x="9.6680%" y="245" width="0.0112%" height="15" fill="rgb(209,12,38)" fg:x="25925" fg:w="30"/><text x="9.9180%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`madvise (30 samples, 0.01%)</title><rect x="9.6680%" y="229" width="0.0112%" height="15" fill="rgb(227,1,9)" fg:x="25925" fg:w="30"/><text x="9.9180%" y="239.50"></text></g><g><title>dfbench`_mi_page_free (31 samples, 0.01%)</title><rect x="9.6680%" y="325" width="0.0116%" height="15" fill="rgb(248,47,43)" fg:x="25925" fg:w="31"/><text x="9.9180%" y="335.50"></text></g><g><title>dfbench`mi_segment_page_clear (31 samples, 0.01%)</title><rect x="9.6680%" y="309" width="0.0116%" height="15" fill="rgb(221,10,30)" fg:x="25925" fg:w="31"/><text x="9.9180%" y="319.50"></text></g><g><title>dfbench`mi_segment_span_free_coalesce (31 samples, 0.01%)</title><rect x="9.6680%" y="293" width="0.0116%" height="15" fill="rgb(210,229,1)" fg:x="25925" fg:w="31"/><text x="9.9180%" y="303.50"></text></g><g><title>dfbench`mi_segment_span_free (31 samples, 0.01%)</title><rect x="9.6680%" y="277" width="0.0116%" height="15" fill="rgb(222,148,37)" fg:x="25925" fg:w="31"/><text x="9.9180%" y="287.50"></text></g><g><title>dfbench`mi_heap_malloc_zero_aligned_at_generic (32 samples, 0.01%)</title><rect x="9.6680%" y="373" width="0.0119%" height="15" fill="rgb(234,67,33)" fg:x="25925" fg:w="32"/><text x="9.9180%" y="383.50"></text></g><g><title>dfbench`_mi_malloc_generic (32 samples, 0.01%)</title><rect x="9.6680%" y="357" width="0.0119%" height="15" fill="rgb(247,98,35)" fg:x="25925" fg:w="32"/><text x="9.9180%" y="367.50"></text></g><g><title>dfbench`_mi_free_delayed_block (32 samples, 0.01%)</title><rect x="9.6680%" y="341" width="0.0119%" height="15" fill="rgb(247,138,52)" fg:x="25925" fg:w="32"/><text x="9.9180%" y="351.50"></text></g><g><title>dfbench`&lt;object_store::local::LocalFileSystem as object_store::ObjectStore&gt;::get_range::_{{closure}}::_{{closure}} (48 samples, 0.02%)</title><rect x="9.6672%" y="405" width="0.0179%" height="15" fill="rgb(213,79,30)" fg:x="25923" fg:w="48"/><text x="9.9172%" y="415.50"></text></g><g><title>dfbench`object_store::local::read_range (46 samples, 0.02%)</title><rect x="9.6680%" y="389" width="0.0172%" height="15" fill="rgb(246,177,23)" fg:x="25925" fg:w="46"/><text x="9.9180%" y="399.50"></text></g><g><title>dfbench`object_store::local::open_file (72 samples, 0.03%)</title><rect x="9.6866%" y="389" width="0.0269%" height="15" fill="rgb(230,62,27)" fg:x="25975" fg:w="72"/><text x="9.9366%" y="399.50"></text></g><g><title>dfbench`std::fs::OpenOptions::_open (72 samples, 0.03%)</title><rect x="9.6866%" y="373" width="0.0269%" height="15" fill="rgb(216,154,8)" fg:x="25975" fg:w="72"/><text x="9.9366%" y="383.50"></text></g><g><title>libsystem_kernel.dylib`__open (72 samples, 0.03%)</title><rect x="9.6866%" y="357" width="0.0269%" height="15" fill="rgb(244,35,45)" fg:x="25975" fg:w="72"/><text x="9.9366%" y="367.50"></text></g><g><title>dfbench`mi_segment_try_purge (383 samples, 0.14%)</title><rect x="9.7231%" y="261" width="0.1428%" height="15" fill="rgb(251,115,12)" fg:x="26073" fg:w="383"/><text x="9.9731%" y="271.50"></text></g><g><title>dfbench`mi_segment_purge (382 samples, 0.14%)</title><rect x="9.7235%" y="245" width="0.1425%" height="15" fill="rgb(240,54,50)" fg:x="26074" fg:w="382"/><text x="9.9735%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`madvise (382 samples, 0.14%)</title><rect x="9.7235%" y="229" width="0.1425%" height="15" fill="rgb(233,84,52)" fg:x="26074" fg:w="382"/><text x="9.9735%" y="239.50"></text></g><g><title>dfbench`_mi_page_free (397 samples, 0.15%)</title><rect x="9.7183%" y="325" width="0.1480%" height="15" fill="rgb(207,117,47)" fg:x="26060" fg:w="397"/><text x="9.9683%" y="335.50"></text></g><g><title>dfbench`mi_segment_page_clear (395 samples, 0.15%)</title><rect x="9.7190%" y="309" width="0.1473%" height="15" fill="rgb(249,43,39)" fg:x="26062" fg:w="395"/><text x="9.9690%" y="319.50"></text></g><g><title>dfbench`mi_segment_span_free_coalesce (394 samples, 0.15%)</title><rect x="9.7194%" y="293" width="0.1469%" height="15" fill="rgb(209,38,44)" fg:x="26063" fg:w="394"/><text x="9.9694%" y="303.50"></text></g><g><title>dfbench`mi_segment_span_free (389 samples, 0.15%)</title><rect x="9.7213%" y="277" width="0.1451%" height="15" fill="rgb(236,212,23)" fg:x="26068" fg:w="389"/><text x="9.9713%" y="287.50"></text></g><g><title>dfbench`mi_arena_purge (94 samples, 0.04%)</title><rect x="9.8663%" y="293" width="0.0351%" height="15" fill="rgb(242,79,21)" fg:x="26457" fg:w="94"/><text x="10.1163%" y="303.50"></text></g><g><title>libsystem_kernel.dylib`madvise (94 samples, 0.04%)</title><rect x="9.8663%" y="277" width="0.0351%" height="15" fill="rgb(211,96,35)" fg:x="26457" fg:w="94"/><text x="10.1163%" y="287.50"></text></g><g><title>dfbench`mi_segment_free (95 samples, 0.04%)</title><rect x="9.8663%" y="325" width="0.0354%" height="15" fill="rgb(253,215,40)" fg:x="26457" fg:w="95"/><text x="10.1163%" y="335.50"></text></g><g><title>dfbench`mi_arenas_try_purge (95 samples, 0.04%)</title><rect x="9.8663%" y="309" width="0.0354%" height="15" fill="rgb(211,81,21)" fg:x="26457" fg:w="95"/><text x="10.1163%" y="319.50"></text></g><g><title>dfbench`_mi_free_delayed_block (500 samples, 0.19%)</title><rect x="9.7157%" y="341" width="0.1865%" height="15" fill="rgb(208,190,38)" fg:x="26053" fg:w="500"/><text x="9.9657%" y="351.50"></text></g><g><title>dfbench`mi_page_free_list_extend (30 samples, 0.01%)</title><rect x="9.9111%" y="341" width="0.0112%" height="15" fill="rgb(235,213,38)" fg:x="26577" fg:w="30"/><text x="10.1611%" y="351.50"></text></g><g><title>dfbench`mi_segment_purge (61 samples, 0.02%)</title><rect x="9.9279%" y="293" width="0.0227%" height="15" fill="rgb(237,122,38)" fg:x="26622" fg:w="61"/><text x="10.1779%" y="303.50"></text></g><g><title>libsystem_kernel.dylib`madvise (61 samples, 0.02%)</title><rect x="9.9279%" y="277" width="0.0227%" height="15" fill="rgb(244,218,35)" fg:x="26622" fg:w="61"/><text x="10.1779%" y="287.50"></text></g><g><title>dfbench`_mi_malloc_generic (638 samples, 0.24%)</title><rect x="9.7142%" y="357" width="0.2379%" height="15" fill="rgb(240,68,47)" fg:x="26049" fg:w="638"/><text x="9.9642%" y="367.50"></text></g><g><title>dfbench`mi_page_fresh_alloc (80 samples, 0.03%)</title><rect x="9.9223%" y="341" width="0.0298%" height="15" fill="rgb(210,16,53)" fg:x="26607" fg:w="80"/><text x="10.1723%" y="351.50"></text></g><g><title>dfbench`mi_segments_page_alloc (78 samples, 0.03%)</title><rect x="9.9230%" y="325" width="0.0291%" height="15" fill="rgb(235,124,12)" fg:x="26609" fg:w="78"/><text x="10.1730%" y="335.50"></text></g><g><title>dfbench`mi_segment_try_purge (65 samples, 0.02%)</title><rect x="9.9279%" y="309" width="0.0242%" height="15" fill="rgb(224,169,11)" fg:x="26622" fg:w="65"/><text x="10.1779%" y="319.50"></text></g><g><title>dfbench`mi_heap_malloc_zero_aligned_at_generic (639 samples, 0.24%)</title><rect x="9.7142%" y="373" width="0.2383%" height="15" fill="rgb(250,166,2)" fg:x="26049" fg:w="639"/><text x="9.9642%" y="383.50"></text></g><g><title>dfbench`object_store::local::read_range (13,149 samples, 4.90%)</title><rect x="9.7134%" y="389" width="4.9035%" height="15" fill="rgb(242,216,29)" fg:x="26047" fg:w="13149"/><text x="9.9634%" y="399.50">dfbenc..</text></g><g><title>libsystem_kernel.dylib`read (12,498 samples, 4.66%)</title><rect x="9.9562%" y="373" width="4.6608%" height="15" fill="rgb(230,116,27)" fg:x="26698" fg:w="12498"/><text x="10.2062%" y="383.50">libsy..</text></g><g><title>libsystem_kernel.dylib`__lseek (42 samples, 0.02%)</title><rect x="14.6173%" y="389" width="0.0157%" height="15" fill="rgb(228,99,48)" fg:x="39197" fg:w="42"/><text x="14.8673%" y="399.50"></text></g><g><title>dfbench`&lt;object_store::local::LocalFileSystem as object_store::ObjectStore&gt;::get_ranges::_{{closure}}::_{{closure}} (13,276 samples, 4.95%)</title><rect x="9.6851%" y="405" width="4.9509%" height="15" fill="rgb(253,11,6)" fg:x="25971" fg:w="13276"/><text x="9.9351%" y="415.50">dfbenc..</text></g><g><title>dfbench`&lt;parquet::format::Statistics as parquet::thrift::TSerializable&gt;::read_from_in_protocol (75 samples, 0.03%)</title><rect x="14.7486%" y="213" width="0.0280%" height="15" fill="rgb(247,143,39)" fg:x="39549" fg:w="75"/><text x="14.9986%" y="223.50"></text></g><g><title>dfbench`&lt;parquet::thrift::TCompactSliceInputProtocol as thrift::protocol::TInputProtocol&gt;::read_field_begin (68 samples, 0.03%)</title><rect x="14.7784%" y="213" width="0.0254%" height="15" fill="rgb(236,97,10)" fg:x="39629" fg:w="68"/><text x="15.0284%" y="223.50"></text></g><g><title>dfbench`thrift::protocol::compact::u8_to_type (35 samples, 0.01%)</title><rect x="14.8161%" y="213" width="0.0131%" height="15" fill="rgb(233,208,19)" fg:x="39730" fg:w="35"/><text x="15.0661%" y="223.50"></text></g><g><title>dfbench`&lt;parquet::format::ColumnChunk as parquet::thrift::TSerializable&gt;::read_from_in_protocol (380 samples, 0.14%)</title><rect x="14.6957%" y="229" width="0.1417%" height="15" fill="rgb(216,164,2)" fg:x="39407" fg:w="380"/><text x="14.9457%" y="239.50"></text></g><g><title>dfbench`mi_heap_malloc_zero_aligned_at_generic (41 samples, 0.02%)</title><rect x="14.8486%" y="229" width="0.0153%" height="15" fill="rgb(220,129,5)" fg:x="39817" fg:w="41"/><text x="15.0986%" y="239.50"></text></g><g><title>dfbench`_mi_malloc_generic (40 samples, 0.01%)</title><rect x="14.8489%" y="213" width="0.0149%" height="15" fill="rgb(242,17,10)" fg:x="39818" fg:w="40"/><text x="15.0989%" y="223.50"></text></g><g><title>dfbench`&lt;parquet::format::FileMetaData as parquet::thrift::TSerializable&gt;::read_from_in_protocol (472 samples, 0.18%)</title><rect x="14.6923%" y="245" width="0.1760%" height="15" fill="rgb(242,107,0)" fg:x="39398" fg:w="472"/><text x="14.9423%" y="255.50"></text></g><g><title>dfbench`parquet::file::metadata::reader::ParquetMetaDataReader::decode_metadata (622 samples, 0.23%)</title><rect x="14.6740%" y="261" width="0.2320%" height="15" fill="rgb(251,28,31)" fg:x="39349" fg:w="622"/><text x="14.9240%" y="271.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (53 samples, 0.02%)</title><rect x="14.8862%" y="245" width="0.0198%" height="15" fill="rgb(233,223,10)" fg:x="39918" fg:w="53"/><text x="15.1362%" y="255.50"></text></g><g><title>dfbench`&lt;parquet::arrow::async_reader::store::ParquetObjectReader as parquet::arrow::async_reader::AsyncFileReader&gt;::get_metadata::_{{closure}} (683 samples, 0.25%)</title><rect x="14.6669%" y="277" width="0.2547%" height="15" fill="rgb(215,21,27)" fg:x="39330" fg:w="683"/><text x="14.9169%" y="287.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (37 samples, 0.01%)</title><rect x="14.9079%" y="261" width="0.0138%" height="15" fill="rgb(232,23,21)" fg:x="39976" fg:w="37"/><text x="15.1579%" y="271.50"></text></g><g><title>dfbench`&lt;datafusion::datasource::physical_plan::parquet::opener::ParquetOpener as datafusion::datasource::physical_plan::file_stream::FileOpener&gt;::open::_{{closure}} (685 samples, 0.26%)</title><rect x="14.6669%" y="293" width="0.2555%" height="15" fill="rgb(244,5,23)" fg:x="39330" fg:w="685"/><text x="14.9169%" y="303.50"></text></g><g><title>dfbench`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (37 samples, 0.01%)</title><rect x="15.0112%" y="197" width="0.0138%" height="15" fill="rgb(226,81,46)" fg:x="40253" fg:w="37"/><text x="15.2612%" y="207.50"></text></g><g><title>dfbench`alloc::raw_vec::finish_grow (27 samples, 0.01%)</title><rect x="15.0149%" y="181" width="0.0101%" height="15" fill="rgb(247,70,30)" fg:x="40263" fg:w="27"/><text x="15.2649%" y="191.50"></text></g><g><title>dfbench`arrow_array::array::byte_view_array::_&lt;impl core::convert::From&lt;arrow_array::array::byte_view_array::GenericByteViewArray&lt;T&gt;&gt; for arrow_data::data::ArrayData&gt;::from (95 samples, 0.04%)</title><rect x="15.0011%" y="213" width="0.0354%" height="15" fill="rgb(212,68,19)" fg:x="40226" fg:w="95"/><text x="15.2511%" y="223.50"></text></g><g><title>dfbench`&lt;arrow_array::array::byte_view_array::GenericByteViewArray&lt;T&gt; as arrow_array::array::Array&gt;::to_data (115 samples, 0.04%)</title><rect x="14.9981%" y="229" width="0.0429%" height="15" fill="rgb(240,187,13)" fg:x="40218" fg:w="115"/><text x="15.2481%" y="239.50"></text></g><g><title>dfbench`arrow_data::data::ArrayDataBuilder::build_impl (31 samples, 0.01%)</title><rect x="15.0615%" y="197" width="0.0116%" height="15" fill="rgb(223,113,26)" fg:x="40388" fg:w="31"/><text x="15.3115%" y="207.50"></text></g><g><title>dfbench`arrow_array::array::primitive_array::_&lt;impl core::convert::From&lt;arrow_array::array::primitive_array::PrimitiveArray&lt;T&gt;&gt; for arrow_data::data::ArrayData&gt;::from (108 samples, 0.04%)</title><rect x="15.0447%" y="213" width="0.0403%" height="15" fill="rgb(206,192,2)" fg:x="40343" fg:w="108"/><text x="15.2947%" y="223.50"></text></g><g><title>dfbench`&lt;arrow_array::array::primitive_array::PrimitiveArray&lt;T&gt; as arrow_array::array::Array&gt;::to_data (133 samples, 0.05%)</title><rect x="15.0410%" y="229" width="0.0496%" height="15" fill="rgb(241,108,4)" fg:x="40333" fg:w="133"/><text x="15.2910%" y="239.50"></text></g><g><title>dfbench`&lt;arrow_array::array::primitive_array::PrimitiveArray&lt;T&gt; as core::convert::From&lt;arrow_data::data::ArrayData&gt;&gt;::from (61 samples, 0.02%)</title><rect x="15.1253%" y="213" width="0.0227%" height="15" fill="rgb(247,173,49)" fg:x="40559" fg:w="61"/><text x="15.3753%" y="223.50"></text></g><g><title>dfbench`arrow_array::array::make_array (227 samples, 0.08%)</title><rect x="15.0962%" y="229" width="0.0847%" height="15" fill="rgb(224,114,35)" fg:x="40481" fg:w="227"/><text x="15.3462%" y="239.50"></text></g><g><title>dfbench`&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::next (651 samples, 0.24%)</title><rect x="14.9425%" y="261" width="0.2428%" height="15" fill="rgb(245,159,27)" fg:x="40069" fg:w="651"/><text x="15.1925%" y="271.50"></text></g><g><title>dfbench`arrow_cast::cast::cast_with_options (508 samples, 0.19%)</title><rect x="14.9959%" y="245" width="0.1894%" height="15" fill="rgb(245,172,44)" fg:x="40212" fg:w="508"/><text x="15.2459%" y="255.50"></text></g><g><title>dfbench`arrow_array::record_batch::RecordBatch::try_new_impl (28 samples, 0.01%)</title><rect x="15.1916%" y="261" width="0.0104%" height="15" fill="rgb(236,23,11)" fg:x="40737" fg:w="28"/><text x="15.4416%" y="271.50"></text></g><g><title>dfbench`alloc::sync::Arc&lt;T,A&gt;::drop_slow (29 samples, 0.01%)</title><rect x="15.2099%" y="245" width="0.0108%" height="15" fill="rgb(205,117,38)" fg:x="40786" fg:w="29"/><text x="15.4599%" y="255.50"></text></g><g><title>dfbench`core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::sync::Arc&lt;dyn arrow_array::array::Array&gt;&gt;&gt; (48 samples, 0.02%)</title><rect x="15.2062%" y="261" width="0.0179%" height="15" fill="rgb(237,72,25)" fg:x="40776" fg:w="48"/><text x="15.4562%" y="271.50"></text></g><g><title>dfbench`&lt;datafusion::datasource::schema_adapter::SchemaMapping as datafusion::datasource::schema_adapter::SchemaMapper&gt;::map_batch (804 samples, 0.30%)</title><rect x="14.9287%" y="277" width="0.2998%" height="15" fill="rgb(244,70,9)" fg:x="40032" fg:w="804"/><text x="15.1787%" y="287.50"></text></g><g><title>dfbench`&lt;arrow_array::array::primitive_array::PrimitiveArray&lt;T&gt; as arrow_array::array::Array&gt;::to_data (37 samples, 0.01%)</title><rect x="15.2416%" y="261" width="0.0138%" height="15" fill="rgb(217,125,39)" fg:x="40871" fg:w="37"/><text x="15.4916%" y="271.50"></text></g><g><title>dfbench`&lt;parquet::arrow::array_reader::byte_view_array::ByteViewArrayReader as parquet::arrow::array_reader::ArrayReader&gt;::consume_batch (37 samples, 0.01%)</title><rect x="15.2636%" y="261" width="0.0138%" height="15" fill="rgb(235,36,10)" fg:x="40930" fg:w="37"/><text x="15.5136%" y="271.50"></text></g><g><title>dfbench`&lt;parquet::arrow::array_reader::byte_view_array::ByteViewArrayReader as parquet::arrow::array_reader::ArrayReader&gt;::read_records (31 samples, 0.01%)</title><rect x="15.2774%" y="261" width="0.0116%" height="15" fill="rgb(251,123,47)" fg:x="40967" fg:w="31"/><text x="15.5274%" y="271.50"></text></g><g><title>dfbench`&lt;parquet::arrow::array_reader::null_array::NullArrayReader&lt;T&gt; as parquet::arrow::array_reader::ArrayReader&gt;::read_records (30 samples, 0.01%)</title><rect x="15.2890%" y="261" width="0.0112%" height="15" fill="rgb(221,13,13)" fg:x="40998" fg:w="30"/><text x="15.5390%" y="271.50"></text></g><g><title>dfbench`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (39 samples, 0.01%)</title><rect x="15.3643%" y="213" width="0.0145%" height="15" fill="rgb(238,131,9)" fg:x="41200" fg:w="39"/><text x="15.6143%" y="223.50"></text></g><g><title>dfbench`alloc::raw_vec::finish_grow (31 samples, 0.01%)</title><rect x="15.3673%" y="197" width="0.0116%" height="15" fill="rgb(211,50,8)" fg:x="41208" fg:w="31"/><text x="15.6173%" y="207.50"></text></g><g><title>dfbench`arrow_data::data::ArrayDataBuilder::build_impl (61 samples, 0.02%)</title><rect x="15.3792%" y="213" width="0.0227%" height="15" fill="rgb(245,182,24)" fg:x="41240" fg:w="61"/><text x="15.6292%" y="223.50"></text></g><g><title>dfbench`arrow_array::array::byte_view_array::_&lt;impl core::convert::From&lt;arrow_array::array::byte_view_array::GenericByteViewArray&lt;T&gt;&gt; for arrow_data::data::ArrayData&gt;::from (132 samples, 0.05%)</title><rect x="15.3542%" y="229" width="0.0492%" height="15" fill="rgb(242,14,37)" fg:x="41173" fg:w="132"/><text x="15.6042%" y="239.50"></text></g><g><title>dfbench`&lt;arrow_array::array::byte_view_array::GenericByteViewArray&lt;T&gt; as arrow_array::array::Array&gt;::to_data (163 samples, 0.06%)</title><rect x="15.3501%" y="245" width="0.0608%" height="15" fill="rgb(246,228,12)" fg:x="41162" fg:w="163"/><text x="15.6001%" y="255.50"></text></g><g><title>dfbench`arrow_data::data::ArrayDataBuilder::build_impl (116 samples, 0.04%)</title><rect x="15.4333%" y="213" width="0.0433%" height="15" fill="rgb(213,55,15)" fg:x="41385" fg:w="116"/><text x="15.6833%" y="223.50"></text></g><g><title>dfbench`core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;arrow_buffer::buffer::immutable::Buffer&gt;&gt; (65 samples, 0.02%)</title><rect x="15.4766%" y="213" width="0.0242%" height="15" fill="rgb(209,9,3)" fg:x="41501" fg:w="65"/><text x="15.7266%" y="223.50"></text></g><g><title>dfbench`arrow_array::array::primitive_array::_&lt;impl core::convert::From&lt;arrow_array::array::primitive_array::PrimitiveArray&lt;T&gt;&gt; for arrow_data::data::ArrayData&gt;::from (225 samples, 0.08%)</title><rect x="15.4191%" y="229" width="0.0839%" height="15" fill="rgb(230,59,30)" fg:x="41347" fg:w="225"/><text x="15.6691%" y="239.50"></text></g><g><title>dfbench`&lt;arrow_array::array::primitive_array::PrimitiveArray&lt;T&gt; as arrow_array::array::Array&gt;::to_data (268 samples, 0.10%)</title><rect x="15.4109%" y="245" width="0.0999%" height="15" fill="rgb(209,121,21)" fg:x="41325" fg:w="268"/><text x="15.6609%" y="255.50"></text></g><g><title>dfbench`&lt;arrow_schema::datatype::DataType as core::clone::Clone&gt;::clone (97 samples, 0.04%)</title><rect x="15.5474%" y="213" width="0.0362%" height="15" fill="rgb(220,109,13)" fg:x="41691" fg:w="97"/><text x="15.7974%" y="223.50"></text></g><g><title>dfbench`&lt;arrow_data::data::ArrayData as core::clone::Clone&gt;::clone (197 samples, 0.07%)</title><rect x="15.5165%" y="229" width="0.0735%" height="15" fill="rgb(232,18,1)" fg:x="41608" fg:w="197"/><text x="15.7665%" y="239.50"></text></g><g><title>dfbench`&lt;arrow_schema::datatype::DataType as core::cmp::PartialEq&gt;::eq (27 samples, 0.01%)</title><rect x="15.6391%" y="197" width="0.0101%" height="15" fill="rgb(215,41,42)" fg:x="41937" fg:w="27"/><text x="15.8891%" y="207.50"></text></g><g><title>dfbench`&lt;arrow_array::array::primitive_array::PrimitiveArray&lt;T&gt; as core::convert::From&lt;arrow_data::data::ArrayData&gt;&gt;::from (87 samples, 0.03%)</title><rect x="15.6283%" y="213" width="0.0324%" height="15" fill="rgb(224,123,36)" fg:x="41908" fg:w="87"/><text x="15.8783%" y="223.50"></text></g><g><title>dfbench`core::ptr::drop_in_place&lt;arrow_data::data::ArrayData&gt; (28 samples, 0.01%)</title><rect x="15.6675%" y="213" width="0.0104%" height="15" fill="rgb(240,125,3)" fg:x="42013" fg:w="28"/><text x="15.9175%" y="223.50"></text></g><g><title>dfbench`arrow_array::array::make_array (281 samples, 0.10%)</title><rect x="15.5922%" y="229" width="0.1048%" height="15" fill="rgb(205,98,50)" fg:x="41811" fg:w="281"/><text x="15.8422%" y="239.50"></text></g><g><title>dfbench`&lt;arrow_array::array::struct_array::StructArray as core::convert::From&lt;arrow_data::data::ArrayData&gt;&gt;::from (517 samples, 0.19%)</title><rect x="15.5109%" y="245" width="0.1928%" height="15" fill="rgb(205,185,37)" fg:x="41593" fg:w="517"/><text x="15.7609%" y="255.50"></text></g><g><title>dfbench`&lt;arrow_data::data::ArrayData as core::clone::Clone&gt;::clone (33 samples, 0.01%)</title><rect x="15.7037%" y="245" width="0.0123%" height="15" fill="rgb(238,207,15)" fg:x="42110" fg:w="33"/><text x="15.9537%" y="255.50"></text></g><g><title>dfbench`arrow_array::array::make_array (105 samples, 0.04%)</title><rect x="15.7477%" y="229" width="0.0392%" height="15" fill="rgb(213,199,42)" fg:x="42228" fg:w="105"/><text x="15.9977%" y="239.50"></text></g><g><title>dfbench`arrow_data::data::ArrayDataBuilder::add_buffers (61 samples, 0.02%)</title><rect x="15.7887%" y="229" width="0.0227%" height="15" fill="rgb(235,201,11)" fg:x="42338" fg:w="61"/><text x="16.0387%" y="239.50"></text></g><g><title>dfbench`arrow_data::data::ArrayDataBuilder::null_bit_buffer (29 samples, 0.01%)</title><rect x="15.8174%" y="229" width="0.0108%" height="15" fill="rgb(207,46,11)" fg:x="42415" fg:w="29"/><text x="16.0674%" y="239.50"></text></g><g><title>dfbench`&lt;parquet::arrow::array_reader::byte_view_array::ByteViewArrayReader as parquet::arrow::array_reader::ArrayReader&gt;::consume_batch (313 samples, 0.12%)</title><rect x="15.7219%" y="245" width="0.1167%" height="15" fill="rgb(241,35,35)" fg:x="42159" fg:w="313"/><text x="15.9719%" y="255.50"></text></g><g><title>dfbench`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (111 samples, 0.04%)</title><rect x="15.9796%" y="229" width="0.0414%" height="15" fill="rgb(243,32,47)" fg:x="42850" fg:w="111"/><text x="16.2296%" y="239.50"></text></g><g><title>dfbench`alloc::raw_vec::finish_grow (50 samples, 0.02%)</title><rect x="16.0024%" y="213" width="0.0186%" height="15" fill="rgb(247,202,23)" fg:x="42911" fg:w="50"/><text x="16.2524%" y="223.50"></text></g><g><title>dfbench`mi_free (30 samples, 0.01%)</title><rect x="16.0277%" y="197" width="0.0112%" height="15" fill="rgb(219,102,11)" fg:x="42979" fg:w="30"/><text x="16.2777%" y="207.50"></text></g><g><title>dfbench`core::ptr::drop_in_place&lt;arrow_array::array::primitive_array::PrimitiveArray&lt;arrow_array::types::Int32Type&gt;&gt; (47 samples, 0.02%)</title><rect x="16.0233%" y="213" width="0.0175%" height="15" fill="rgb(243,110,44)" fg:x="42967" fg:w="47"/><text x="16.2733%" y="223.50"></text></g><g><title>dfbench`alloc::sync::Arc&lt;T,A&gt;::drop_slow (60 samples, 0.02%)</title><rect x="16.0225%" y="229" width="0.0224%" height="15" fill="rgb(222,74,54)" fg:x="42965" fg:w="60"/><text x="16.2725%" y="239.50"></text></g><g><title>dfbench`arrow_buffer::buffer::scalar::ScalarBuffer&lt;T&gt;::new (44 samples, 0.02%)</title><rect x="16.0475%" y="229" width="0.0164%" height="15" fill="rgb(216,99,12)" fg:x="43032" fg:w="44"/><text x="16.2975%" y="239.50"></text></g><g><title>dfbench`arrow_array::array::primitive_array::PrimitiveArray&lt;T&gt;::try_new (56 samples, 0.02%)</title><rect x="19.4060%" y="213" width="0.0209%" height="15" fill="rgb(226,22,26)" fg:x="52038" fg:w="56"/><text x="19.6560%" y="223.50"></text></g><g><title>dfbench`mi_page_free_list_extend (56 samples, 0.02%)</title><rect x="19.4519%" y="165" width="0.0209%" height="15" fill="rgb(217,163,10)" fg:x="52161" fg:w="56"/><text x="19.7019%" y="175.50"></text></g><g><title>libsystem_c.dylib`_mach_boottime_usec (40 samples, 0.01%)</title><rect x="19.4966%" y="101" width="0.0149%" height="15" fill="rgb(213,25,53)" fg:x="52281" fg:w="40"/><text x="19.7466%" y="111.50"></text></g><g><title>libsystem_c.dylib`gettimeofday (38 samples, 0.01%)</title><rect x="19.4974%" y="85" width="0.0142%" height="15" fill="rgb(252,105,26)" fg:x="52283" fg:w="38"/><text x="19.7474%" y="95.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (38 samples, 0.01%)</title><rect x="19.4974%" y="69" width="0.0142%" height="15" fill="rgb(220,39,43)" fg:x="52283" fg:w="38"/><text x="19.7474%" y="79.50"></text></g><g><title>dfbench`mi_segment_span_allocate (75 samples, 0.03%)</title><rect x="19.4843%" y="133" width="0.0280%" height="15" fill="rgb(229,68,48)" fg:x="52248" fg:w="75"/><text x="19.7343%" y="143.50"></text></g><g><title>libsystem_c.dylib`clock_gettime (47 samples, 0.02%)</title><rect x="19.4948%" y="117" width="0.0175%" height="15" fill="rgb(252,8,32)" fg:x="52276" fg:w="47"/><text x="19.7448%" y="127.50"></text></g><g><title>dfbench`mi_page_fresh_alloc (121 samples, 0.05%)</title><rect x="19.4728%" y="165" width="0.0451%" height="15" fill="rgb(223,20,43)" fg:x="52217" fg:w="121"/><text x="19.7228%" y="175.50"></text></g><g><title>dfbench`mi_segments_page_alloc (119 samples, 0.04%)</title><rect x="19.4735%" y="149" width="0.0444%" height="15" fill="rgb(229,81,49)" fg:x="52219" fg:w="119"/><text x="19.7235%" y="159.50"></text></g><g><title>dfbench`mi_find_page (214 samples, 0.08%)</title><rect x="19.4396%" y="181" width="0.0798%" height="15" fill="rgb(236,28,36)" fg:x="52128" fg:w="214"/><text x="19.6896%" y="191.50"></text></g><g><title>dfbench`_mi_malloc_generic (225 samples, 0.08%)</title><rect x="19.4362%" y="197" width="0.0839%" height="15" fill="rgb(249,185,26)" fg:x="52119" fg:w="225"/><text x="19.6862%" y="207.50"></text></g><g><title>dfbench`mi_heap_malloc_zero_aligned_at_generic (239 samples, 0.09%)</title><rect x="19.4332%" y="213" width="0.0891%" height="15" fill="rgb(249,174,33)" fg:x="52111" fg:w="239"/><text x="19.6832%" y="223.50"></text></g><g><title>dfbench`mi_malloc_aligned (32 samples, 0.01%)</title><rect x="19.5224%" y="213" width="0.0119%" height="15" fill="rgb(233,201,37)" fg:x="52350" fg:w="32"/><text x="19.7724%" y="223.50"></text></g><g><title>dfbench`arrow_cast::cast::cast_numeric_arrays (9,312 samples, 3.47%)</title><rect x="16.0646%" y="229" width="3.4726%" height="15" fill="rgb(221,78,26)" fg:x="43078" fg:w="9312"/><text x="16.3146%" y="239.50">dfb..</text></g><g><title>dfbench`arrow_data::data::ArrayDataBuilder::build_impl (46 samples, 0.02%)</title><rect x="19.5619%" y="181" width="0.0172%" height="15" fill="rgb(250,127,30)" fg:x="52456" fg:w="46"/><text x="19.8119%" y="191.50"></text></g><g><title>dfbench`arrow_array::array::primitive_array::_&lt;impl core::convert::From&lt;arrow_array::array::primitive_array::PrimitiveArray&lt;T&gt;&gt; for arrow_data::data::ArrayData&gt;::from (70 samples, 0.03%)</title><rect x="19.5548%" y="197" width="0.0261%" height="15" fill="rgb(230,49,44)" fg:x="52437" fg:w="70"/><text x="19.8048%" y="207.50"></text></g><g><title>dfbench`&lt;arrow_array::array::primitive_array::PrimitiveArray&lt;T&gt; as arrow_array::array::Array&gt;::to_data (85 samples, 0.03%)</title><rect x="19.5507%" y="213" width="0.0317%" height="15" fill="rgb(229,67,23)" fg:x="52426" fg:w="85"/><text x="19.8007%" y="223.50"></text></g><g><title>dfbench`&lt;arrow_schema::datatype::DataType as core::cmp::PartialEq&gt;::eq (28 samples, 0.01%)</title><rect x="19.5831%" y="213" width="0.0104%" height="15" fill="rgb(249,83,47)" fg:x="52513" fg:w="28"/><text x="19.8331%" y="223.50"></text></g><g><title>dfbench`arrow_array::array::make_array (67 samples, 0.02%)</title><rect x="19.5936%" y="213" width="0.0250%" height="15" fill="rgb(215,43,3)" fg:x="52541" fg:w="67"/><text x="19.8436%" y="223.50"></text></g><g><title>dfbench`arrow_cast::cast::cast_with_options (220 samples, 0.08%)</title><rect x="19.5373%" y="229" width="0.0820%" height="15" fill="rgb(238,154,13)" fg:x="52390" fg:w="220"/><text x="19.7873%" y="239.50"></text></g><g><title>dfbench`arrow_data::data::ArrayDataBuilder::build_impl (53 samples, 0.02%)</title><rect x="19.6193%" y="229" width="0.0198%" height="15" fill="rgb(219,56,2)" fg:x="52610" fg:w="53"/><text x="19.8693%" y="239.50"></text></g><g><title>dfbench`arrow_data::data::ArrayDataBuilder::null_bit_buffer (101 samples, 0.04%)</title><rect x="19.6391%" y="229" width="0.0377%" height="15" fill="rgb(233,0,4)" fg:x="52663" fg:w="101"/><text x="19.8891%" y="239.50"></text></g><g><title>dfbench`core::ptr::drop_in_place&lt;arrow_data::data::ArrayData&gt; (29 samples, 0.01%)</title><rect x="19.6782%" y="229" width="0.0108%" height="15" fill="rgb(235,30,7)" fg:x="52768" fg:w="29"/><text x="19.9282%" y="239.50"></text></g><g><title>dfbench`mi_malloc_aligned (29 samples, 0.01%)</title><rect x="19.7032%" y="229" width="0.0108%" height="15" fill="rgb(250,79,13)" fg:x="52835" fg:w="29"/><text x="19.9532%" y="239.50"></text></g><g><title>dfbench`&lt;parquet::arrow::array_reader::primitive_array::PrimitiveArrayReader&lt;T&gt; as parquet::arrow::array_reader::ArrayReader&gt;::consume_batch (11,771 samples, 4.39%)</title><rect x="15.8387%" y="245" width="4.3896%" height="15" fill="rgb(211,146,34)" fg:x="42472" fg:w="11771"/><text x="16.0887%" y="255.50">dfben..</text></g><g><title>libsystem_platform.dylib`_platform_memset (1,375 samples, 0.51%)</title><rect x="19.7155%" y="229" width="0.5128%" height="15" fill="rgb(228,22,38)" fg:x="52868" fg:w="1375"/><text x="19.9655%" y="239.50"></text></g><g><title>dfbench`alloc::sync::Arc&lt;T,A&gt;::drop_slow (49 samples, 0.02%)</title><rect x="20.2656%" y="229" width="0.0183%" height="15" fill="rgb(235,168,5)" fg:x="54343" fg:w="49"/><text x="20.5156%" y="239.50"></text></g><g><title>dfbench`core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::sync::Arc&lt;dyn arrow_array::array::Array&gt;&gt;&gt; (80 samples, 0.03%)</title><rect x="20.2626%" y="245" width="0.0298%" height="15" fill="rgb(221,155,16)" fg:x="54335" fg:w="80"/><text x="20.5126%" y="255.50"></text></g><g><title>dfbench`core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;arrow_buffer::buffer::immutable::Buffer&gt;&gt; (29 samples, 0.01%)</title><rect x="20.3103%" y="213" width="0.0108%" height="15" fill="rgb(215,215,53)" fg:x="54463" fg:w="29"/><text x="20.5603%" y="223.50"></text></g><g><title>dfbench`core::ptr::drop_in_place&lt;arrow_data::data::ArrayData&gt; (40 samples, 0.01%)</title><rect x="20.3096%" y="229" width="0.0149%" height="15" fill="rgb(223,4,10)" fg:x="54461" fg:w="40"/><text x="20.5596%" y="239.50"></text></g><g><title>dfbench`core::ptr::drop_in_place&lt;arrow_data::data::ArrayData&gt; (100 samples, 0.04%)</title><rect x="20.2924%" y="245" width="0.0373%" height="15" fill="rgb(234,103,6)" fg:x="54415" fg:w="100"/><text x="20.5424%" y="255.50"></text></g><g><title>dfbench`&lt;parquet::arrow::array_reader::struct_array::StructArrayReader as parquet::arrow::array_reader::ArrayReader&gt;::consume_batch (13,491 samples, 5.03%)</title><rect x="15.3143%" y="261" width="5.0311%" height="15" fill="rgb(227,97,0)" fg:x="41066" fg:w="13491"/><text x="15.5643%" y="271.50">dfbenc..</text></g><g><title>dfbench`mi_page_free_list_extend (54 samples, 0.02%)</title><rect x="28.2189%" y="133" width="0.0201%" height="15" fill="rgb(234,150,53)" fg:x="75670" fg:w="54"/><text x="28.4689%" y="143.50"></text></g><g><title>dfbench`mi_segment_span_allocate (55 samples, 0.02%)</title><rect x="28.2468%" y="101" width="0.0205%" height="15" fill="rgb(228,201,54)" fg:x="75745" fg:w="55"/><text x="28.4968%" y="111.50"></text></g><g><title>libsystem_c.dylib`clock_gettime (30 samples, 0.01%)</title><rect x="28.2562%" y="85" width="0.0112%" height="15" fill="rgb(222,22,37)" fg:x="75770" fg:w="30"/><text x="28.5062%" y="95.50"></text></g><g><title>libsystem_c.dylib`_mach_boottime_usec (29 samples, 0.01%)</title><rect x="28.2681%" y="69" width="0.0108%" height="15" fill="rgb(237,53,32)" fg:x="75802" fg:w="29"/><text x="28.5181%" y="79.50"></text></g><g><title>dfbench`mi_segment_try_purge (32 samples, 0.01%)</title><rect x="28.2673%" y="101" width="0.0119%" height="15" fill="rgb(233,25,53)" fg:x="75800" fg:w="32"/><text x="28.5173%" y="111.50"></text></g><g><title>libsystem_c.dylib`clock_gettime (32 samples, 0.01%)</title><rect x="28.2673%" y="85" width="0.0119%" height="15" fill="rgb(210,40,34)" fg:x="75800" fg:w="32"/><text x="28.5173%" y="95.50"></text></g><g><title>dfbench`mi_page_fresh_alloc (109 samples, 0.04%)</title><rect x="28.2390%" y="133" width="0.0406%" height="15" fill="rgb(241,220,44)" fg:x="75724" fg:w="109"/><text x="28.4890%" y="143.50"></text></g><g><title>dfbench`mi_segments_page_alloc (108 samples, 0.04%)</title><rect x="28.2394%" y="117" width="0.0403%" height="15" fill="rgb(235,28,35)" fg:x="75725" fg:w="108"/><text x="28.4894%" y="127.50"></text></g><g><title>dfbench`mi_find_page (333 samples, 0.12%)</title><rect x="28.1566%" y="149" width="0.1242%" height="15" fill="rgb(210,56,17)" fg:x="75503" fg:w="333"/><text x="28.4066%" y="159.50"></text></g><g><title>dfbench`_mi_malloc_generic (383 samples, 0.14%)</title><rect x="28.1458%" y="165" width="0.1428%" height="15" fill="rgb(224,130,29)" fg:x="75474" fg:w="383"/><text x="28.3958%" y="175.50"></text></g><g><title>dfbench`mi_heap_realloc_zero_aligned_at (511 samples, 0.19%)</title><rect x="28.1010%" y="197" width="0.1906%" height="15" fill="rgb(235,212,8)" fg:x="75354" fg:w="511"/><text x="28.3510%" y="207.50"></text></g><g><title>dfbench`mi_heap_malloc_zero_aligned_at_generic (400 samples, 0.15%)</title><rect x="28.1424%" y="181" width="0.1492%" height="15" fill="rgb(223,33,50)" fg:x="75465" fg:w="400"/><text x="28.3924%" y="191.50"></text></g><g><title>dfbench`alloc::raw_vec::finish_grow (5,048 samples, 1.88%)</title><rect x="28.0839%" y="213" width="1.8825%" height="15" fill="rgb(219,149,13)" fg:x="75308" fg:w="5048"/><text x="28.3339%" y="223.50">d..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (4,455 samples, 1.66%)</title><rect x="28.3050%" y="197" width="1.6614%" height="15" fill="rgb(250,156,29)" fg:x="75901" fg:w="4455"/><text x="28.5550%" y="207.50"></text></g><g><title>dfbench`mi_heap_realloc_zero_aligned_at (36 samples, 0.01%)</title><rect x="29.9664%" y="213" width="0.0134%" height="15" fill="rgb(216,193,19)" fg:x="80356" fg:w="36"/><text x="30.2164%" y="223.50"></text></g><g><title>dfbench`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (5,183 samples, 1.93%)</title><rect x="28.0477%" y="229" width="1.9328%" height="15" fill="rgb(216,135,14)" fg:x="75211" fg:w="5183"/><text x="28.2977%" y="239.50">d..</text></g><g><title>dfbench`alloc::raw_vec::finish_grow (33 samples, 0.01%)</title><rect x="29.9809%" y="229" width="0.0123%" height="15" fill="rgb(241,47,5)" fg:x="80395" fg:w="33"/><text x="30.2309%" y="239.50"></text></g><g><title>dfbench`arrow_array::builder::generic_bytes_view_builder::make_view (2,453 samples, 0.91%)</title><rect x="29.9932%" y="229" width="0.9148%" height="15" fill="rgb(233,42,35)" fg:x="80428" fg:w="2453"/><text x="30.2432%" y="239.50"></text></g><g><title>dfbench`core::str::converts::from_utf8 (86 samples, 0.03%)</title><rect x="30.9102%" y="229" width="0.0321%" height="15" fill="rgb(231,13,6)" fg:x="82887" fg:w="86"/><text x="31.1602%" y="239.50"></text></g><g><title>dfbench`alloc::raw_vec::finish_grow (215 samples, 0.08%)</title><rect x="32.1845%" y="197" width="0.0802%" height="15" fill="rgb(207,181,40)" fg:x="86304" fg:w="215"/><text x="32.4345%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (171 samples, 0.06%)</title><rect x="32.2009%" y="181" width="0.0638%" height="15" fill="rgb(254,173,49)" fg:x="86348" fg:w="171"/><text x="32.4509%" y="191.50"></text></g><g><title>dfbench`alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (222 samples, 0.08%)</title><rect x="32.1826%" y="213" width="0.0828%" height="15" fill="rgb(221,1,38)" fg:x="86299" fg:w="222"/><text x="32.4326%" y="223.50"></text></g><g><title>dfbench`core::str::converts::from_utf8 (52,137 samples, 19.44%)</title><rect x="32.2654%" y="213" width="19.4429%" height="15" fill="rgb(206,124,46)" fg:x="86521" fg:w="52137"/><text x="32.5154%" y="223.50">dfbench`core::str::converts::f..</text></g><g><title>dfbench`parquet::arrow::array_reader::byte_view_array::ByteViewArrayDecoderPlain::read (55,684 samples, 20.77%)</title><rect x="30.9430%" y="229" width="20.7657%" height="15" fill="rgb(249,21,11)" fg:x="82975" fg:w="55684"/><text x="31.1930%" y="239.50">dfbench`parquet::arrow::array_rea..</text></g><g><title>dfbench`&lt;parquet::arrow::array_reader::byte_view_array::ByteViewArrayColumnValueDecoder as parquet::column::reader::decoder::ColumnValueDecoder&gt;::set_data (41 samples, 0.02%)</title><rect x="51.7136%" y="213" width="0.0153%" height="15" fill="rgb(222,201,40)" fg:x="138672" fg:w="41"/><text x="51.9636%" y="223.50"></text></g><g><title>dfbench`arrow_array::builder::generic_bytes_view_builder::make_view (55 samples, 0.02%)</title><rect x="51.7296%" y="197" width="0.0205%" height="15" fill="rgb(235,61,29)" fg:x="138715" fg:w="55"/><text x="51.9796%" y="207.50"></text></g><g><title>dfbench`core::str::converts::from_utf8 (2,848 samples, 1.06%)</title><rect x="51.8049%" y="181" width="1.0621%" height="15" fill="rgb(219,207,3)" fg:x="138917" fg:w="2848"/><text x="52.0549%" y="191.50"></text></g><g><title>dfbench`&lt;parquet::arrow::array_reader::byte_view_array::ByteViewArrayColumnValueDecoder as parquet::column::reader::decoder::ColumnValueDecoder&gt;::set_dict (3,053 samples, 1.14%)</title><rect x="51.7289%" y="213" width="1.1385%" height="15" fill="rgb(222,56,46)" fg:x="138713" fg:w="3053"/><text x="51.9789%" y="223.50"></text></g><g><title>dfbench`parquet::arrow::array_reader::byte_view_array::ByteViewArrayDecoderPlain::read (2,994 samples, 1.12%)</title><rect x="51.7509%" y="197" width="1.1165%" height="15" fill="rgb(239,76,54)" fg:x="138772" fg:w="2994"/><text x="52.0009%" y="207.50"></text></g><g><title>dfbench`_mi_malloc_generic (40 samples, 0.01%)</title><rect x="52.8871%" y="181" width="0.0149%" height="15" fill="rgb(231,124,27)" fg:x="141819" fg:w="40"/><text x="53.1371%" y="191.50"></text></g><g><title>dfbench`mi_page_fresh_alloc (32 samples, 0.01%)</title><rect x="52.8901%" y="165" width="0.0119%" height="15" fill="rgb(249,195,6)" fg:x="141827" fg:w="32"/><text x="53.1401%" y="175.50"></text></g><g><title>dfbench`mi_segments_page_alloc (32 samples, 0.01%)</title><rect x="52.8901%" y="149" width="0.0119%" height="15" fill="rgb(237,174,47)" fg:x="141827" fg:w="32"/><text x="53.1401%" y="159.50"></text></g><g><title>dfbench`mi_heap_malloc_zero_aligned_at_generic (41 samples, 0.02%)</title><rect x="52.8871%" y="197" width="0.0153%" height="15" fill="rgb(206,201,31)" fg:x="141819" fg:w="41"/><text x="53.1371%" y="207.50"></text></g><g><title>dfbench`&lt;parquet::compression::snappy_codec::SnappyCodec as parquet::compression::Codec&gt;::decompress (60,752 samples, 22.66%)</title><rect x="52.9106%" y="181" width="22.6556%" height="15" fill="rgb(231,57,52)" fg:x="141882" fg:w="60752"/><text x="53.1606%" y="191.50">dfbench`&lt;parquet::compression::snapp..</text></g><g><title>dfbench`DYLD-STUB$$memcpy (51 samples, 0.02%)</title><rect x="75.5663%" y="181" width="0.0190%" height="15" fill="rgb(248,177,22)" fg:x="202634" fg:w="51"/><text x="75.8163%" y="191.50"></text></g><g><title>dfbench`_mi_page_free (41 samples, 0.02%)</title><rect x="75.5853%" y="181" width="0.0153%" height="15" fill="rgb(215,211,37)" fg:x="202685" fg:w="41"/><text x="75.8353%" y="191.50"></text></g><g><title>dfbench`mi_segment_page_clear (39 samples, 0.01%)</title><rect x="75.5860%" y="165" width="0.0145%" height="15" fill="rgb(241,128,51)" fg:x="202687" fg:w="39"/><text x="75.8360%" y="175.50"></text></g><g><title>dfbench`mi_segment_span_free_coalesce (36 samples, 0.01%)</title><rect x="75.5872%" y="149" width="0.0134%" height="15" fill="rgb(227,165,31)" fg:x="202690" fg:w="36"/><text x="75.8372%" y="159.50"></text></g><g><title>dfbench`mi_segment_span_free (32 samples, 0.01%)</title><rect x="75.5887%" y="133" width="0.0119%" height="15" fill="rgb(228,167,24)" fg:x="202694" fg:w="32"/><text x="75.8387%" y="143.50"></text></g><g><title>dfbench`_mi_malloc_generic (65 samples, 0.02%)</title><rect x="75.6006%" y="165" width="0.0242%" height="15" fill="rgb(228,143,12)" fg:x="202726" fg:w="65"/><text x="75.8506%" y="175.50"></text></g><g><title>dfbench`mi_page_fresh_alloc (46 samples, 0.02%)</title><rect x="75.6077%" y="149" width="0.0172%" height="15" fill="rgb(249,149,8)" fg:x="202745" fg:w="46"/><text x="75.8577%" y="159.50"></text></g><g><title>dfbench`mi_segments_page_alloc (45 samples, 0.02%)</title><rect x="75.6080%" y="133" width="0.0168%" height="15" fill="rgb(243,35,44)" fg:x="202746" fg:w="45"/><text x="75.8580%" y="143.50"></text></g><g><title>dfbench`mi_heap_malloc_zero_aligned_at_generic (67 samples, 0.02%)</title><rect x="75.6006%" y="181" width="0.0250%" height="15" fill="rgb(246,89,9)" fg:x="202726" fg:w="67"/><text x="75.8506%" y="191.50"></text></g><g><title>libsystem_platform.dylib`__bzero (1,379 samples, 0.51%)</title><rect x="75.6308%" y="181" width="0.5143%" height="15" fill="rgb(233,213,13)" fg:x="202807" fg:w="1379"/><text x="75.8808%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1,924 samples, 0.72%)</title><rect x="76.1451%" y="181" width="0.7175%" height="15" fill="rgb(233,141,41)" fg:x="204186" fg:w="1924"/><text x="76.3951%" y="191.50"></text></g><g><title>dfbench`parquet::file::serialized_reader::decode_page (64,247 samples, 23.96%)</title><rect x="52.9058%" y="197" width="23.9590%" height="15" fill="rgb(239,167,4)" fg:x="141869" fg:w="64247"/><text x="53.1558%" y="207.50">dfbench`parquet::file::serialized_read..</text></g><g><title>dfbench`&lt;parquet::format::Statistics as parquet::thrift::TSerializable&gt;::read_from_in_protocol (41 samples, 0.02%)</title><rect x="76.8823%" y="181" width="0.0153%" height="15" fill="rgb(209,217,16)" fg:x="206163" fg:w="41"/><text x="77.1323%" y="191.50"></text></g><g><title>dfbench`&lt;thrift::protocol::compact::TCompactInputProtocol&lt;T&gt; as thrift::protocol::TInputProtocol&gt;::read_i32 (36 samples, 0.01%)</title><rect x="76.9043%" y="181" width="0.0134%" height="15" fill="rgb(219,88,35)" fg:x="206222" fg:w="36"/><text x="77.1543%" y="191.50"></text></g><g><title>dfbench`parquet::file::serialized_reader::read_page_header_len (160 samples, 0.06%)</title><rect x="76.8648%" y="197" width="0.0597%" height="15" fill="rgb(220,193,23)" fg:x="206116" fg:w="160"/><text x="77.1148%" y="207.50"></text></g><g><title>dfbench`&lt;parquet::file::serialized_reader::SerializedPageReader&lt;R&gt; as parquet::column::page::PageReader&gt;::get_next_page (64,511 samples, 24.06%)</title><rect x="52.8674%" y="213" width="24.0574%" height="15" fill="rgb(230,90,52)" fg:x="141766" fg:w="64511"/><text x="53.1174%" y="223.50">dfbench`&lt;parquet::file::serialized_rea..</text></g><g><title>libsystem_platform.dylib`__bzero (299 samples, 0.11%)</title><rect x="76.9319%" y="213" width="0.1115%" height="15" fill="rgb(252,106,19)" fg:x="206296" fg:w="299"/><text x="77.1819%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1,554 samples, 0.58%)</title><rect x="77.0434%" y="213" width="0.5795%" height="15" fill="rgb(206,74,20)" fg:x="206595" fg:w="1554"/><text x="77.2934%" y="223.50"></text></g><g><title>dfbench`parquet::column::reader::GenericColumnReader&lt;R,D,V&gt;::read_new_page (69,616 samples, 25.96%)</title><rect x="51.7095%" y="229" width="25.9612%" height="15" fill="rgb(230,138,44)" fg:x="138661" fg:w="69616"/><text x="51.9595%" y="239.50">dfbench`parquet::column::reader::GenericCo..</text></g><g><title>libsystem_platform.dylib`_platform_memset (128 samples, 0.05%)</title><rect x="77.6229%" y="213" width="0.0477%" height="15" fill="rgb(235,182,43)" fg:x="208149" fg:w="128"/><text x="77.8729%" y="223.50"></text></g><g><title>dfbench`parquet::encodings::rle::RleDecoder::reload (580 samples, 0.22%)</title><rect x="78.4788%" y="213" width="0.2163%" height="15" fill="rgb(242,16,51)" fg:x="210444" fg:w="580"/><text x="78.7288%" y="223.50"></text></g><g><title>dfbench`parquet::util::bit_util::BitReader::get_vlq_int (263 samples, 0.10%)</title><rect x="78.5970%" y="197" width="0.0981%" height="15" fill="rgb(248,9,4)" fg:x="210761" fg:w="263"/><text x="78.8470%" y="207.50"></text></g><g><title>dfbench`parquet::util::bit_pack::unpack16 (84 samples, 0.03%)</title><rect x="78.9461%" y="197" width="0.0313%" height="15" fill="rgb(210,31,22)" fg:x="211697" fg:w="84"/><text x="79.1961%" y="207.50"></text></g><g><title>dfbench`parquet::util::bit_pack::unpack32 (142 samples, 0.05%)</title><rect x="78.9774%" y="197" width="0.0530%" height="15" fill="rgb(239,54,39)" fg:x="211781" fg:w="142"/><text x="79.2274%" y="207.50"></text></g><g><title>dfbench`parquet::util::bit_pack::unpack8 (114 samples, 0.04%)</title><rect x="79.0303%" y="197" width="0.0425%" height="15" fill="rgb(230,99,41)" fg:x="211923" fg:w="114"/><text x="79.2803%" y="207.50"></text></g><g><title>dfbench`parquet::util::bit_util::BitReader::get_value (221 samples, 0.08%)</title><rect x="79.0728%" y="197" width="0.0824%" height="15" fill="rgb(253,106,12)" fg:x="212037" fg:w="221"/><text x="79.3228%" y="207.50"></text></g><g><title>dfbench`parquet::util::bit_util::BitReader::get_batch (1,245 samples, 0.46%)</title><rect x="78.6969%" y="213" width="0.4643%" height="15" fill="rgb(213,46,41)" fg:x="211029" fg:w="1245"/><text x="78.9469%" y="223.50"></text></g><g><title>dfbench`parquet::util::bit_util::BitReader::get_value (52 samples, 0.02%)</title><rect x="79.1612%" y="213" width="0.0194%" height="15" fill="rgb(215,133,35)" fg:x="212274" fg:w="52"/><text x="79.4112%" y="223.50"></text></g><g><title>dfbench`parquet::encodings::rle::RleDecoder::get_batch (4,121 samples, 1.54%)</title><rect x="77.6707%" y="229" width="1.5368%" height="15" fill="rgb(213,28,5)" fg:x="208277" fg:w="4121"/><text x="77.9207%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (70 samples, 0.03%)</title><rect x="79.1814%" y="213" width="0.0261%" height="15" fill="rgb(215,77,49)" fg:x="212328" fg:w="70"/><text x="79.4314%" y="223.50"></text></g><g><title>dfbench`parquet::encodings::rle::RleDecoder::reload (45 samples, 0.02%)</title><rect x="79.2075%" y="229" width="0.0168%" height="15" fill="rgb(248,100,22)" fg:x="212398" fg:w="45"/><text x="79.4575%" y="239.50"></text></g><g><title>dfbench`&lt;parquet::arrow::array_reader::byte_view_array::ByteViewArrayReader as parquet::arrow::array_reader::ArrayReader&gt;::read_records (157,905 samples, 58.89%)</title><rect x="20.3532%" y="245" width="58.8859%" height="15" fill="rgb(208,67,9)" fg:x="54578" fg:w="157905"/><text x="20.6032%" y="255.50">dfbench`&lt;parquet::arrow::array_reader::byte_view_array::ByteViewArrayReader as parquet::arrow::ar..</text></g><g><title>dfbench`parquet::util::bit_util::BitReader::get_batch (40 samples, 0.01%)</title><rect x="79.2243%" y="229" width="0.0149%" height="15" fill="rgb(219,133,21)" fg:x="212443" fg:w="40"/><text x="79.4743%" y="239.50"></text></g><g><title>dfbench`alloc::raw_vec::finish_grow (32 samples, 0.01%)</title><rect x="79.2604%" y="213" width="0.0119%" height="15" fill="rgb(246,46,29)" fg:x="212540" fg:w="32"/><text x="79.5104%" y="223.50"></text></g><g><title>dfbench`alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (42 samples, 0.02%)</title><rect x="79.2574%" y="229" width="0.0157%" height="15" fill="rgb(246,185,52)" fg:x="212532" fg:w="42"/><text x="79.5074%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (175 samples, 0.07%)</title><rect x="79.2884%" y="197" width="0.0653%" height="15" fill="rgb(252,136,11)" fg:x="212615" fg:w="175"/><text x="79.5384%" y="207.50"></text></g><g><title>dfbench`&lt;parquet::column::reader::decoder::ColumnValueDecoderImpl&lt;T&gt; as parquet::column::reader::decoder::ColumnValueDecoder&gt;::set_dict (190 samples, 0.07%)</title><rect x="79.2832%" y="213" width="0.0709%" height="15" fill="rgb(219,138,53)" fg:x="212601" fg:w="190"/><text x="79.5332%" y="223.50"></text></g><g><title>dfbench`&lt;parquet::compression::snappy_codec::SnappyCodec as parquet::compression::Codec&gt;::decompress (5,953 samples, 2.22%)</title><rect x="79.3648%" y="181" width="2.2200%" height="15" fill="rgb(211,51,23)" fg:x="212820" fg:w="5953"/><text x="79.6148%" y="191.50">d..</text></g><g><title>libsystem_platform.dylib`__bzero (368 samples, 0.14%)</title><rect x="81.5957%" y="181" width="0.1372%" height="15" fill="rgb(247,221,28)" fg:x="218802" fg:w="368"/><text x="81.8457%" y="191.50"></text></g><g><title>dfbench`parquet::file::serialized_reader::decode_page (6,731 samples, 2.51%)</title><rect x="79.3645%" y="197" width="2.5101%" height="15" fill="rgb(251,222,45)" fg:x="212819" fg:w="6731"/><text x="79.6145%" y="207.50">df..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (380 samples, 0.14%)</title><rect x="81.7329%" y="181" width="0.1417%" height="15" fill="rgb(217,162,53)" fg:x="219170" fg:w="380"/><text x="81.9829%" y="191.50"></text></g><g><title>dfbench`&lt;parquet::file::serialized_reader::SerializedPageReader&lt;R&gt; as parquet::column::page::PageReader&gt;::get_next_page (6,779 samples, 2.53%)</title><rect x="79.3544%" y="213" width="2.5280%" height="15" fill="rgb(229,93,14)" fg:x="212792" fg:w="6779"/><text x="79.6044%" y="223.50">df..</text></g><g><title>libsystem_platform.dylib`__bzero (380 samples, 0.14%)</title><rect x="81.8832%" y="213" width="0.1417%" height="15" fill="rgb(209,67,49)" fg:x="219573" fg:w="380"/><text x="82.1332%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (449 samples, 0.17%)</title><rect x="82.0249%" y="213" width="0.1674%" height="15" fill="rgb(213,87,29)" fg:x="219953" fg:w="449"/><text x="82.2749%" y="223.50"></text></g><g><title>dfbench`parquet::column::reader::GenericColumnReader&lt;R,D,V&gt;::read_new_page (7,856 samples, 2.93%)</title><rect x="79.2753%" y="229" width="2.9297%" height="15" fill="rgb(205,151,52)" fg:x="212580" fg:w="7856"/><text x="79.5253%" y="239.50">df..</text></g><g><title>libsystem_platform.dylib`_platform_memset (34 samples, 0.01%)</title><rect x="82.1923%" y="213" width="0.0127%" height="15" fill="rgb(253,215,39)" fg:x="220402" fg:w="34"/><text x="82.4423%" y="223.50"></text></g><g><title>dfbench`parquet::encodings::rle::RleDecoder::reload (161 samples, 0.06%)</title><rect x="84.1487%" y="213" width="0.0600%" height="15" fill="rgb(221,220,41)" fg:x="225648" fg:w="161"/><text x="84.3987%" y="223.50"></text></g><g><title>dfbench`parquet::util::bit_util::BitReader::get_vlq_int (60 samples, 0.02%)</title><rect x="84.1863%" y="197" width="0.0224%" height="15" fill="rgb(218,133,21)" fg:x="225749" fg:w="60"/><text x="84.4363%" y="207.50"></text></g><g><title>dfbench`DYLD-STUB$$memcpy (35 samples, 0.01%)</title><rect x="84.3284%" y="197" width="0.0131%" height="15" fill="rgb(221,193,43)" fg:x="226130" fg:w="35"/><text x="84.5784%" y="207.50"></text></g><g><title>dfbench`parquet::util::bit_pack::unpack32 (596 samples, 0.22%)</title><rect x="84.3444%" y="197" width="0.2223%" height="15" fill="rgb(240,128,52)" fg:x="226173" fg:w="596"/><text x="84.5944%" y="207.50"></text></g><g><title>dfbench`parquet::util::bit_util::BitReader::get_value (408 samples, 0.15%)</title><rect x="84.5667%" y="197" width="0.1522%" height="15" fill="rgb(253,114,12)" fg:x="226769" fg:w="408"/><text x="84.8167%" y="207.50"></text></g><g><title>dfbench`parquet::util::bit_util::BitReader::get_batch (1,425 samples, 0.53%)</title><rect x="84.2109%" y="213" width="0.5314%" height="15" fill="rgb(215,223,47)" fg:x="225815" fg:w="1425"/><text x="84.4609%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (63 samples, 0.02%)</title><rect x="84.7189%" y="197" width="0.0235%" height="15" fill="rgb(248,225,23)" fg:x="227177" fg:w="63"/><text x="84.9689%" y="207.50"></text></g><g><title>dfbench`parquet::util::bit_util::BitReader::get_value (135 samples, 0.05%)</title><rect x="84.7423%" y="213" width="0.0503%" height="15" fill="rgb(250,108,0)" fg:x="227240" fg:w="135"/><text x="84.9923%" y="223.50"></text></g><g><title>dfbench`parquet::encodings::rle::RleDecoder::get_batch_with_dict (6,972 samples, 2.60%)</title><rect x="82.2050%" y="229" width="2.6000%" height="15" fill="rgb(228,208,7)" fg:x="220436" fg:w="6972"/><text x="82.4550%" y="239.50">df..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (31 samples, 0.01%)</title><rect x="84.7934%" y="213" width="0.0116%" height="15" fill="rgb(244,45,10)" fg:x="227377" fg:w="31"/><text x="85.0434%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (283 samples, 0.11%)</title><rect x="84.8244%" y="229" width="0.1055%" height="15" fill="rgb(207,125,25)" fg:x="227460" fg:w="283"/><text x="85.0744%" y="239.50"></text></g><g><title>dfbench`&lt;parquet::arrow::array_reader::primitive_array::PrimitiveArrayReader&lt;T&gt; as parquet::arrow::array_reader::ArrayReader&gt;::read_records (15,265 samples, 5.69%)</title><rect x="79.2392%" y="245" width="5.6926%" height="15" fill="rgb(210,195,18)" fg:x="212483" fg:w="15265"/><text x="79.4892%" y="255.50">dfbench..</text></g><g><title>dfbench`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (36 samples, 0.01%)</title><rect x="84.9825%" y="229" width="0.0134%" height="15" fill="rgb(249,80,12)" fg:x="227884" fg:w="36"/><text x="85.2325%" y="239.50"></text></g><g><title>dfbench`mi_page_fresh_alloc (44 samples, 0.02%)</title><rect x="85.0825%" y="149" width="0.0164%" height="15" fill="rgb(221,65,9)" fg:x="228152" fg:w="44"/><text x="85.3325%" y="159.50"></text></g><g><title>dfbench`mi_segments_page_alloc (42 samples, 0.02%)</title><rect x="85.0832%" y="133" width="0.0157%" height="15" fill="rgb(235,49,36)" fg:x="228154" fg:w="42"/><text x="85.3332%" y="143.50"></text></g><g><title>dfbench`mi_find_page (177 samples, 0.07%)</title><rect x="85.0340%" y="165" width="0.0660%" height="15" fill="rgb(225,32,20)" fg:x="228022" fg:w="177"/><text x="85.2840%" y="175.50"></text></g><g><title>dfbench`_mi_malloc_generic (217 samples, 0.08%)</title><rect x="85.0280%" y="181" width="0.0809%" height="15" fill="rgb(215,141,46)" fg:x="228006" fg:w="217"/><text x="85.2780%" y="191.50"></text></g><g><title>dfbench`mi_heap_malloc_zero_aligned_at_generic (237 samples, 0.09%)</title><rect x="85.0250%" y="197" width="0.0884%" height="15" fill="rgb(250,160,47)" fg:x="227998" fg:w="237"/><text x="85.2750%" y="207.50"></text></g><g><title>dfbench`alloc::raw_vec::finish_grow (258 samples, 0.10%)</title><rect x="85.0224%" y="213" width="0.0962%" height="15" fill="rgb(216,222,40)" fg:x="227991" fg:w="258"/><text x="85.2724%" y="223.50"></text></g><g><title>dfbench`alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (324 samples, 0.12%)</title><rect x="85.0000%" y="229" width="0.1208%" height="15" fill="rgb(234,217,39)" fg:x="227931" fg:w="324"/><text x="85.2500%" y="239.50"></text></g><g><title>dfbench`core::hash::BuildHasher::hash_one (30 samples, 0.01%)</title><rect x="85.1220%" y="229" width="0.0112%" height="15" fill="rgb(207,178,40)" fg:x="228258" fg:w="30"/><text x="85.3720%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (46 samples, 0.02%)</title><rect x="85.1485%" y="197" width="0.0172%" height="15" fill="rgb(221,136,13)" fg:x="228329" fg:w="46"/><text x="85.3985%" y="207.50"></text></g><g><title>dfbench`&lt;parquet::column::reader::decoder::ColumnValueDecoderImpl&lt;T&gt; as parquet::column::reader::decoder::ColumnValueDecoder&gt;::set_dict (70 samples, 0.03%)</title><rect x="85.1399%" y="213" width="0.0261%" height="15" fill="rgb(249,199,10)" fg:x="228306" fg:w="70"/><text x="85.3899%" y="223.50"></text></g><g><title>dfbench`&lt;parquet::compression::snappy_codec::SnappyCodec as parquet::compression::Codec&gt;::decompress (5,820 samples, 2.17%)</title><rect x="85.1876%" y="181" width="2.1704%" height="15" fill="rgb(249,222,13)" fg:x="228434" fg:w="5820"/><text x="85.4376%" y="191.50">d..</text></g><g><title>libsystem_platform.dylib`__bzero (215 samples, 0.08%)</title><rect x="87.3729%" y="181" width="0.0802%" height="15" fill="rgb(244,185,38)" fg:x="234294" fg:w="215"/><text x="87.6229%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (328 samples, 0.12%)</title><rect x="87.4531%" y="181" width="0.1223%" height="15" fill="rgb(236,202,9)" fg:x="234509" fg:w="328"/><text x="87.7031%" y="191.50"></text></g><g><title>dfbench`parquet::file::serialized_reader::decode_page (6,421 samples, 2.39%)</title><rect x="85.1858%" y="197" width="2.3945%" height="15" fill="rgb(250,229,37)" fg:x="228429" fg:w="6421"/><text x="85.4358%" y="207.50">df..</text></g><g><title>dfbench`parquet::file::serialized_reader::read_page_header_len (74 samples, 0.03%)</title><rect x="87.5803%" y="197" width="0.0276%" height="15" fill="rgb(206,174,23)" fg:x="234850" fg:w="74"/><text x="87.8303%" y="207.50"></text></g><g><title>dfbench`&lt;parquet::file::serialized_reader::SerializedPageReader&lt;R&gt; as parquet::column::page::PageReader&gt;::get_next_page (6,549 samples, 2.44%)</title><rect x="85.1664%" y="213" width="2.4423%" height="15" fill="rgb(211,33,43)" fg:x="228377" fg:w="6549"/><text x="85.4164%" y="223.50">df..</text></g><g><title>libsystem_platform.dylib`__bzero (181 samples, 0.07%)</title><rect x="87.6116%" y="213" width="0.0675%" height="15" fill="rgb(245,58,50)" fg:x="234934" fg:w="181"/><text x="87.8616%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (297 samples, 0.11%)</title><rect x="87.6791%" y="213" width="0.1108%" height="15" fill="rgb(244,68,36)" fg:x="235115" fg:w="297"/><text x="87.9291%" y="223.50"></text></g><g><title>dfbench`parquet::column::reader::GenericColumnReader&lt;R,D,V&gt;::read_new_page (7,202 samples, 2.69%)</title><rect x="85.1339%" y="229" width="2.6858%" height="15" fill="rgb(232,229,15)" fg:x="228290" fg:w="7202"/><text x="85.3839%" y="239.50">df..</text></g><g><title>libsystem_platform.dylib`_platform_memset (80 samples, 0.03%)</title><rect x="87.7899%" y="213" width="0.0298%" height="15" fill="rgb(254,30,23)" fg:x="235412" fg:w="80"/><text x="88.0399%" y="223.50"></text></g><g><title>dfbench`DYLD-STUB$$memcpy (48 samples, 0.02%)</title><rect x="92.2947%" y="213" width="0.0179%" height="15" fill="rgb(235,160,14)" fg:x="247492" fg:w="48"/><text x="92.5447%" y="223.50"></text></g><g><title>dfbench`parquet::encodings::rle::RleDecoder::reload (2,553 samples, 0.95%)</title><rect x="92.3149%" y="213" width="0.9521%" height="15" fill="rgb(212,155,44)" fg:x="247546" fg:w="2553"/><text x="92.5649%" y="223.50"></text></g><g><title>dfbench`parquet::util::bit_util::BitReader::get_vlq_int (930 samples, 0.35%)</title><rect x="92.9201%" y="197" width="0.3468%" height="15" fill="rgb(226,2,50)" fg:x="249169" fg:w="930"/><text x="93.1701%" y="207.50"></text></g><g><title>dfbench`DYLD-STUB$$memcpy (61 samples, 0.02%)</title><rect x="94.2518%" y="197" width="0.0227%" height="15" fill="rgb(234,177,6)" fg:x="252740" fg:w="61"/><text x="94.5018%" y="207.50"></text></g><g><title>dfbench`parquet::util::bit_pack::unpack16 (434 samples, 0.16%)</title><rect x="94.2746%" y="197" width="0.1618%" height="15" fill="rgb(217,24,9)" fg:x="252801" fg:w="434"/><text x="94.5246%" y="207.50"></text></g><g><title>dfbench`parquet::util::bit_pack::unpack32 (982 samples, 0.37%)</title><rect x="94.4364%" y="197" width="0.3662%" height="15" fill="rgb(220,13,46)" fg:x="253235" fg:w="982"/><text x="94.6864%" y="207.50"></text></g><g><title>dfbench`parquet::util::bit_pack::unpack8 (383 samples, 0.14%)</title><rect x="94.8026%" y="197" width="0.1428%" height="15" fill="rgb(239,221,27)" fg:x="254217" fg:w="383"/><text x="95.0526%" y="207.50"></text></g><g><title>dfbench`parquet::util::bit_util::BitReader::get_value (958 samples, 0.36%)</title><rect x="94.9454%" y="197" width="0.3573%" height="15" fill="rgb(222,198,25)" fg:x="254600" fg:w="958"/><text x="95.1954%" y="207.50"></text></g><g><title>dfbench`parquet::util::bit_util::BitReader::get_batch (5,620 samples, 2.10%)</title><rect x="93.2755%" y="213" width="2.0958%" height="15" fill="rgb(211,99,13)" fg:x="250122" fg:w="5620"/><text x="93.5255%" y="223.50">d..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (184 samples, 0.07%)</title><rect x="95.3027%" y="197" width="0.0686%" height="15" fill="rgb(232,111,31)" fg:x="255558" fg:w="184"/><text x="95.5527%" y="207.50"></text></g><g><title>dfbench`parquet::util::bit_util::BitReader::get_value (359 samples, 0.13%)</title><rect x="95.3713%" y="213" width="0.1339%" height="15" fill="rgb(245,82,37)" fg:x="255742" fg:w="359"/><text x="95.6213%" y="223.50"></text></g><g><title>dfbench`parquet::util::bit_util::BitReader::get_vlq_int (27 samples, 0.01%)</title><rect x="95.5052%" y="213" width="0.0101%" height="15" fill="rgb(227,149,46)" fg:x="256101" fg:w="27"/><text x="95.7552%" y="223.50"></text></g><g><title>dfbench`parquet::encodings::rle::RleDecoder::get_batch_with_dict (21,116 samples, 7.87%)</title><rect x="87.8197%" y="229" width="7.8746%" height="15" fill="rgb(218,36,50)" fg:x="235492" fg:w="21116"/><text x="88.0697%" y="239.50">dfbench`par..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (480 samples, 0.18%)</title><rect x="95.5153%" y="213" width="0.1790%" height="15" fill="rgb(226,80,48)" fg:x="256128" fg:w="480"/><text x="95.7653%" y="223.50"></text></g><g><title>dfbench`parquet::encodings::rle::RleDecoder::reload (287 samples, 0.11%)</title><rect x="95.6943%" y="229" width="0.1070%" height="15" fill="rgb(238,224,15)" fg:x="256608" fg:w="287"/><text x="95.9443%" y="239.50"></text></g><g><title>dfbench`parquet::util::bit_util::BitReader::get_batch (299 samples, 0.11%)</title><rect x="95.8013%" y="229" width="0.1115%" height="15" fill="rgb(241,136,10)" fg:x="256895" fg:w="299"/><text x="96.0513%" y="239.50"></text></g><g><title>dfbench`parquet::arrow::array_reader::read_records (29,436 samples, 10.98%)</title><rect x="84.9512%" y="245" width="10.9773%" height="15" fill="rgb(208,32,45)" fg:x="227800" fg:w="29436"/><text x="85.2012%" y="255.50">dfbench`parquet:..</text></g><g><title>dfbench`parquet::encodings::rle::RleDecoder::get_batch_with_dict (29 samples, 0.01%)</title><rect x="95.9389%" y="245" width="0.0108%" height="15" fill="rgb(207,135,9)" fg:x="257264" fg:w="29"/><text x="96.1889%" y="255.50"></text></g><g><title>libsystem_platform.dylib`__bzero (1,083 samples, 0.40%)</title><rect x="95.9497%" y="245" width="0.4039%" height="15" fill="rgb(206,86,44)" fg:x="257293" fg:w="1083"/><text x="96.1997%" y="255.50"></text></g><g><title>dfbench`&lt;parquet::arrow::array_reader::struct_array::StructArrayReader as parquet::arrow::array_reader::ArrayReader&gt;::read_records (206,367 samples, 76.96%)</title><rect x="20.3454%" y="261" width="76.9584%" height="15" fill="rgb(245,177,15)" fg:x="54557" fg:w="206367"/><text x="20.5954%" y="271.50">dfbench`&lt;parquet::arrow::array_reader::struct_array::StructArrayReader as parquet::arrow::array_reader::ArrayReader&gt;::read_recor..</text></g><g><title>libsystem_platform.dylib`_platform_memset (2,548 samples, 0.95%)</title><rect x="96.3536%" y="245" width="0.9502%" height="15" fill="rgb(206,64,50)" fg:x="258376" fg:w="2548"/><text x="96.6036%" y="255.50"></text></g><g><title>dfbench`parquet::arrow::array_reader::read_records (58 samples, 0.02%)</title><rect x="97.3109%" y="261" width="0.0216%" height="15" fill="rgb(234,36,40)" fg:x="260943" fg:w="58"/><text x="97.5609%" y="271.50"></text></g><g><title>dfbench`&lt;parquet::arrow::arrow_reader::ParquetRecordBatchReader as core::iter::traits::iterator::Iterator&gt;::next (220,164 samples, 82.10%)</title><rect x="15.2297%" y="277" width="82.1036%" height="15" fill="rgb(213,64,8)" fg:x="40839" fg:w="220164"/><text x="15.4797%" y="287.50">dfbench`&lt;parquet::arrow::arrow_reader::ParquetRecordBatchReader as core::iter::traits::iterator::Iterator&gt;::next</text></g><g><title>dfbench`bytes::bytes::promotable_even_drop (297 samples, 0.11%)</title><rect x="97.3422%" y="181" width="0.1108%" height="15" fill="rgb(210,75,36)" fg:x="261027" fg:w="297"/><text x="97.5922%" y="191.50"></text></g><g><title>dfbench`mi_free_block_mt (297 samples, 0.11%)</title><rect x="97.3422%" y="165" width="0.1108%" height="15" fill="rgb(229,88,21)" fg:x="261027" fg:w="297"/><text x="97.5922%" y="175.50"></text></g><g><title>dfbench`_mi_os_reset (297 samples, 0.11%)</title><rect x="97.3422%" y="149" width="0.1108%" height="15" fill="rgb(252,204,47)" fg:x="261027" fg:w="297"/><text x="97.5922%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`madvise (297 samples, 0.11%)</title><rect x="97.3422%" y="133" width="0.1108%" height="15" fill="rgb(208,77,27)" fg:x="261027" fg:w="297"/><text x="97.5922%" y="143.50"></text></g><g><title>dfbench`core::ptr::drop_in_place&lt;parquet::file::serialized_reader::SerializedPageReader&lt;parquet::arrow::async_reader::ColumnChunkData&gt;&gt; (300 samples, 0.11%)</title><rect x="97.3418%" y="213" width="0.1119%" height="15" fill="rgb(221,76,26)" fg:x="261026" fg:w="300"/><text x="97.5918%" y="223.50"></text></g><g><title>dfbench`alloc::sync::Arc&lt;T,A&gt;::drop_slow (299 samples, 0.11%)</title><rect x="97.3422%" y="197" width="0.1115%" height="15" fill="rgb(225,139,18)" fg:x="261027" fg:w="299"/><text x="97.5922%" y="207.50"></text></g><g><title>dfbench`core::ptr::drop_in_place&lt;core::option::Option&lt;parquet::column::reader::GenericColumnReader&lt;parquet::column::reader::decoder::RepetitionLevelDecoderImpl,parquet::arrow::record_reader::definition_levels::DefinitionLevelBufferDecoder,parquet::arrow::array_reader::byte_view_array::ByteViewArrayColumnValueDecoder&gt;&gt;&gt; (314 samples, 0.12%)</title><rect x="97.3374%" y="229" width="0.1171%" height="15" fill="rgb(230,137,11)" fg:x="261014" fg:w="314"/><text x="97.5874%" y="239.50"></text></g><g><title>dfbench`core::ptr::drop_in_place&lt;parquet::encodings::decoding::DictDecoder&lt;parquet::data_type::DoubleType&gt;&gt; (39 samples, 0.01%)</title><rect x="97.4630%" y="213" width="0.0145%" height="15" fill="rgb(212,28,1)" fg:x="261351" fg:w="39"/><text x="97.7130%" y="223.50"></text></g><g><title>dfbench`core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;parquet::basic::Encoding,alloc::boxed::Box&lt;dyn parquet::encodings::decoding::Decoder&lt;parquet::data_type::BoolType&gt;&gt;&gt;&gt; (66 samples, 0.02%)</title><rect x="97.4627%" y="229" width="0.0246%" height="15" fill="rgb(248,164,17)" fg:x="261350" fg:w="66"/><text x="97.7127%" y="239.50"></text></g><g><title>dfbench`core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::boxed::Box&lt;dyn arrow_json::reader::ArrayDecoder&gt;&gt;&gt; (414 samples, 0.15%)</title><rect x="97.3355%" y="245" width="0.1544%" height="15" fill="rgb(222,171,42)" fg:x="261009" fg:w="414"/><text x="97.5855%" y="255.50"></text></g><g><title>dfbench`core::ptr::drop_in_place&lt;parquet::arrow::arrow_reader::ParquetRecordBatchReader&gt; (421 samples, 0.16%)</title><rect x="97.3340%" y="277" width="0.1570%" height="15" fill="rgb(243,84,45)" fg:x="261005" fg:w="421"/><text x="97.5840%" y="287.50"></text></g><g><title>dfbench`core::ptr::drop_in_place&lt;parquet::arrow::array_reader::struct_array::StructArrayReader&gt; (417 samples, 0.16%)</title><rect x="97.3355%" y="261" width="0.1555%" height="15" fill="rgb(252,49,23)" fg:x="261009" fg:w="417"/><text x="97.5855%" y="271.50"></text></g><g><title>dfbench`mi_segment_try_purge (180 samples, 0.07%)</title><rect x="97.5130%" y="69" width="0.0671%" height="15" fill="rgb(215,19,7)" fg:x="261485" fg:w="180"/><text x="97.7630%" y="79.50"></text></g><g><title>dfbench`mi_segment_purge (180 samples, 0.07%)</title><rect x="97.5130%" y="53" width="0.0671%" height="15" fill="rgb(238,81,41)" fg:x="261485" fg:w="180"/><text x="97.7630%" y="63.50"></text></g><g><title>libsystem_kernel.dylib`madvise (180 samples, 0.07%)</title><rect x="97.5130%" y="37" width="0.0671%" height="15" fill="rgb(210,199,37)" fg:x="261485" fg:w="180"/><text x="97.7630%" y="47.50"></text></g><g><title>dfbench`_mi_page_free (182 samples, 0.07%)</title><rect x="97.5126%" y="133" width="0.0679%" height="15" fill="rgb(244,192,49)" fg:x="261484" fg:w="182"/><text x="97.7626%" y="143.50"></text></g><g><title>dfbench`mi_segment_page_clear (182 samples, 0.07%)</title><rect x="97.5126%" y="117" width="0.0679%" height="15" fill="rgb(226,211,11)" fg:x="261484" fg:w="182"/><text x="97.7626%" y="127.50"></text></g><g><title>dfbench`mi_segment_span_free_coalesce (182 samples, 0.07%)</title><rect x="97.5126%" y="101" width="0.0679%" height="15" fill="rgb(236,162,54)" fg:x="261484" fg:w="182"/><text x="97.7626%" y="111.50"></text></g><g><title>dfbench`mi_segment_span_free (181 samples, 0.07%)</title><rect x="97.5130%" y="85" width="0.0675%" height="15" fill="rgb(220,229,9)" fg:x="261485" fg:w="181"/><text x="97.7630%" y="95.50"></text></g><g><title>dfbench`mi_find_page (202 samples, 0.08%)</title><rect x="97.5100%" y="149" width="0.0753%" height="15" fill="rgb(250,87,22)" fg:x="261477" fg:w="202"/><text x="97.7600%" y="159.50"></text></g><g><title>dfbench`mi_heap_malloc_zero_aligned_at_generic (203 samples, 0.08%)</title><rect x="97.5100%" y="181" width="0.0757%" height="15" fill="rgb(239,43,17)" fg:x="261477" fg:w="203"/><text x="97.7600%" y="191.50"></text></g><g><title>dfbench`_mi_malloc_generic (203 samples, 0.08%)</title><rect x="97.5100%" y="165" width="0.0757%" height="15" fill="rgb(231,177,25)" fg:x="261477" fg:w="203"/><text x="97.7600%" y="175.50"></text></g><g><title>dfbench`parquet::compression::create_codec (206 samples, 0.08%)</title><rect x="97.5093%" y="197" width="0.0768%" height="15" fill="rgb(219,179,1)" fg:x="261475" fg:w="206"/><text x="97.7593%" y="207.50"></text></g><g><title>dfbench`&lt;parquet::arrow::async_reader::InMemoryRowGroup as parquet::arrow::array_reader::RowGroups&gt;::column_chunks (224 samples, 0.08%)</title><rect x="97.5063%" y="213" width="0.0835%" height="15" fill="rgb(238,219,53)" fg:x="261467" fg:w="224"/><text x="97.7563%" y="223.50"></text></g><g><title>dfbench`parquet::arrow::array_reader::builder::build_reader (240 samples, 0.09%)</title><rect x="97.5033%" y="229" width="0.0895%" height="15" fill="rgb(232,167,36)" fg:x="261459" fg:w="240"/><text x="97.7533%" y="239.50"></text></g><g><title>dfbench`parquet::arrow::array_reader::builder::build_reader (281 samples, 0.10%)</title><rect x="97.4929%" y="245" width="0.1048%" height="15" fill="rgb(244,19,51)" fg:x="261431" fg:w="281"/><text x="97.7429%" y="255.50"></text></g><g><title>dfbench`parquet::arrow::array_reader::builder::build_array_reader (290 samples, 0.11%)</title><rect x="97.4917%" y="261" width="0.1081%" height="15" fill="rgb(224,6,22)" fg:x="261428" fg:w="290"/><text x="97.7417%" y="271.50"></text></g><g><title>dfbench`parquet::arrow::async_reader::InMemoryRowGroup::fetch::_{{closure}} (47 samples, 0.02%)</title><rect x="97.5999%" y="261" width="0.0175%" height="15" fill="rgb(224,145,5)" fg:x="261718" fg:w="47"/><text x="97.8499%" y="271.50"></text></g><g><title>dfbench`&lt;futures_util::stream::stream::map::Map&lt;St,F&gt; as futures_core::stream::Stream&gt;::poll_next (221,749 samples, 82.69%)</title><rect x="14.9231%" y="293" width="82.6946%" height="15" fill="rgb(234,130,49)" fg:x="40017" fg:w="221749"/><text x="15.1731%" y="303.50">dfbench`&lt;futures_util::stream::stream::map::Map&lt;St,F&gt; as futures_core::stream::Stream&gt;::poll_next</text></g><g><title>dfbench`parquet::arrow::async_reader::ReaderFactory&lt;T&gt;::read_row_group::_{{closure}} (340 samples, 0.13%)</title><rect x="97.4910%" y="277" width="0.1268%" height="15" fill="rgb(254,6,2)" fg:x="261426" fg:w="340"/><text x="97.7410%" y="287.50"></text></g><g><title>dfbench`arrow_array::record_batch::RecordBatch::try_new_impl (47 samples, 0.02%)</title><rect x="97.6372%" y="277" width="0.0175%" height="15" fill="rgb(208,96,46)" fg:x="261818" fg:w="47"/><text x="97.8872%" y="287.50"></text></g><g><title>dfbench`datafusion::datasource::physical_plan::file_scan_config::PartitionColumnProjector::project (107 samples, 0.04%)</title><rect x="97.6182%" y="293" width="0.0399%" height="15" fill="rgb(239,3,39)" fg:x="261767" fg:w="107"/><text x="97.8682%" y="303.50"></text></g><g><title>dfbench`&lt;datafusion::datasource::physical_plan::file_stream::FileStream&lt;F&gt; as futures_core::stream::Stream&gt;::poll_next (222,595 samples, 83.01%)</title><rect x="14.6662%" y="309" width="83.0101%" height="15" fill="rgb(233,210,1)" fg:x="39328" fg:w="222595"/><text x="14.9162%" y="319.50">dfbench`&lt;datafusion::datasource::physical_plan::file_stream::FileStream&lt;F&gt; as futures_core::stream::Stream&gt;::poll_next</text></g><g><title>dfbench`&lt;arrow_array::array::boolean_array::BooleanArray as core::convert::From&lt;alloc::vec::Vec&lt;bool&gt;&gt;&gt;::from (160 samples, 0.06%)</title><rect x="97.9053%" y="245" width="0.0597%" height="15" fill="rgb(244,137,37)" fg:x="262537" fg:w="160"/><text x="98.1553%" y="255.50"></text></g><g><title>dfbench`memchr::memmem::searcher::searcher_kind_neon (4,134 samples, 1.54%)</title><rect x="97.9650%" y="245" width="1.5417%" height="15" fill="rgb(240,136,2)" fg:x="262697" fg:w="4134"/><text x="98.2150%" y="255.50"></text></g><g><title>dfbench`arrow_string::predicate::Predicate::evaluate_array (4,863 samples, 1.81%)</title><rect x="97.6939%" y="261" width="1.8135%" height="15" fill="rgb(239,18,37)" fg:x="261970" fg:w="4863"/><text x="97.9439%" y="271.50">d..</text></g><g><title>dfbench`arrow_string::like::op_scalar (5,203 samples, 1.94%)</title><rect x="97.6931%" y="277" width="1.9403%" height="15" fill="rgb(218,185,22)" fg:x="261968" fg:w="5203"/><text x="97.9431%" y="287.50">d..</text></g><g><title>dfbench`memchr::memmem::searcher::searcher_kind_neon (336 samples, 0.13%)</title><rect x="99.5081%" y="261" width="0.1253%" height="15" fill="rgb(225,218,4)" fg:x="266835" fg:w="336"/><text x="99.7581%" y="271.50"></text></g><g><title>dfbench`&lt;datafusion_physical_expr::expressions::like::LikeExpr as datafusion_physical_expr_common::physical_expr::PhysicalExpr&gt;::evaluate (5,270 samples, 1.97%)</title><rect x="97.6778%" y="309" width="1.9653%" height="15" fill="rgb(230,182,32)" fg:x="261927" fg:w="5270"/><text x="97.9278%" y="319.50">d..</text></g><g><title>dfbench`datafusion_physical_expr_common::datum::apply_cmp (5,248 samples, 1.96%)</title><rect x="97.6860%" y="293" width="1.9571%" height="15" fill="rgb(242,56,43)" fg:x="261949" fg:w="5248"/><text x="97.9360%" y="303.50">d..</text></g><g><title>dfbench`&lt;datafusion_physical_plan::filter::filter_coalesce::PrimitiveFilterBuilder&lt;T,_&gt; as datafusion_physical_plan::filter::filter_coalesce::FilterCoalescer&gt;::append_filtered_array (79 samples, 0.03%)</title><rect x="99.6431%" y="309" width="0.0295%" height="15" fill="rgb(233,99,24)" fg:x="267197" fg:w="79"/><text x="99.8931%" y="319.50"></text></g><g><title>dfbench`datafusion_physical_plan::filter::filter_coalesce::bytes_view::ByteViewFilterBuilder&lt;B&gt;::do_append_val_inner (34 samples, 0.01%)</title><rect x="99.6763%" y="293" width="0.0127%" height="15" fill="rgb(234,209,42)" fg:x="267286" fg:w="34"/><text x="99.9263%" y="303.50"></text></g><g><title>dfbench`&lt;datafusion_physical_plan::filter::filter_coalesce::bytes_view::ByteViewFilterBuilder&lt;B&gt; as datafusion_physical_plan::filter::filter_coalesce::FilterCoalescer&gt;::append_filtered_array (49 samples, 0.02%)</title><rect x="99.6726%" y="309" width="0.0183%" height="15" fill="rgb(227,7,12)" fg:x="267276" fg:w="49"/><text x="99.9226%" y="319.50"></text></g><g><title>dfbench`_mi_page_free (61 samples, 0.02%)</title><rect x="99.7076%" y="245" width="0.0227%" height="15" fill="rgb(245,203,43)" fg:x="267370" fg:w="61"/><text x="99.9576%" y="255.50"></text></g><g><title>dfbench`mi_segment_page_clear (59 samples, 0.02%)</title><rect x="99.7084%" y="229" width="0.0220%" height="15" fill="rgb(238,205,33)" fg:x="267372" fg:w="59"/><text x="99.9584%" y="239.50"></text></g><g><title>dfbench`mi_segment_span_free_coalesce (56 samples, 0.02%)</title><rect x="99.7095%" y="213" width="0.0209%" height="15" fill="rgb(231,56,7)" fg:x="267375" fg:w="56"/><text x="99.9595%" y="223.50"></text></g><g><title>dfbench`mi_segment_span_free (49 samples, 0.02%)</title><rect x="99.7121%" y="197" width="0.0183%" height="15" fill="rgb(244,186,29)" fg:x="267382" fg:w="49"/><text x="99.9621%" y="207.50"></text></g><g><title>libsystem_c.dylib`clock_gettime (30 samples, 0.01%)</title><rect x="99.7192%" y="181" width="0.0112%" height="15" fill="rgb(234,111,31)" fg:x="267401" fg:w="30"/><text x="99.9692%" y="191.50"></text></g><g><title>libsystem_c.dylib`_mach_boottime_usec (28 samples, 0.01%)</title><rect x="99.7199%" y="165" width="0.0104%" height="15" fill="rgb(241,149,10)" fg:x="267403" fg:w="28"/><text x="99.9699%" y="175.50"></text></g><g><title>dfbench`mi_segment_free (31 samples, 0.01%)</title><rect x="99.7308%" y="245" width="0.0116%" height="15" fill="rgb(249,206,44)" fg:x="267432" fg:w="31"/><text x="99.9808%" y="255.50"></text></g><g><title>dfbench`mi_arenas_try_purge (31 samples, 0.01%)</title><rect x="99.7308%" y="229" width="0.0116%" height="15" fill="rgb(251,153,30)" fg:x="267432" fg:w="31"/><text x="99.9808%" y="239.50"></text></g><g><title>dfbench`mi_arena_purge (31 samples, 0.01%)</title><rect x="99.7308%" y="213" width="0.0116%" height="15" fill="rgb(239,152,38)" fg:x="267432" fg:w="31"/><text x="99.9808%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`madvise (31 samples, 0.01%)</title><rect x="99.7308%" y="197" width="0.0116%" height="15" fill="rgb(249,139,47)" fg:x="267432" fg:w="31"/><text x="99.9808%" y="207.50"></text></g><g><title>dfbench`alloc::sync::Arc&lt;T,A&gt;::drop_slow (106 samples, 0.04%)</title><rect x="99.7054%" y="261" width="0.0395%" height="15" fill="rgb(244,64,35)" fg:x="267364" fg:w="106"/><text x="99.9554%" y="271.50"></text></g><g><title>dfbench`mi_segment_try_purge (37 samples, 0.01%)</title><rect x="99.7565%" y="133" width="0.0138%" height="15" fill="rgb(216,46,15)" fg:x="267501" fg:w="37"/><text x="100.0065%" y="143.50"></text></g><g><title>dfbench`mi_segment_purge (37 samples, 0.01%)</title><rect x="99.7565%" y="117" width="0.0138%" height="15" fill="rgb(250,74,19)" fg:x="267501" fg:w="37"/><text x="100.0065%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`madvise (37 samples, 0.01%)</title><rect x="99.7565%" y="101" width="0.0138%" height="15" fill="rgb(249,42,33)" fg:x="267501" fg:w="37"/><text x="100.0065%" y="111.50"></text></g><g><title>dfbench`mi_segment_span_free (62 samples, 0.02%)</title><rect x="99.7528%" y="149" width="0.0231%" height="15" fill="rgb(242,149,17)" fg:x="267491" fg:w="62"/><text x="100.0028%" y="159.50"></text></g><g><title>dfbench`_mi_page_free (70 samples, 0.03%)</title><rect x="99.7501%" y="197" width="0.0261%" height="15" fill="rgb(244,29,21)" fg:x="267484" fg:w="70"/><text x="100.0001%" y="207.50"></text></g><g><title>dfbench`mi_segment_page_clear (70 samples, 0.03%)</title><rect x="99.7501%" y="181" width="0.0261%" height="15" fill="rgb(220,130,37)" fg:x="267484" fg:w="70"/><text x="100.0001%" y="191.50"></text></g><g><title>dfbench`mi_segment_span_free_coalesce (69 samples, 0.03%)</title><rect x="99.7505%" y="165" width="0.0257%" height="15" fill="rgb(211,67,2)" fg:x="267485" fg:w="69"/><text x="100.0005%" y="175.50"></text></g><g><title>dfbench`alloc::sync::Arc&lt;T,A&gt;::drop_slow (103 samples, 0.04%)</title><rect x="99.7487%" y="229" width="0.0384%" height="15" fill="rgb(235,68,52)" fg:x="267480" fg:w="103"/><text x="99.9987%" y="239.50"></text></g><g><title>dfbench`bytes::bytes::shared_drop (102 samples, 0.04%)</title><rect x="99.7490%" y="213" width="0.0380%" height="15" fill="rgb(246,142,3)" fg:x="267481" fg:w="102"/><text x="99.9990%" y="223.50"></text></g><g><title>dfbench`core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;arrow_buffer::buffer::immutable::Buffer&gt;&gt; (117 samples, 0.04%)</title><rect x="99.7449%" y="261" width="0.0436%" height="15" fill="rgb(241,25,7)" fg:x="267470" fg:w="117"/><text x="99.9949%" y="271.50"></text></g><g><title>dfbench`alloc::sync::Arc&lt;T,A&gt;::drop_slow (110 samples, 0.04%)</title><rect x="99.7475%" y="245" width="0.0410%" height="15" fill="rgb(242,119,39)" fg:x="267477" fg:w="110"/><text x="99.9975%" y="255.50"></text></g><g><title>dfbench`mi_free (28 samples, 0.01%)</title><rect x="99.7900%" y="261" width="0.0104%" height="15" fill="rgb(241,98,45)" fg:x="267591" fg:w="28"/><text x="100.0400%" y="271.50"></text></g><g><title>dfbench`core::ptr::drop_in_place&lt;arrow_array::array::byte_view_array::GenericByteViewArray&lt;arrow_array::types::BinaryViewType&gt;&gt; (271 samples, 0.10%)</title><rect x="99.7032%" y="277" width="0.1011%" height="15" fill="rgb(254,28,30)" fg:x="267358" fg:w="271"/><text x="99.9532%" y="287.50"></text></g><g><title>libsystem_c.dylib`_mach_boottime_usec (38 samples, 0.01%)</title><rect x="99.8408%" y="165" width="0.0142%" height="15" fill="rgb(241,142,54)" fg:x="267727" fg:w="38"/><text x="100.0908%" y="175.50"></text></g><g><title>libsystem_c.dylib`gettimeofday (36 samples, 0.01%)</title><rect x="99.8415%" y="149" width="0.0134%" height="15" fill="rgb(222,85,15)" fg:x="267729" fg:w="36"/><text x="100.0915%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (33 samples, 0.01%)</title><rect x="99.8426%" y="133" width="0.0123%" height="15" fill="rgb(210,85,47)" fg:x="267732" fg:w="33"/><text x="100.0926%" y="143.50"></text></g><g><title>dfbench`_mi_page_free (119 samples, 0.04%)</title><rect x="99.8113%" y="245" width="0.0444%" height="15" fill="rgb(224,206,25)" fg:x="267648" fg:w="119"/><text x="100.0613%" y="255.50"></text></g><g><title>dfbench`mi_segment_page_clear (111 samples, 0.04%)</title><rect x="99.8143%" y="229" width="0.0414%" height="15" fill="rgb(243,201,19)" fg:x="267656" fg:w="111"/><text x="100.0643%" y="239.50"></text></g><g><title>dfbench`mi_segment_span_free_coalesce (109 samples, 0.04%)</title><rect x="99.8150%" y="213" width="0.0406%" height="15" fill="rgb(236,59,4)" fg:x="267658" fg:w="109"/><text x="100.0650%" y="223.50"></text></g><g><title>dfbench`mi_segment_span_free (90 samples, 0.03%)</title><rect x="99.8221%" y="197" width="0.0336%" height="15" fill="rgb(254,179,45)" fg:x="267677" fg:w="90"/><text x="100.0721%" y="207.50"></text></g><g><title>libsystem_c.dylib`clock_gettime (41 samples, 0.02%)</title><rect x="99.8404%" y="181" width="0.0153%" height="15" fill="rgb(226,14,10)" fg:x="267726" fg:w="41"/><text x="100.0904%" y="191.50"></text></g><g><title>dfbench`alloc::sync::Arc&lt;T,A&gt;::drop_slow (166 samples, 0.06%)</title><rect x="99.8072%" y="261" width="0.0619%" height="15" fill="rgb(244,27,41)" fg:x="267637" fg:w="166"/><text x="100.0572%" y="271.50"></text></g><g><title>dfbench`mi_free (65 samples, 0.02%)</title><rect x="99.8699%" y="261" width="0.0242%" height="15" fill="rgb(235,35,32)" fg:x="267805" fg:w="65"/><text x="100.1199%" y="271.50"></text></g><g><title>dfbench`core::ptr::drop_in_place&lt;arrow_array::array::primitive_array::PrimitiveArray&lt;arrow_array::types::Int8Type&gt;&gt; (249 samples, 0.09%)</title><rect x="99.8042%" y="277" width="0.0929%" height="15" fill="rgb(218,68,31)" fg:x="267629" fg:w="249"/><text x="100.0542%" y="287.50"></text></g><g><title>dfbench`alloc::sync::Arc&lt;T,A&gt;::drop_slow (576 samples, 0.21%)</title><rect x="99.6953%" y="293" width="0.2148%" height="15" fill="rgb(207,120,37)" fg:x="267337" fg:w="576"/><text x="99.9453%" y="303.50"></text></g><g><title>dfbench`mi_free (30 samples, 0.01%)</title><rect x="99.8989%" y="277" width="0.0112%" height="15" fill="rgb(227,98,0)" fg:x="267883" fg:w="30"/><text x="100.1489%" y="287.50"></text></g><g><title>dfbench`core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::sync::Arc&lt;dyn arrow_array::array::Array&gt;&gt;&gt; (591 samples, 0.22%)</title><rect x="99.6927%" y="309" width="0.2204%" height="15" fill="rgb(207,7,3)" fg:x="267330" fg:w="591"/><text x="99.9427%" y="319.50"></text></g><g><title>dfbench`&lt;datafusion_physical_plan::filter::FilterExecStream as futures_core::stream::Stream&gt;::poll_next (228,660 samples, 85.27%)</title><rect x="14.6517%" y="325" width="85.2719%" height="15" fill="rgb(206,98,19)" fg:x="39289" fg:w="228660"/><text x="14.9017%" y="335.50">dfbench`&lt;datafusion_physical_plan::filter::FilterExecStream as futures_core::stream::Stream&gt;::poll_next</text></g><g><title>dfbench`&lt;datafusion_physical_plan::filter::filter_coalesce::PrimitiveFilterBuilder&lt;T,_&gt; as datafusion_physical_plan::filter::filter_coalesce::FilterCoalescer&gt;::append_filtered_array (41 samples, 0.02%)</title><rect x="99.9236%" y="325" width="0.0153%" height="15" fill="rgb(217,5,26)" fg:x="267949" fg:w="41"/><text x="100.1736%" y="335.50"></text></g><g><title>dfbench`&lt;datafusion_physical_plan::coalesce_batches::CoalesceBatchesStream as futures_core::stream::Stream&gt;::poll_next (228,743 samples, 85.30%)</title><rect x="14.6472%" y="341" width="85.3028%" height="15" fill="rgb(235,190,38)" fg:x="39277" fg:w="228743"/><text x="14.8972%" y="351.50">dfbench`&lt;datafusion_physical_plan::coalesce_batches::CoalesceBatchesStream as futures_core::stream::Stream&gt;::poll_next</text></g><g><title>dfbench`core::ptr::drop_in_place&lt;parquet::file::metadata::ColumnChunkMetaData&gt; (46 samples, 0.02%)</title><rect x="99.9523%" y="197" width="0.0172%" height="15" fill="rgb(247,86,24)" fg:x="268026" fg:w="46"/><text x="100.2023%" y="207.50"></text></g><g><title>dfbench`core::ptr::drop_in_place&lt;parquet::file::metadata::RowGroupMetaData&gt; (74 samples, 0.03%)</title><rect x="99.9515%" y="213" width="0.0276%" height="15" fill="rgb(205,101,16)" fg:x="268024" fg:w="74"/><text x="100.2015%" y="223.50"></text></g><g><title>dfbench`core::ptr::drop_in_place&lt;datafusion_physical_plan::coalesce_batches::CoalesceBatchesStream&gt; (81 samples, 0.03%)</title><rect x="99.9508%" y="341" width="0.0302%" height="15" fill="rgb(246,168,33)" fg:x="268022" fg:w="81"/><text x="100.2008%" y="351.50"></text></g><g><title>dfbench`core::ptr::drop_in_place&lt;datafusion_physical_plan::filter::FilterExecStream&gt; (81 samples, 0.03%)</title><rect x="99.9508%" y="325" width="0.0302%" height="15" fill="rgb(231,114,1)" fg:x="268022" fg:w="81"/><text x="100.2008%" y="335.50"></text></g><g><title>dfbench`core::ptr::drop_in_place&lt;datafusion::datasource::physical_plan::file_stream::FileStream&lt;datafusion::datasource::physical_plan::parquet::opener::ParquetOpener&gt;&gt; (81 samples, 0.03%)</title><rect x="99.9508%" y="309" width="0.0302%" height="15" fill="rgb(207,184,53)" fg:x="268022" fg:w="81"/><text x="100.2008%" y="319.50"></text></g><g><title>dfbench`core::ptr::drop_in_place&lt;datafusion::datasource::physical_plan::file_stream::FileStreamState&gt; (81 samples, 0.03%)</title><rect x="99.9508%" y="293" width="0.0302%" height="15" fill="rgb(224,95,51)" fg:x="268022" fg:w="81"/><text x="100.2008%" y="303.50"></text></g><g><title>dfbench`core::ptr::drop_in_place&lt;futures_util::stream::stream::map::Map&lt;futures_util::stream::try_stream::MapErr&lt;parquet::arrow::async_reader::ParquetRecordBatchStream&lt;alloc::boxed::Box&lt;dyn parquet::arrow::async_reader::AsyncFileReader&gt;&gt;,&lt;datafusion::datasource::physical_plan::parquet::opener::ParquetOpener as datafusion::datasource::physical_plan::file_stream::FileOpener&gt;::open::{{closure}}::{{closure}}&gt;,&lt;datafusion::datasource::physical_plan::parquet::opener::ParquetOpener as datafusion::datasource::physical_plan::file_stream::FileOpener&gt;::open::{{closure}}::{{closure}}&gt;&gt; (81 samples, 0.03%)</title><rect x="99.9508%" y="277" width="0.0302%" height="15" fill="rgb(212,188,45)" fg:x="268022" fg:w="81"/><text x="100.2008%" y="287.50"></text></g><g><title>dfbench`core::ptr::drop_in_place&lt;parquet::arrow::async_reader::ReaderFactory&lt;alloc::boxed::Box&lt;dyn parquet::arrow::async_reader::AsyncFileReader&gt;&gt;&gt; (81 samples, 0.03%)</title><rect x="99.9508%" y="261" width="0.0302%" height="15" fill="rgb(223,154,38)" fg:x="268022" fg:w="81"/><text x="100.2008%" y="271.50"></text></g><g><title>dfbench`alloc::sync::Arc&lt;T,A&gt;::drop_slow (81 samples, 0.03%)</title><rect x="99.9508%" y="245" width="0.0302%" height="15" fill="rgb(251,22,52)" fg:x="268022" fg:w="81"/><text x="100.2008%" y="255.50"></text></g><g><title>dfbench`core::ptr::drop_in_place&lt;parquet::file::metadata::ParquetMetaData&gt; (81 samples, 0.03%)</title><rect x="99.9508%" y="229" width="0.0302%" height="15" fill="rgb(229,209,22)" fg:x="268022" fg:w="81"/><text x="100.2008%" y="239.50"></text></g><g><title>dfbench`tokio::runtime::scheduler::multi_thread::worker::Context::run_task (228,840 samples, 85.34%)</title><rect x="14.6442%" y="405" width="85.3390%" height="15" fill="rgb(234,138,34)" fg:x="39269" fg:w="228840"/><text x="14.8942%" y="415.50">dfbench`tokio::runtime::scheduler::multi_thread::worker::Context::run_task</text></g><g><title>dfbench`tokio::runtime::task::raw::poll (228,836 samples, 85.34%)</title><rect x="14.6457%" y="389" width="85.3375%" height="15" fill="rgb(212,95,11)" fg:x="39273" fg:w="228836"/><text x="14.8957%" y="399.50">dfbench`tokio::runtime::task::raw::poll</text></g><g><title>dfbench`datafusion_physical_plan::common::spawn_buffered::_{{closure}} (228,835 samples, 85.34%)</title><rect x="14.6461%" y="373" width="85.3372%" height="15" fill="rgb(240,179,47)" fg:x="39274" fg:w="228835"/><text x="14.8961%" y="383.50">dfbench`datafusion_physical_plan::common::spawn_buffered::_{{closure}}</text></g><g><title>dfbench`&lt;datafusion_physical_plan::stream::RecordBatchStreamAdapter&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (228,834 samples, 85.34%)</title><rect x="14.6464%" y="357" width="85.3368%" height="15" fill="rgb(240,163,11)" fg:x="39275" fg:w="228834"/><text x="14.8964%" y="367.50">dfbench`&lt;datafusion_physical_plan::stream::RecordBatchStreamAdapter&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next</text></g><g><title>dfbench`core::ops::function::FnOnce::call_once{{vtable.shim}} (242,213 samples, 90.33%)</title><rect x="9.6601%" y="453" width="90.3261%" height="15" fill="rgb(236,37,12)" fg:x="25904" fg:w="242213"/><text x="9.9101%" y="463.50">dfbench`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>dfbench`std::sys::backtrace::__rust_begin_short_backtrace (242,213 samples, 90.33%)</title><rect x="9.6601%" y="437" width="90.3261%" height="15" fill="rgb(232,164,16)" fg:x="25904" fg:w="242213"/><text x="9.9101%" y="447.50">dfbench`std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>dfbench`tokio::runtime::task::raw::poll (242,200 samples, 90.32%)</title><rect x="9.6650%" y="421" width="90.3212%" height="15" fill="rgb(244,205,15)" fg:x="25917" fg:w="242200"/><text x="9.9150%" y="431.50">dfbench`tokio::runtime::task::raw::poll</text></g><g><title>dfbench`std::sys::pal::unix::thread::Thread::new::thread_start (242,214 samples, 90.33%)</title><rect x="9.6601%" y="469" width="90.3265%" height="15" fill="rgb(223,117,47)" fg:x="25904" fg:w="242214"/><text x="9.9101%" y="479.50">dfbench`std::sys::pal::unix::thread::Thread::new::thread_start</text></g><g><title>dfbench`_mi_free_delayed_block (32 samples, 0.01%)</title><rect x="99.9869%" y="405" width="0.0119%" height="15" fill="rgb(244,107,35)" fg:x="268119" fg:w="32"/><text x="100.2369%" y="415.50"></text></g><g><title>dfbench`_mi_page_free (31 samples, 0.01%)</title><rect x="99.9873%" y="389" width="0.0116%" height="15" fill="rgb(205,140,8)" fg:x="268120" fg:w="31"/><text x="100.2373%" y="399.50"></text></g><g><title>dfbench`mi_segment_page_clear (31 samples, 0.01%)</title><rect x="99.9873%" y="373" width="0.0116%" height="15" fill="rgb(228,84,46)" fg:x="268120" fg:w="31"/><text x="100.2373%" y="383.50"></text></g><g><title>dfbench`mi_segment_span_free_coalesce (31 samples, 0.01%)</title><rect x="99.9873%" y="357" width="0.0116%" height="15" fill="rgb(254,188,9)" fg:x="268120" fg:w="31"/><text x="100.2373%" y="367.50"></text></g><g><title>dfbench`mi_segment_span_free (31 samples, 0.01%)</title><rect x="99.9873%" y="341" width="0.0116%" height="15" fill="rgb(206,112,54)" fg:x="268120" fg:w="31"/><text x="100.2373%" y="351.50"></text></g><g><title>dfbench`mi_segment_try_purge (31 samples, 0.01%)</title><rect x="99.9873%" y="325" width="0.0116%" height="15" fill="rgb(216,84,49)" fg:x="268120" fg:w="31"/><text x="100.2373%" y="335.50"></text></g><g><title>dfbench`mi_segment_purge (31 samples, 0.01%)</title><rect x="99.9873%" y="309" width="0.0116%" height="15" fill="rgb(214,194,35)" fg:x="268120" fg:w="31"/><text x="100.2373%" y="319.50"></text></g><g><title>libsystem_kernel.dylib`madvise (31 samples, 0.01%)</title><rect x="99.9873%" y="293" width="0.0116%" height="15" fill="rgb(249,28,3)" fg:x="268120" fg:w="31"/><text x="100.2373%" y="303.50"></text></g><g><title>all (268,154 samples, 100%)</title><rect x="0.0000%" y="517" width="100.0000%" height="15" fill="rgb(222,56,52)" fg:x="0" fg:w="268154"/><text x="0.2500%" y="527.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (242,250 samples, 90.34%)</title><rect x="9.6601%" y="501" width="90.3399%" height="15" fill="rgb(245,217,50)" fg:x="25904" fg:w="242250"/><text x="9.9101%" y="511.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (242,250 samples, 90.34%)</title><rect x="9.6601%" y="485" width="90.3399%" height="15" fill="rgb(213,201,24)" fg:x="25904" fg:w="242250"/><text x="9.9101%" y="495.50">libsystem_pthread.dylib`_pthread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_exit (36 samples, 0.01%)</title><rect x="99.9866%" y="469" width="0.0134%" height="15" fill="rgb(248,116,28)" fg:x="268118" fg:w="36"/><text x="100.2366%" y="479.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_tsd_cleanup (35 samples, 0.01%)</title><rect x="99.9869%" y="453" width="0.0131%" height="15" fill="rgb(219,72,43)" fg:x="268119" fg:w="35"/><text x="100.2369%" y="463.50"></text></g><g><title>dfbench`_mi_thread_done (35 samples, 0.01%)</title><rect x="99.9869%" y="437" width="0.0131%" height="15" fill="rgb(209,138,14)" fg:x="268119" fg:w="35"/><text x="100.2369%" y="447.50"></text></g><g><title>dfbench`mi_heap_collect_ex (35 samples, 0.01%)</title><rect x="99.9869%" y="421" width="0.0131%" height="15" fill="rgb(222,18,33)" fg:x="268119" fg:w="35"/><text x="100.2369%" y="431.50"></text></g></svg></svg>