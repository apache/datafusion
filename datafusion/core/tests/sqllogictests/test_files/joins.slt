# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at

#   http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

##########
## Joins Tests
##########

# create table t1
statement ok
CREATE TABLE t1(a INT, b INT, c INT) AS VALUES
(1, 10, 50),
(2, 20, 60),
(3, 30, 70),
(4, 40, 80)

# create table t2
statement ok
CREATE TABLE t2(a INT, b INT, c INT) AS VALUES
(1, 100, 500),
(2, 200, 600),
(9, 300, 700),
(4, 400, 800)

# equijoin
query II nosort
SELECT t1.a, t2.b FROM t1 INNER JOIN t2 ON t1.a = t2.a ORDER BY t1.a
----
1 100
2 200
4 400

query II nosort
SELECT t1.a, t2.b FROM t1 INNER JOIN t2 ON t2.a = t1.a ORDER BY t1.a
----
1 100
2 200
4 400

# inner_join_nulls
query ??
SELECT * FROM (SELECT null AS id1) t1
INNER JOIN (SELECT null AS id2) t2 ON id1 = id2
----

statement ok
DROP TABLE t1

statement ok
DROP TABLE t2


# create table a
statement ok
CREATE TABLE a(a INT, b INT, c INT) AS VALUES
(1, 10, 50),
(2, 20, 60),
(3, 30, 70),
(4, 40, 80)

# create table b
statement ok
CREATE TABLE b(a INT, b INT, c INT) AS VALUES
(1, 100, 500),
(2, 200, 600),
(9, 300, 700),
(4, 400, 800)

# issue_3002
#    // repro case for https://github.com/apache/arrow-datafusion/issues/3002

query II
select a.a, b.b from a join b on a.a = b.b
----

statement ok
DROP TABLE a

statement ok
DROP TABLE b

# create table t1
statement ok
CREATE TABLE t1(t1_id INT, t1_name VARCHAR) AS VALUES
(11, 'a'),
(22, 'b'),
(33, 'c'),
(44, 'd'),
(77, 'e')

# create table t2
statement ok
CREATE TABLE t2(t2_id INT, t2_name VARCHAR) AS VALUES
(11, 'z'),
(22, 'y'),
(44, 'x'),
(55, 'w')

# left_join_unbalanced
#     // the t1_id is larger than t2_id so the join_selection optimizer should kick in
query ITT nosort
SELECT t1_id, t1_name, t2_name FROM t1 LEFT JOIN t2 ON t1_id = t2_id ORDER BY t1_id
----
11 a z
22 b y
33 c NULL
44 d x
77 e NULL

query ITT nosort
SELECT t1_id, t1_name, t2_name FROM t1 LEFT JOIN t2 ON t2_id = t1_id ORDER BY t1_id
----
11 a z
22 b y
33 c NULL
44 d x
77 e NULL


# cross_join_unbalanced
query ITT nosort
SELECT t1_id, t1_name, t2_name FROM t1 CROSS JOIN t2 ORDER BY t1_id, t1_name, t2_name
----
11 a w
11 a x
11 a y
11 a z
22 b w
22 b x
22 b y
22 b z
33 c w
33 c x
33 c y
33 c z
44 d w
44 d x
44 d y
44 d z
77 e w
77 e x
77 e y
77 e z

statement ok
DROP TABLE t1

statement ok
DROP TABLE t2

# create table t1
statement ok
CREATE TABLE t1(t1_id INT, t1_name VARCHAR) AS VALUES
(11, 'a'),
(22, 'b'),
(33, 'c'),
(44, 'd'),
(77, 'e'),
(88, NULL),
(99, NULL)

# create table t2
statement ok
CREATE TABLE t2(t2_id INT, t2_name VARCHAR) AS VALUES
(11, 'z'),
(22, NULL),
(44, 'x'),
(55, 'w'),
(99, 'u')

# left_join_null_filter
#    // Since t2 is the non-preserved side of the join, we cannot push down a NULL filter.
#   // Note that this is only true because IS NULL does not remove nulls. For filters that
#   // remove nulls, we can rewrite the join as an inner join and then push down the filter.
query IIT nosort
SELECT t1_id, t2_id, t2_name FROM t1 LEFT JOIN t2 ON t1_id = t2_id WHERE t2_name IS NULL ORDER BY t1_id
----
22 22 NULL
33 NULL NULL
77 NULL NULL
88 NULL NULL

# left_join_null_filter_on_join_column
#    // Again, since t2 is the non-preserved side of the join, we cannot push down a NULL filter.
query IIT nosort
SELECT t1_id, t2_id, t2_name FROM t1 LEFT JOIN t2 ON t1_id = t2_id WHERE t2_id IS NULL ORDER BY t1_id
----
33 NULL NULL
77 NULL NULL
88 NULL NULL

# left_join_not_null_filter
query IIT nosort
SELECT t1_id, t2_id, t2_name FROM t1 LEFT JOIN t2 ON t1_id = t2_id WHERE t2_name IS NOT NULL ORDER BY t1_id
----
11 11 z
44 44 x
99 99 u

# left_join_not_null_filter_on_join_column
query IIT nosort
SELECT t1_id, t2_id, t2_name FROM t1 LEFT JOIN t2 ON t1_id = t2_id WHERE t2_id IS NOT NULL ORDER BY t1_id
----
11 11 z
22 22 NULL
44 44 x
99 99 u

# self_join_non_equijoin
query II nosort
SELECT x.t1_id, y.t1_id FROM t1 x JOIN t1 y ON x.t1_id = 11 AND y.t1_id = 44
----
11 44

# right_join_null_filter
query ITI nosort
SELECT t1_id, t1_name, t2_id FROM t1 RIGHT JOIN t2 ON t1_id = t2_id WHERE t1_name IS NULL ORDER BY t2_id
----
NULL NULL 55
99 NULL 99

# right_join_null_filter_on_join_column
query ITI nosort
SELECT t1_id, t1_name, t2_id FROM t1 RIGHT JOIN t2 ON t1_id = t2_id WHERE t1_id IS NULL ORDER BY t2_id
----
NULL NULL 55

# right_join_not_null_filter
query ITI nosort
SELECT t1_id, t1_name, t2_id FROM t1 RIGHT JOIN t2 ON t1_id = t2_id WHERE t1_name IS NOT NULL ORDER BY t2_id
----
11 a 11
22 b 22
44 d 44

# right_join_not_null_filter_on_join_column
query ITI nosort
SELECT t1_id, t1_name, t2_id FROM t1 RIGHT JOIN t2 ON t1_id = t2_id WHERE t1_id IS NOT NULL ORDER BY t2_id
----
11 a 11
22 b 22
44 d 44
99 NULL 99

# full_join_null_filter
query ITI nosort
SELECT t1_id, t1_name, t2_id FROM t1 FULL OUTER JOIN t2 ON t1_id = t2_id WHERE t1_name IS NULL ORDER BY t1_id
----
88 NULL NULL
99 NULL 99
NULL NULL 55

# full_join_not_null_filter
query ITI nosort
SELECT t1_id, t1_name, t2_id FROM t1 FULL OUTER JOIN t2 ON t1_id = t2_id WHERE t1_name IS NOT NULL ORDER BY t1_id
----
11 a 11
22 b 22
33 c NULL
44 d 44
77 e NULL

statement ok
DROP TABLE t1

statement ok
DROP TABLE t2

# create table t1
statement ok
CREATE TABLE t1(id INT, t1_name VARCHAR, t1_int INT) AS VALUES
(11, 'a', 1),
(22, 'b', 2),
(33, 'c', 3),
(44, 'd', 4)

# create table t2
statement ok
CREATE TABLE t2(id INT, t2_name VARCHAR, t2_int INT) AS VALUES
(11, 'z', 3),
(22, 'y', 1),
(44, 'x', 3),
(55, 'w', 3)

# left_join_using

# set repartition_joins to true
statement ok
set datafusion.optimizer.repartition_joins = true

query ITT nosort
SELECT id, t1_name, t2_name FROM t1 LEFT JOIN t2 USING (id) ORDER BY id
----
11 a z
22 b y
33 c NULL
44 d x

# set repartition_joins to false
statement ok
set datafusion.optimizer.repartition_joins = false

query ITT nosort
SELECT id, t1_name, t2_name FROM t1 LEFT JOIN t2 USING (id) ORDER BY id
----
11 a z
22 b y
33 c NULL
44 d x

statement ok
DROP TABLE t1

statement ok
DROP TABLE t2

# create table t1
statement ok
CREATE TABLE t1(t1_id INT, t1_name VARCHAR, t1_int INT) AS VALUES
(11, 'a', 1),
(22, 'b', 2),
(33, 'c', 3),
(44, 'd', 4)

# create table t2
statement ok
CREATE TABLE t2(t2_id INT, t2_name VARCHAR, t2_int INT) AS VALUES
(11, 'z', 3),
(22, 'y', 1),
(44, 'x', 3),
(55, 'w', 3)

# cross_join

# set repartition_joins to true
statement ok
set datafusion.optimizer.repartition_joins = true

query ITT nosort
SELECT t1_id, t1_name, t2_name FROM t1, t2 ORDER BY t1_id
----
11 a z
11 a y
11 a x
11 a w
22 b z
22 b y
22 b x
22 b w
33 c z
33 c y
33 c x
33 c w
44 d z
44 d y
44 d x
44 d w

query ITT nosort
SELECT t1_id, t1_name, t2_name FROM t1, t2 WHERE 1=1 ORDER BY t1_id
----
11 a z
11 a y
11 a x
11 a w
22 b z
22 b y
22 b x
22 b w
33 c z
33 c y
33 c x
33 c w
44 d z
44 d y
44 d x
44 d w

query ITT nosort
SELECT t1_id, t1_name, t2_name FROM t1 CROSS JOIN t2 ORDER BY t1_id
----
11 a z
11 a y
11 a x
11 a w
22 b z
22 b y
22 b x
22 b w
33 c z
33 c y
33 c x
33 c w
44 d z
44 d y
44 d x
44 d w

query ITITI rowsort
SELECT * FROM (SELECT t1_id, t1_name FROM t1 UNION ALL SELECT t1_id, t1_name FROM t1) AS t1 CROSS JOIN t2
----
11 a 11 z 3
11 a 11 z 3
11 a 22 y 1
11 a 22 y 1
11 a 44 x 3
11 a 44 x 3
11 a 55 w 3
11 a 55 w 3
22 b 11 z 3
22 b 11 z 3
22 b 22 y 1
22 b 22 y 1
22 b 44 x 3
22 b 44 x 3
22 b 55 w 3
22 b 55 w 3
33 c 11 z 3
33 c 11 z 3
33 c 22 y 1
33 c 22 y 1
33 c 44 x 3
33 c 44 x 3
33 c 55 w 3
33 c 55 w 3
44 d 11 z 3
44 d 11 z 3
44 d 22 y 1
44 d 22 y 1
44 d 44 x 3
44 d 44 x 3
44 d 55 w 3
44 d 55 w 3

query ITT rowsort
SELECT t1_id, t1_name, t2_name FROM t1 CROSS JOIN (SELECT t2_name FROM t2 UNION ALL SELECT t2_name FROM t2) AS t2_data
----
11 a w
11 a w
11 a x
11 a x
11 a y
11 a y
11 a z
11 a z
22 b w
22 b w
22 b x
22 b x
22 b y
22 b y
22 b z
22 b z
33 c w
33 c w
33 c x
33 c x
33 c y
33 c y
33 c z
33 c z
44 d w
44 d w
44 d x
44 d x
44 d y
44 d y
44 d z
44 d z

# set repartition_joins to true
statement ok
set datafusion.optimizer.repartition_joins = false

query ITT nosort
SELECT t1_id, t1_name, t2_name FROM t1, t2 ORDER BY t1_id
----
11 a z
11 a y
11 a x
11 a w
22 b z
22 b y
22 b x
22 b w
33 c z
33 c y
33 c x
33 c w
44 d z
44 d y
44 d x
44 d w

query ITT nosort
SELECT t1_id, t1_name, t2_name FROM t1, t2 WHERE 1=1 ORDER BY t1_id
----
11 a z
11 a y
11 a x
11 a w
22 b z
22 b y
22 b x
22 b w
33 c z
33 c y
33 c x
33 c w
44 d z
44 d y
44 d x
44 d w

query ITT nosort
SELECT t1_id, t1_name, t2_name FROM t1 CROSS JOIN t2 ORDER BY t1_id
----
11 a z
11 a y
11 a x
11 a w
22 b z
22 b y
22 b x
22 b w
33 c z
33 c y
33 c x
33 c w
44 d z
44 d y
44 d x
44 d w

query ITITI rowsort
SELECT * FROM (SELECT t1_id, t1_name FROM t1 UNION ALL SELECT t1_id, t1_name FROM t1) AS t1 CROSS JOIN t2
----
11 a 11 z 3
11 a 11 z 3
11 a 22 y 1
11 a 22 y 1
11 a 44 x 3
11 a 44 x 3
11 a 55 w 3
11 a 55 w 3
22 b 11 z 3
22 b 11 z 3
22 b 22 y 1
22 b 22 y 1
22 b 44 x 3
22 b 44 x 3
22 b 55 w 3
22 b 55 w 3
33 c 11 z 3
33 c 11 z 3
33 c 22 y 1
33 c 22 y 1
33 c 44 x 3
33 c 44 x 3
33 c 55 w 3
33 c 55 w 3
44 d 11 z 3
44 d 11 z 3
44 d 22 y 1
44 d 22 y 1
44 d 44 x 3
44 d 44 x 3
44 d 55 w 3
44 d 55 w 3

query ITT rowsort
SELECT t1_id, t1_name, t2_name FROM t1 CROSS JOIN (SELECT t2_name FROM t2 UNION ALL SELECT t2_name FROM t2) AS t2_data
----
11 a w
11 a w
11 a x
11 a x
11 a y
11 a y
11 a z
11 a z
22 b w
22 b w
22 b x
22 b x
22 b y
22 b y
22 b z
22 b z
33 c w
33 c w
33 c x
33 c x
33 c y
33 c y
33 c z
33 c z
44 d w
44 d w
44 d x
44 d x
44 d y
44 d y
44 d z
44 d z

statement ok
DROP TABLE t1

statement ok
DROP TABLE t2
