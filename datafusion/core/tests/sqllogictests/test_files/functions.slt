# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.


# unicode expressions

query I
SELECT char_length('')
----
0

query I
SELECT char_length('chars')
----
5

query I
SELECT char_length('josé')
----
4

query ?
SELECT char_length(NULL)
----
NULL

query I
SELECT character_length('')
----
0

query I
SELECT character_length('chars')
----
5

query I
SELECT character_length('josé')
----
4

query ?
SELECT character_length(NULL)
----
NULL

query T
SELECT left('abcde', -2)
----
abc

query T
SELECT left('abcde', -200)
----
(empty)

query T
SELECT left('abcde', 0)
----
(empty)

query T
SELECT left('abcde', 2)
----
ab

query T
SELECT left('abcde', 200)
----
abcde

query T
SELECT left('abcde', CAST(NULL AS INT))
----
NULL

query ?
SELECT left(NULL, 2)
----
NULL

query ?
SELECT left(NULL, CAST(NULL AS INT))
----
NULL

query I
SELECT length('')
----
0

query I
SELECT length('chars')
----
5

query I
SELECT length('josé')
----
4

query ?
SELECT length(NULL)
----
NULL

query T
SELECT lpad('hi', -1, 'xy')
----
(empty)

query T
SELECT lpad('hi', 5, 'xy')
----
xyxhi

query T
SELECT lpad('hi', -1)
----
(empty)

query T
SELECT lpad('hi', 0)
----
(empty)

query T
SELECT lpad('hi', 21, 'abcdef')
----
abcdefabcdefabcdefahi

query T
SELECT lpad('hi', 5, 'xy')
----
xyxhi

query T
SELECT lpad('hi', 5, NULL)
----
NULL

query T
SELECT lpad('hi', 5)
----
   hi

query T
SELECT lpad('hi', CAST(NULL AS INT), 'xy')
----
NULL

query T
SELECT lpad('hi', CAST(NULL AS INT))
----
NULL

query T
SELECT lpad('xyxhi', 3)
----
xyx

query ?
SELECT lpad(NULL, 0)
----
NULL

query ?
SELECT lpad(NULL, 5, 'xy')
----
NULL

query T
SELECT reverse('abcde')
----
edcba

query T
SELECT reverse('loẅks')
----
sk̈wol

query ?
SELECT reverse(NULL)
----
NULL

query T
SELECT right('abcde', -2)
----
cde

query T
SELECT right('abcde', -200)
----
(empty)

query T
SELECT right('abcde', 0)
----
(empty)

query T
SELECT right('abcde', 2)
----
de

query T
SELECT right('abcde', 200)
----
abcde

query T
SELECT right('abcde', CAST(NULL AS INT))
----
NULL

query ?
SELECT right(NULL, 2)
----
NULL

query ?
SELECT right(NULL, CAST(NULL AS INT))
----
NULL

query T
SELECT rpad('hi', -1, 'xy')
----
(empty)

query T
SELECT rpad('hi', 5, 'xy')
----
hixyx

query T
SELECT rpad('hi', -1)
----
(empty)

query T
SELECT rpad('hi', 0)
----
(empty)

query T
SELECT rpad('hi', 21, 'abcdef')
----
hiabcdefabcdefabcdefa

query T
SELECT rpad('hi', 5, 'xy')
----
hixyx

query T
SELECT rpad('hi', 5, NULL)
----
NULL

query T
SELECT rpad('hi', 5)
----
hi   

query T
SELECT rpad('hi', CAST(NULL AS INT), 'xy')
----
NULL

query T
SELECT rpad('hi', CAST(NULL AS INT))
----
NULL

query T
SELECT rpad('xyxhi', 3)
----
xyx

query I
SELECT strpos('abc', 'c')
----
3

query I
SELECT strpos('josé', 'é')
----
4

query I
SELECT strpos('joséésoj', 'so')
----
6

query I
SELECT strpos('joséésoj', 'abc')
----
0

query ?
SELECT strpos(NULL, 'abc')
----
NULL

query I
SELECT strpos('joséésoj', NULL)
----
NULL

query T
SELECT substr('alphabet', -3)
----
alphabet

query T
SELECT substr('alphabet', 0)
----
alphabet

query T
SELECT substr('alphabet', 1)
----
alphabet

query T
SELECT substr('alphabet', 2)
----
lphabet

query T
SELECT substr('alphabet', 3)
----
phabet

query T
SELECT substr('alphabet', 30)
----
(empty)

query T
SELECT substr('alphabet', CAST(NULL AS int))
----
NULL

query T
SELECT substr('alphabet', 3, 2)
----
ph

query T
SELECT substr('alphabet', 3, 20)
----
phabet

query T
SELECT substr('alphabet', CAST(NULL AS int), 20)
----
NULL

query T
SELECT substr('alphabet', 3, CAST(NULL AS int))
----
NULL

query T
SELECT translate('12345', '143', 'ax')
----
a2x5

query ?
SELECT translate(NULL, '143', 'ax')
----
NULL

query T
SELECT translate('12345', NULL, 'ax')
----
NULL

query T
SELECT translate('12345', '143', NULL)
----
NULL

statement ok
CREATE TABLE test(
  c1 VARCHAR
) as VALUES
(''),
('a'),
('aa'),
('aaa');

# generic query length
query I rowsort
SELECT length(c1) FROM test
----
0
1
2
3

statement ok
drop table test

#
# Testing error message for wrong function name
#

statement ok
CREATE TABLE test(
  v1 Int,
  v2 Int
) as VALUES
(1, 10),
(2, 20),
(3, 30);

# Scalar function
statement error Did you mean 'arrow_typeof'?
SELECT arrowtypeof(v1) from test;

# Scalar function
statement error Did you mean 'to_timestamp_seconds'?
SELECT to_TIMESTAMPS_second(v2) from test;

# Aggregate function
statement error Did you mean 'COUNT'?
SELECT counter(*) from test;

# Aggregate function
statement error Did you mean 'STDDEV'?
SELECT STDEV(v1) from test;

# Window function
statement error Did you mean 'SUM'?
SELECT v1, v2, SUMM(v2) OVER(ORDER BY v1) from test;

# Window function
statement error Did you mean 'ROW_NUMBER'?
SELECT v1, v2, ROWNUMBER() OVER(ORDER BY v1) from test;

statement ok
drop table test

# Scalar function struct
statement ok
create table simple_struct_test (
    c1 boolean,
    c2 INT,
    c3 FLOAT,
    c4 DOUBLE,
    a VARCHAR,
    b TEXT
) as select *
from (values
  (true, 1,3.1,3.14,'str','text')
);

query ?
SELECT struct(c1,c2,c3,c4,a,b) from simple_struct_test
----
{c0: 1, c1: 1, c2: 3.1, c3: 3.14, c4: str, c5: text}

statement ok
drop table simple_struct_test

# create aggregate_test_100 table for functions test
statement ok
CREATE EXTERNAL TABLE aggregate_test_100 (
  c1  VARCHAR NOT NULL,
  c2  TINYINT NOT NULL,
  c3  SMALLINT NOT NULL,
  c4  SMALLINT,
  c5  INT,
  c6  BIGINT NOT NULL,
  c7  SMALLINT NOT NULL,
  c8  INT NOT NULL,
  c9  BIGINT UNSIGNED NOT NULL,
  c10 VARCHAR NOT NULL,
  c11 FLOAT NOT NULL,
  c12 DOUBLE NOT NULL,
  c13 VARCHAR NOT NULL
)
STORED AS CSV
WITH HEADER ROW
LOCATION '../../testing/data/csv/aggregate_test_100.csv'


# sqrt_f32_vs_f64
query R
SELECT avg(sqrt(c11)) FROM aggregate_test_100
----
0.658440848589

query R
SELECT avg(CAST(sqrt(c11) AS double)) FROM aggregate_test_100
----
0.658440848589

query R
SELECT avg(sqrt(CAST(c11 AS double))) FROM aggregate_test_100
----
0.658440848342

statement ok
drop table aggregate_test_100


# case_sensitive_identifiers_functions
statement ok
create table t as values (
    arrow_cast(2, 'Int8'),
    arrow_cast(2, 'Int16'),
    arrow_cast(2, 'Int32'),
    arrow_cast(2, 'Int64'),
    arrow_cast(2, 'UInt8'),
    arrow_cast(2, 'UInt16'),
    arrow_cast(2, 'UInt32'),
    arrow_cast(2, 'UInt64'),
    arrow_cast(2, 'Float32'),
    arrow_cast(2, 'Float64')
)
;

query R
SELECT sqrt(column1) FROM t
----
1.414213562373

query R
SELECT SQRT(column1) FROM t
----
1.414213562373

statement error Error during planning: Invalid function 'SQRT'
SELECT "SQRT"(column1) FROM t

query R
SELECT "sqrt"(column1) FROM t
----
1.414213562373

# case_builtin_math_expression
query RRRRRRRRRR
SELECT sqrt(column1),sqrt(column2),sqrt(column3),sqrt(column4),sqrt(column5),sqrt(column6),sqrt(column7),sqrt(column8),sqrt(column9),sqrt(column10) FROM t
----
1.414213562373 1.414213562373 1.414213562373 1.414213562373 1.414213562373 1.414213562373 1.414213562373 1.414213562373 1.4142135 1.414213562373

statement ok
drop table t
