# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.


statement ok
CREATE EXTERNAL TABLE alltypes_plain STORED AS PARQUET LOCATION '../../parquet-testing/data/alltypes_plain.parquet';

statement ok
CREATE EXTERNAL TABLE aggregate_test_100 (
  c1  VARCHAR NOT NULL,
  c2  TINYINT NOT NULL,
  c3  SMALLINT NOT NULL,
  c4  SMALLINT,
  c5  INT,
  c6  BIGINT NOT NULL,
  c7  SMALLINT NOT NULL,
  c8  INT NOT NULL,
  c9  BIGINT UNSIGNED NOT NULL,
  c10 VARCHAR NOT NULL,
  c11 FLOAT NOT NULL,
  c12 DOUBLE NOT NULL,
  c13 VARCHAR NOT NULL
)
STORED AS CSV
WITH HEADER ROW
LOCATION '../../testing/data/csv/aggregate_test_100.csv'

# test_sort_unprojected_col
query I
SELECT id FROM alltypes_plain ORDER BY int_col, double_col
----
4
6
2
0
5
7
3
1


# test_order_by_agg_expr
query R
SELECT MIN(c12) FROM aggregate_test_100 ORDER BY MIN(c12)
----
0.014793053078

# test_nulls_first_asc

query IT
SELECT * FROM (VALUES (1, 'one'), (2, 'two'), (null, 'three')) AS t (num,letter) ORDER BY num
----
1 one
2 two
NULL three

# test_nulls_first_desc()

query IT
SELECT * FROM (VALUES (1, 'one'), (2, 'two'), (null, 'three')) AS t (num,letter) ORDER BY num DESC
----
NULL three
2 two
1 one

# test_specific_nulls_last_desc

query IT
SELECT * FROM (VALUES (1, 'one'), (2, 'two'), (null, 'three')) AS t (num,letter) ORDER BY num DESC NULLS LAST
----
2 two
1 one
NULL three

# test_specific_nulls_first_asc
query IT
SELECT * FROM (VALUES (1, 'one'), (2, 'two'), (null, 'three')) AS t (num,letter) ORDER BY num ASC NULLS FIRST
----
NULL three
1 one
2 two

# sort

statement ok
CREATE EXTERNAL TABLE test (c1 int, c2 bigint, c3 boolean)
STORED AS CSV LOCATION 'tests/data/partitioned_csv';

# Demonstrate types
query TTT
SELECT arrow_typeof(c1), arrow_typeof(c2), arrow_typeof(c3) FROM test LIMIT 1;
----
Int32 Int64 Boolean

query II
SELECT c1, c2 FROM test ORDER BY c1 DESC, c2 ASC
----
3 0
3 1
3 2
3 3
3 4
3 5
3 6
3 7
3 8
3 9
3 10
2 0
2 1
2 2
2 3
2 4
2 5
2 6
2 7
2 8
2 9
2 10
1 0
1 1
1 2
1 3
1 4
1 5
1 6
1 7
1 8
1 9
1 10
0 0
0 1
0 2
0 3
0 4
0 5
0 6
0 7
0 8
0 9
0 10

# eliminate duplicated sorted expr
query TT
explain SELECT c1, c2 FROM aggregate_test_100 ORDER BY c2, c3, c2
----
logical_plan
Projection: aggregate_test_100.c1, aggregate_test_100.c2
--Sort: aggregate_test_100.c2 ASC NULLS LAST, aggregate_test_100.c3 ASC NULLS LAST
----TableScan: aggregate_test_100 projection=[c1, c2, c3]
physical_plan
ProjectionExec: expr=[c1@0 as c1, c2@1 as c2]
--SortExec: expr=[c2@1 ASC NULLS LAST,c3@2 ASC NULLS LAST]
----CsvExec: file_groups={1 group: [[WORKSPACE_ROOT/testing/data/csv/aggregate_test_100.csv]]}, projection=[c1, c2, c3], has_header=true

query II
SELECT c2, c3 FROM aggregate_test_100 ORDER BY c2, c3, c2
----
1 -99
1 -98
1 -85
1 -72
1 -56
1 -25
1 -24
1 -8
1 -5
1 12
1 29
1 36
1 38
1 41
1 54
1 57
1 70
1 71
1 83
1 103
1 120
1 125
2 -117
2 -107
2 -106
2 -61
2 -60
2 -60
2 -48
2 -43
2 -29
2 1
2 29
2 31
2 45
2 49
2 52
2 52
2 63
2 68
2 93
2 97
2 113
2 122
3 -101
3 -95
3 -76
3 -72
3 -12
3 -2
3 13
3 13
3 14
3 17
3 17
3 22
3 71
3 73
3 77
3 97
3 104
3 112
3 123
4 -117
4 -111
4 -101
4 -90
4 -79
4 -59
4 -56
4 -54
4 -53
4 -38
4 3
4 5
4 17
4 30
4 47
4 55
4 65
4 73
4 74
4 96
4 97
4 102
4 123
5 -101
5 -94
5 -86
5 -82
5 -59
5 -44
5 -40
5 -31
5 -5
5 36
5 62
5 64
5 68
5 118


# sort_empty
# The predicate on this query purposely generates no results

statement ok
SELECT c1, c2 FROM test WHERE c1 > 100000 ORDER BY c1 DESC, c2 ASC

#####
# Sorting and Grouping
#####
statement ok
create table foo as values (1, 2), (3, 4), (5, 6);

query II rowsort
select * from foo
----
1 2
3 4
5 6

query I
select column1 from foo order by column2;
----
1
3
5

query I
select column1 from foo order by column1 + column2;
----
1
3
5

query I
select column1 from foo order by column1 + column2;
----
1
3
5

query I rowsort
select column1 + column2 from foo group by column1, column2;
----
11
3
7

query I
select column1 + column2 from foo group by column1, column2 ORDER BY column2 desc;
----
11
7
3


# Cleanup
statement ok
drop table foo;


#####
# Tests for https://github.com/apache/arrow-datafusion/issues/4854
# Ordering / grouping by the same column
#####
statement ok
create or replace table t as select column1 as value, column2 as time from (select * from (values
  (1, timestamp '2022-01-01 00:00:30'),
  (2, timestamp '2022-01-01 01:00:10'),
  (3, timestamp '2022-01-02 00:00:20')
) as sq) as sq


query IP rowsort
select
  sum(value) AS "value",
  date_trunc('hour',time) AS "time"
FROM t
GROUP BY time;
----
1 2022-01-01T00:00:00
2 2022-01-01T01:00:00
3 2022-01-02T00:00:00

# should work fine
query IP
select
  sum(value) AS "value",
  date_trunc('minute',time) AS "time"
FROM t
GROUP BY time
ORDER BY time;
----
1 2022-01-01T00:00:00
2 2022-01-01T01:00:00
3 2022-01-02T00:00:00

## SORT BY  is not supported
statement error DataFusion error: This feature is not implemented: SORT BY
select * from t SORT BY time;


# distinct on a column not in the select list should not work
statement error For SELECT DISTINCT, ORDER BY expressions time must appear in select list
SELECT DISTINCT value FROM t ORDER BY time;

# distinct on an expression of a column not in the select list should not work
statement error For SELECT DISTINCT, ORDER BY expressions time must appear in select list
SELECT DISTINCT date_trunc('hour', time)  FROM t ORDER BY time;

# distinct on a column that is in the select list but aliasted should work
query P
SELECT DISTINCT time as "first_seen" FROM t ORDER BY "first_seen";
----
2022-01-01T00:00:30
2022-01-01T01:00:10
2022-01-02T00:00:20

# distinct on a column that is in the select list, but aliased (though
# the reference is to original expr) should work
query P
SELECT DISTINCT time as "first_seen" FROM t ORDER BY time;
----
2022-01-01T00:00:30
2022-01-01T01:00:10
2022-01-02T00:00:20

# distinct on a column that is in the select list, but aliased (though
# the reference is its ordinal position) should work
query P
SELECT DISTINCT time as "first_seen" FROM t ORDER BY 1;
----
2022-01-01T00:00:30
2022-01-01T01:00:10
2022-01-02T00:00:20

## Cleanup
statement ok
drop table t;
