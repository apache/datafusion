# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at

#   http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

##########
## UNION Tests
##########

statement ok
CREATE TABLE t1(
  id INT,  
  name TEXT,
) as VALUES
  (1, 'Alex'), 
  (2, 'Bob'), 
  (3, 'Alice')
;

statement ok
CREATE TABLE t2(
  id TINYINT,
  name TEXT,
) as VALUES
  (1, 'Alex'), 
  (2, 'Bob'), 
  (3, 'John')
;

# union with EXCEPT(JOIN)
query T rowsort
(   
    SELECT name FROM t1
    EXCEPT
    SELECT name FROM t2
)  
UNION ALL
(   
    SELECT name FROM t2
    EXCEPT
    SELECT name FROM t1
)
----
Alice
John

# union with type coercion
query IT rowsort
(   
    SELECT * FROM t1
    EXCEPT
    SELECT * FROM t2
)  
UNION ALL
(   
    SELECT * FROM t2
    EXCEPT
    SELECT * FROM t1
)
----
3 Alice
3 John

# union all
query I rowsort
SELECT 1 as x
UNION ALL
SELECT 2 as x
----
1
2

# csv_union_all
statement ok
CREATE EXTERNAL TABLE aggregate_test_100 (
  c1  VARCHAR NOT NULL,
  c2  TINYINT NOT NULL,
  c3  SMALLINT NOT NULL,
  c4  SMALLINT,
  c5  INT,
  c6  BIGINT NOT NULL,
  c7  SMALLINT NOT NULL,
  c8  INT NOT NULL,
  c9  BIGINT UNSIGNED NOT NULL,
  c10 VARCHAR NOT NULL,
  c11 FLOAT NOT NULL,
  c12 DOUBLE NOT NULL,
  c13 VARCHAR NOT NULL
)
STORED AS CSV
WITH HEADER ROW
LOCATION '../../testing/data/csv/aggregate_test_100.csv'

query I
select COUNT(*) from (
    SELECT c1 FROM aggregate_test_100
    UNION ALL
    SELECT c1 FROM aggregate_test_100
)
----
200

# union_distinct
query I rowsort
SELECT 1 as x
UNION
SELECT 1 as x
----
1

# union_all_with_aggregate
query I
SELECT SUM(d) FROM (
    SELECT 1 as c, 2 as d
    UNION ALL
    SELECT 1 as c, 3 AS d
) as a
----
5

# union_all_with_count
statement ok
CREATE table t as SELECT 1 as a

query I
SELECT COUNT(*) FROM (
    SELECT a from t
    UNION ALL
    SELECT a from t
)
----
2

# union_schemas
query I rowsort
SELECT 1 A UNION ALL SELECT 2
----
1
2

# union_schemas
query I rowsort
SELECT 1 UNION SELECT 2
----
1
2

# union_with_except_input
query T rowsort
(
    SELECT name FROM t1
    EXCEPT
    SELECT name FROM t2
)
UNION ALL
(
    SELECT name FROM t2
    EXCEPT
    SELECT name FROM t1
)
----
Alice
John

# union_with_type_coercion
query TT
explain
(
    SELECT id, name FROM t1
    EXCEPT
    SELECT id, name FROM t2
)
UNION ALL
(
    SELECT id, name FROM t2
    EXCEPT
    SELECT id, name FROM t1
)
----
logical_plan
Union
--LeftAnti Join: t1.id = CAST(t2.id AS Int32), t1.name = t2.name
----Aggregate: groupBy=[[t1.id, t1.name]], aggr=[[]]
------TableScan: t1 projection=[id, name]
----TableScan: t2 projection=[id, name]
--Projection: CAST(t2.id AS Int32) AS id, t2.name
----LeftAnti Join: CAST(t2.id AS Int32) = t1.id, t2.name = t1.name
------Aggregate: groupBy=[[t2.id, t2.name]], aggr=[[]]
--------TableScan: t2 projection=[id, name]
------TableScan: t1 projection=[id, name]
physical_plan
UnionExec
--ProjectionExec: expr=[id@0 as id, name@1 as name]
----CoalesceBatchesExec: target_batch_size=8192
------HashJoinExec: mode=Partitioned, join_type=LeftAnti, on=[(id@0, CAST(t2.id AS Int32)@2), (name@1, name@1)]
--------AggregateExec: mode=FinalPartitioned, gby=[id@0 as id, name@1 as name], aggr=[]
----------CoalesceBatchesExec: target_batch_size=8192
------------RepartitionExec: partitioning=Hash([id@0, name@1], 4), input_partitions=4
--------------AggregateExec: mode=Partial, gby=[id@0 as id, name@1 as name], aggr=[]
----------------MemoryExec: partitions=4, partition_sizes=[1, 0, 0, 0]
--------CoalesceBatchesExec: target_batch_size=8192
----------RepartitionExec: partitioning=Hash([CAST(t2.id AS Int32)@2, name@1], 4), input_partitions=4
------------ProjectionExec: expr=[id@0 as id, name@1 as name, CAST(id@0 AS Int32) as CAST(t2.id AS Int32)]
--------------MemoryExec: partitions=4, partition_sizes=[1, 0, 0, 0]
--ProjectionExec: expr=[CAST(id@0 AS Int32) as id, name@1 as name]
----ProjectionExec: expr=[id@0 as id, name@1 as name]
------CoalesceBatchesExec: target_batch_size=8192
--------HashJoinExec: mode=Partitioned, join_type=LeftAnti, on=[(CAST(t2.id AS Int32)@2, id@0), (name@1, name@1)]
----------CoalesceBatchesExec: target_batch_size=8192
------------RepartitionExec: partitioning=Hash([CAST(t2.id AS Int32)@2, name@1], 4), input_partitions=4
--------------ProjectionExec: expr=[id@0 as id, name@1 as name, CAST(id@0 AS Int32) as CAST(t2.id AS Int32)]
----------------AggregateExec: mode=FinalPartitioned, gby=[id@0 as id, name@1 as name], aggr=[]
------------------CoalesceBatchesExec: target_batch_size=8192
--------------------RepartitionExec: partitioning=Hash([id@0, name@1], 4), input_partitions=4
----------------------AggregateExec: mode=Partial, gby=[id@0 as id, name@1 as name], aggr=[]
------------------------MemoryExec: partitions=4, partition_sizes=[1, 0, 0, 0]
----------CoalesceBatchesExec: target_batch_size=8192
------------RepartitionExec: partitioning=Hash([id@0, name@1], 4), input_partitions=4
--------------MemoryExec: partitions=4, partition_sizes=[1, 0, 0, 0]

query IT rowsort
(
    SELECT id, name FROM t1
    EXCEPT
    SELECT id, name FROM t2
)
UNION ALL
(
    SELECT id, name FROM t2
    EXCEPT
    SELECT id, name FROM t1
)
----
3 Alice
3 John

# union_with_except_input
query TT
explain
(
    SELECT name FROM t1
    EXCEPT
    SELECT name FROM t2
)
UNION ALL
(
    SELECT name FROM t2
    EXCEPT
    SELECT name FROM t1
)
----
logical_plan
Union
--LeftAnti Join: t1.name = t2.name
----Aggregate: groupBy=[[t1.name]], aggr=[[]]
------TableScan: t1 projection=[name]
----TableScan: t2 projection=[name]
--LeftAnti Join: t2.name = t1.name
----Aggregate: groupBy=[[t2.name]], aggr=[[]]
------TableScan: t2 projection=[name]
----TableScan: t1 projection=[name]
physical_plan
InterleaveExec
--CoalesceBatchesExec: target_batch_size=8192
----HashJoinExec: mode=Partitioned, join_type=LeftAnti, on=[(name@0, name@0)]
------AggregateExec: mode=FinalPartitioned, gby=[name@0 as name], aggr=[]
--------CoalesceBatchesExec: target_batch_size=8192
----------RepartitionExec: partitioning=Hash([name@0], 4), input_partitions=4
------------AggregateExec: mode=Partial, gby=[name@0 as name], aggr=[]
--------------MemoryExec: partitions=4, partition_sizes=[1, 0, 0, 0]
------CoalesceBatchesExec: target_batch_size=8192
--------RepartitionExec: partitioning=Hash([name@0], 4), input_partitions=4
----------MemoryExec: partitions=4, partition_sizes=[1, 0, 0, 0]
--CoalesceBatchesExec: target_batch_size=8192
----HashJoinExec: mode=Partitioned, join_type=LeftAnti, on=[(name@0, name@0)]
------AggregateExec: mode=FinalPartitioned, gby=[name@0 as name], aggr=[]
--------CoalesceBatchesExec: target_batch_size=8192
----------RepartitionExec: partitioning=Hash([name@0], 4), input_partitions=4
------------AggregateExec: mode=Partial, gby=[name@0 as name], aggr=[]
--------------MemoryExec: partitions=4, partition_sizes=[1, 0, 0, 0]
------CoalesceBatchesExec: target_batch_size=8192
--------RepartitionExec: partitioning=Hash([name@0], 4), input_partitions=4
----------MemoryExec: partitions=4, partition_sizes=[1, 0, 0, 0]

# union_upcast_types
query TT
explain SELECT c1, c9 FROM aggregate_test_100 UNION ALL SELECT c1, c3 FROM aggregate_test_100 ORDER BY c9 DESC LIMIT 5
----
logical_plan
Limit: skip=0, fetch=5
--Sort: aggregate_test_100.c9 DESC NULLS FIRST, fetch=5
----Union
------Projection: aggregate_test_100.c1, CAST(aggregate_test_100.c9 AS Int64) AS c9
--------TableScan: aggregate_test_100 projection=[c1, c9]
------Projection: aggregate_test_100.c1, CAST(aggregate_test_100.c3 AS Int64) AS c9
--------TableScan: aggregate_test_100 projection=[c1, c3]
physical_plan
GlobalLimitExec: skip=0, fetch=5
--SortPreservingMergeExec: [c9@1 DESC]
----UnionExec
------SortExec: expr=[c9@1 DESC]
--------ProjectionExec: expr=[c1@0 as c1, CAST(c9@1 AS Int64) as c9]
----------RepartitionExec: partitioning=RoundRobinBatch(4), input_partitions=1
------------CsvExec: file_groups={1 group: [[WORKSPACE_ROOT/testing/data/csv/aggregate_test_100.csv]]}, projection=[c1, c9], has_header=true
------SortExec: expr=[c9@1 DESC]
--------ProjectionExec: expr=[c1@0 as c1, CAST(c3@1 AS Int64) as c9]
----------RepartitionExec: partitioning=RoundRobinBatch(4), input_partitions=1
------------CsvExec: file_groups={1 group: [[WORKSPACE_ROOT/testing/data/csv/aggregate_test_100.csv]]}, projection=[c1, c3], has_header=true

query TI
SELECT c1, c9 FROM aggregate_test_100 UNION ALL SELECT c1, c3 FROM aggregate_test_100 ORDER BY c9 DESC LIMIT 5
----
c 4268716378
e 4229654142
d 4216440507
e 4144173353
b 4076864659

# union_with_hash_aggregate
query TT
explain
SELECT count(*) FROM (
    SELECT distinct name FROM t1
    UNION ALL
    SELECT distinct name FROM t2
) GROUP BY name
----
logical_plan
Projection: COUNT(UInt8(1))
--Aggregate: groupBy=[[t1.name]], aggr=[[COUNT(UInt8(1))]]
----Union
------Aggregate: groupBy=[[t1.name]], aggr=[[]]
--------TableScan: t1 projection=[name]
------Aggregate: groupBy=[[t2.name]], aggr=[[]]
--------TableScan: t2 projection=[name]
physical_plan
ProjectionExec: expr=[COUNT(UInt8(1))@1 as COUNT(UInt8(1))]
--AggregateExec: mode=Single, gby=[name@0 as name], aggr=[COUNT(UInt8(1))]
----InterleaveExec
------AggregateExec: mode=FinalPartitioned, gby=[name@0 as name], aggr=[]
--------CoalesceBatchesExec: target_batch_size=8192
----------RepartitionExec: partitioning=Hash([name@0], 4), input_partitions=4
------------AggregateExec: mode=Partial, gby=[name@0 as name], aggr=[]
--------------MemoryExec: partitions=4, partition_sizes=[1, 0, 0, 0]
------AggregateExec: mode=FinalPartitioned, gby=[name@0 as name], aggr=[]
--------CoalesceBatchesExec: target_batch_size=8192
----------RepartitionExec: partitioning=Hash([name@0], 4), input_partitions=4
------------AggregateExec: mode=Partial, gby=[name@0 as name], aggr=[]
--------------MemoryExec: partitions=4, partition_sizes=[1, 0, 0, 0]


########
# Clean up after the test
########

statement ok
drop table t1;

statement ok
drop table t2;

statement ok
drop table aggregate_test_100;

statement ok
CREATE EXTERNAL TABLE t1 (
        c1  VARCHAR NOT NULL,
        c2  TINYINT NOT NULL,
        c3  SMALLINT NOT NULL,
        c4  SMALLINT NOT NULL,
        c5  INTEGER NOT NULL,
        c6  BIGINT NOT NULL,
        c7  SMALLINT NOT NULL,
        c8  INT NOT NULL,
        c9  INT UNSIGNED NOT NULL,
        c10 BIGINT UNSIGNED NOT NULL,
        c11 FLOAT NOT NULL,
        c12 DOUBLE NOT NULL,
        c13 VARCHAR NOT NULL
    )
STORED AS CSV
WITH HEADER ROW
WITH ORDER (c1 ASC)
LOCATION '../../testing/data/csv/aggregate_test_100.csv';

statement ok
CREATE EXTERNAL TABLE t2 (
        c1a  VARCHAR NOT NULL,
        c2  TINYINT NOT NULL,
        c3  SMALLINT NOT NULL,
        c4  SMALLINT NOT NULL,
        c5  INTEGER NOT NULL,
        c6  BIGINT NOT NULL,
        c7  SMALLINT NOT NULL,
        c8  INT NOT NULL,
        c9  INT UNSIGNED NOT NULL,
        c10 BIGINT UNSIGNED NOT NULL,
        c11 FLOAT NOT NULL,
        c12 DOUBLE NOT NULL,
        c13 VARCHAR NOT NULL
    )
STORED AS CSV
WITH HEADER ROW
WITH ORDER (c1a ASC)
LOCATION '../../testing/data/csv/aggregate_test_100.csv';

query TT
explain
SELECT c1 FROM(
(   
    SELECT c1 FROM t1
)  
UNION ALL
(   
    SELECT c1a FROM t2
))
ORDER BY c1
----
logical_plan
Sort: t1.c1 ASC NULLS LAST
--Union
----TableScan: t1 projection=[c1]
----Projection: t2.c1a AS c1
------TableScan: t2 projection=[c1a]
physical_plan
SortPreservingMergeExec: [c1@0 ASC NULLS LAST]
--UnionExec
----CsvExec: file_groups={1 group: [[WORKSPACE_ROOT/testing/data/csv/aggregate_test_100.csv]]}, projection=[c1], output_ordering=[c1@0 ASC NULLS LAST], has_header=true
----ProjectionExec: expr=[c1a@0 as c1]
------CsvExec: file_groups={1 group: [[WORKSPACE_ROOT/testing/data/csv/aggregate_test_100.csv]]}, projection=[c1a], output_ordering=[c1a@0 ASC NULLS LAST], has_header=true

statement ok
drop table t1

statement ok
drop table t2

# test UNION ALL aliases correctly with aliased columns
query TT
explain select 1 a group by a union all select 2 b union all select 3 c
----
logical_plan
Union
--Projection: Int64(1) AS a
----Aggregate: groupBy=[[Int64(1)]], aggr=[[]]
------EmptyRelation
--Projection: Int64(2) AS a
----EmptyRelation
--Projection: Int64(3) AS a
----EmptyRelation
physical_plan
UnionExec
--ProjectionExec: expr=[Int64(1)@0 as a]
----AggregateExec: mode=FinalPartitioned, gby=[Int64(1)@0 as Int64(1)], aggr=[]
------CoalesceBatchesExec: target_batch_size=8192
--------RepartitionExec: partitioning=Hash([Int64(1)@0], 4), input_partitions=4
----------RepartitionExec: partitioning=RoundRobinBatch(4), input_partitions=1
------------AggregateExec: mode=Partial, gby=[1 as Int64(1)], aggr=[]
--------------EmptyExec: produce_one_row=true
--ProjectionExec: expr=[2 as a]
----EmptyExec: produce_one_row=true
--ProjectionExec: expr=[3 as a]
----EmptyExec: produce_one_row=true

# test UNION ALL aliases correctly with aliased subquery
query TT
explain select count(*) count, n from (select 5 as n) a group by n
union all
select x, y from (select 1 as x , max(10) as y) b
----
logical_plan
Union
--Projection: COUNT(UInt8(1)) AS count, a.n
----Aggregate: groupBy=[[a.n]], aggr=[[COUNT(UInt8(1))]]
------SubqueryAlias: a
--------Projection: Int64(5) AS n
----------EmptyRelation
--Projection: b.x AS count, b.y AS n
----SubqueryAlias: b
------Projection: Int64(1) AS x, MAX(Int64(10)) AS y
--------Aggregate: groupBy=[[]], aggr=[[MAX(Int64(10))]]
----------EmptyRelation
physical_plan
UnionExec
--ProjectionExec: expr=[COUNT(UInt8(1))@1 as count, n@0 as n]
----AggregateExec: mode=FinalPartitioned, gby=[n@0 as n], aggr=[COUNT(UInt8(1))]
------CoalesceBatchesExec: target_batch_size=8192
--------RepartitionExec: partitioning=Hash([n@0], 4), input_partitions=4
----------RepartitionExec: partitioning=RoundRobinBatch(4), input_partitions=1
------------AggregateExec: mode=Partial, gby=[n@0 as n], aggr=[COUNT(UInt8(1))]
--------------ProjectionExec: expr=[5 as n]
----------------EmptyExec: produce_one_row=true
--ProjectionExec: expr=[x@0 as count, y@1 as n]
----ProjectionExec: expr=[1 as x, MAX(Int64(10))@0 as y]
------AggregateExec: mode=Single, gby=[], aggr=[MAX(Int64(10))]
--------EmptyExec: produce_one_row=true
