# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at

#   http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

statement ok
CREATE EXTERNAL TABLE aggregate_test_100 (
  c1  VARCHAR NOT NULL,
  c2  TINYINT NOT NULL,
  c3  SMALLINT NOT NULL,
  c4  SMALLINT,
  c5  INT,
  c6  BIGINT NOT NULL,
  c7  SMALLINT NOT NULL,
  c8  INT NOT NULL,
  c9  BIGINT UNSIGNED NOT NULL,
  c10 VARCHAR NOT NULL,
  c11 FLOAT NOT NULL,
  c12 DOUBLE NOT NULL,
  c13 VARCHAR NOT NULL
)
STORED AS CSV
WITH HEADER ROW
LOCATION '../../testing/data/csv/aggregate_test_100.csv'

statement ok
CREATE EXTERNAL TABLE null_cases(
  c1 BIGINT NULL,
  c2 DOUBLE NULL,
  c3 BIGINT NULL
)
STORED AS CSV
WITH HEADER ROW
LOCATION 'tests/data/null_cases.csv';

### This is the same table as
### execute_with_partition with 4 partitions
statement ok
CREATE EXTERNAL TABLE test (c1 int, c2 bigint, c3 boolean)
STORED AS CSV LOCATION 'tests/data/partitioned_csv';


# for window functions without order by the first, last, and nth function call does not make sense
# csv_query_window_with_empty_over
query IIII
select
c9,
count(c5) over () as count1,
max(c5) over () as max1,
min(c5) over () as min1
from aggregate_test_100
order by c9
limit 5
----
28774375 100 2143473091 -2141999138
63044568 100 2143473091 -2141999138
141047417 100 2143473091 -2141999138
141680161 100 2143473091 -2141999138
145294611 100 2143473091 -2141999138

# for window functions without order by the first, last, and nth function call does not make sense
# csv_query_window_with_partition_by
query IIRIII
select
c9,
sum(cast(c4 as Int)) over (partition by c3) as sum1,
avg(cast(c4 as Int)) over (partition by c3) as avg1,
count(cast(c4 as Int)) over (partition by c3) as count1,
max(cast(c4 as Int)) over (partition by c3) as max1,
min(cast(c4 as Int)) over (partition by c3) as min1
from aggregate_test_100
order by c9
limit 5
----
28774375 -16110 -16110 1 -16110 -16110
63044568 3917 3917 1 3917 3917
141047417 -38455 -19227.5 2 -16974 -21481
141680161 -1114 -1114 1 -1114 -1114
145294611 15673 15673 1 15673 15673



# async fn csv_query_window_with_order_by
query IIRIIIIII
select
c9,
sum(c5) over (order by c9) as sum1,
avg(c5) over (order by c9) as avg1,
count(c5) over (order by c9) as count1,
max(c5) over (order by c9) as max1,
min(c5) over (order by c9) as min1,
first_value(c5) over (order by c9) as fv1,
last_value(c5) over (order by c9) as lv1,
nth_value(c5, 2) over (order by c9) as nv1
from aggregate_test_100
order by c9
limit 5
----
28774375 61035129 61035129 1 61035129 61035129 61035129 61035129 NULL
63044568 -47938237 -23969118.5 2 61035129 -108973366 61035129 -108973366 -108973366
141047417 575165281 191721760.33333334 3 623103518 -108973366 61035129 623103518 -108973366
141680161 -1352462829 -338115707.25 4 623103518 -1927628110 61035129 -1927628110 -108973366
145294611 -3251637940 -650327588 5 623103518 -1927628110 61035129 -1899175111 -108973366

# csv_query_window_with_partition_by_order_by
query IIRIIIIII
select
 c9,
 sum(c5) over (partition by c4 order by c9) as sum1,
 avg(c5) over (partition by c4 order by c9) as avg1,
 count(c5) over (partition by c4 order by c9) as count1,
 max(c5) over (partition by c4 order by c9) as max1,
 min(c5) over (partition by c4 order by c9) as min1,
 first_value(c5) over (partition by c4 order by c9) as fv1,
 last_value(c5) over (partition by c4 order by c9) as lv1,
 nth_value(c5, 2) over (partition by c4 order by c9) as nv1
from aggregate_test_100
order by c9
limit 5
----
28774375 61035129 61035129 1 61035129 61035129 61035129 61035129 NULL
63044568 -108973366 -108973366 1 -108973366 -108973366 -108973366 -108973366 NULL
141047417 623103518 623103518 1 623103518 623103518 623103518 623103518 NULL
141680161 -1927628110 -1927628110 1 -1927628110 -1927628110 -1927628110 -1927628110 NULL
145294611 -1899175111 -1899175111 1 -1899175111 -1899175111 -1899175111 -1899175111 NULL

# window()
query IIIIIIR
SELECT
c1,
c2,
SUM(c2) OVER () as sum1,
COUNT(c2) OVER () as count1,
MAX(c2) OVER () as max1,
MIN(c2) OVER () as min1,
AVG(c2) OVER () as avg1
FROM test
ORDER BY c1, c2
LIMIT 5
----
0 0 220 44 10 0 5
0 1 220 44 10 0 5
0 2 220 44 10 0 5
0 3 220 44 10 0 5
0 4 220 44 10 0 5


# window_order_by
query IIIIIIIIIIR
SELECT
c1,
c2,
ROW_NUMBER() OVER (ORDER BY c1, c2) as rn1,
FIRST_VALUE(c2) OVER (ORDER BY c1, c2) as fv1,
LAST_VALUE(c2) OVER (ORDER BY c1, c2) as lv1,
NTH_VALUE(c2, 2) OVER (ORDER BY c1, c2) as nv1,
SUM(c2) OVER (ORDER BY c1, c2) as sum1,
COUNT(c2) OVER (ORDER BY c1, c2) as count1,
MAX(c2) OVER (ORDER BY c1, c2) as max1,
MIN(c2) OVER (ORDER BY c1, c2) as min1,
AVG(c2) OVER (ORDER BY c1, c2) as avg1
FROM test
ORDER BY c1, c2
LIMIT 5
----
0 0 1 0 0 NULL 0 1 0 0 0
0 1 2 0 1 1 1 2 1 0 0.5
0 2 3 0 2 1 3 3 2 0 1
0 3 4 0 3 1 6 4 3 0 1.5
0 4 5 0 4 1 10 5 4 0 2

# window_partition_by
query IIIIIIR
SELECT
c1,
c2,
SUM(c2) OVER (PARTITION BY c2) as sum1,
COUNT(c2) OVER (PARTITION BY c2) as count1,
MAX(c2) OVER (PARTITION BY c2) as max1,
MIN(c2) OVER (PARTITION BY c2) as min1,
AVG(c2) OVER (PARTITION BY c2) as avg1
FROM test
ORDER BY c1, c2
LIMIT 5
----
0 0 0 4 0 0 0
0 1 4 4 1 1 1
0 2 8 4 2 2 2
0 3 12 4 3 3 3
0 4 16 4 4 4 4

query IIIIIIIIIIR
SELECT
c1,
c2,
ROW_NUMBER() OVER (PARTITION BY c2 ORDER BY c1) as rn1,
FIRST_VALUE(c2 + c1) OVER (PARTITION BY c2 ORDER BY c1) as fv1,
LAST_VALUE(c2 + c1) OVER (PARTITION BY c2 ORDER BY c1) as lv1,
NTH_VALUE(c2 + c1, 1) OVER (PARTITION BY c2 ORDER BY c1) as nv1,
SUM(c2) OVER (PARTITION BY c2 ORDER BY c1) as sum1,
COUNT(c2) OVER (PARTITION BY c2 ORDER BY c1) as count1,
MAX(c2) OVER (PARTITION BY c2 ORDER BY c1) as max1,
MIN(c2) OVER (PARTITION BY c2 ORDER BY c1) as min1,
AVG(c2) OVER (PARTITION BY c2 ORDER BY c1) as avg1
FROM test
ORDER BY c1, c2
LIMIT 5
----
0 0 1 0 0 0 0 1 0 0 0
0 1 1 1 1 1 1 1 1 1 1
0 2 1 2 2 2 2 1 2 2 2
0 3 1 3 3 3 3 1 3 3 3
0 4 1 4 4 4 4 1 4 4 4


#####
# window_expr_eliminate()
#####

# window expr is not referenced anywhere, eliminate it.
query TT
EXPLAIN
WITH _sample_data AS (
 SELECT 1 as a, 'aa' AS b
 UNION ALL
 SELECT 3 as a, 'aa' AS b
 UNION ALL
 SELECT 5 as a, 'bb' AS b
 UNION ALL
 SELECT 7 as a, 'bb' AS b
    ), _data2 AS (
 SELECT
 row_number() OVER (PARTITION BY s.b ORDER BY s.a) AS seq,
 s.a,
 s.b
 FROM _sample_data s
    )
    SELECT d.b, MAX(d.a) AS max_a
    FROM _data2 d
    GROUP BY d.b
    ORDER BY d.b;
----
logical_plan
Sort: d.b ASC NULLS LAST
  Projection: d.b, MAX(d.a) AS max_a
    Aggregate: groupBy=[[d.b]], aggr=[[MAX(d.a)]]
      SubqueryAlias: d
        SubqueryAlias: _data2
          Projection: s.a, s.b
            SubqueryAlias: s
              SubqueryAlias: _sample_data
                Union
                  Projection: Int64(1) AS a, Utf8("aa") AS b
                    EmptyRelation
                  Projection: Int64(3) AS a, Utf8("aa") AS b
                    EmptyRelation
                  Projection: Int64(5) AS a, Utf8("bb") AS b
                    EmptyRelation
                  Projection: Int64(7) AS a, Utf8("bb") AS b
                    EmptyRelation
physical_plan
SortPreservingMergeExec: [b@0 ASC NULLS LAST]
  SortExec: expr=[b@0 ASC NULLS LAST]
    ProjectionExec: expr=[b@0 as b, MAX(d.a)@1 as max_a]
      AggregateExec: mode=FinalPartitioned, gby=[b@0 as b], aggr=[MAX(d.a)]
        CoalesceBatchesExec: target_batch_size=8192
          RepartitionExec: partitioning=Hash([Column { name: "b", index: 0 }], 4), input_partitions=4
            AggregateExec: mode=Partial, gby=[b@1 as b], aggr=[MAX(d.a)]
              ProjectionExec: expr=[a@0 as a, b@1 as b]
                UnionExec
                  ProjectionExec: expr=[1 as a, aa as b]
                    EmptyExec: produce_one_row=true
                  ProjectionExec: expr=[3 as a, aa as b]
                    EmptyExec: produce_one_row=true
                  ProjectionExec: expr=[5 as a, bb as b]
                    EmptyExec: produce_one_row=true
                  ProjectionExec: expr=[7 as a, bb as b]
                    EmptyExec: produce_one_row=true

# Check actual result:
query TI
WITH _sample_data AS (
 SELECT 1 as a, 'aa' AS b
 UNION ALL
 SELECT 3 as a, 'aa' AS b
 UNION ALL
 SELECT 5 as a, 'bb' AS b
 UNION ALL
 SELECT 7 as a, 'bb' AS b
    ), _data2 AS (
 SELECT
 row_number() OVER (PARTITION BY s.b ORDER BY s.a) AS seq,
 s.a,
 s.b
 FROM _sample_data s
    )
    SELECT d.b, MAX(d.a) AS max_a
    FROM _data2 d
    GROUP BY d.b
    ORDER BY d.b;
----
aa 3
bb 7

#   window expr is referenced by the output, keep it
query TT
EXPLAIN
WITH _sample_data AS (
 SELECT 1 as a, 'aa' AS b
 UNION ALL
 SELECT 3 as a, 'aa' AS b
 UNION ALL
 SELECT 5 as a, 'bb' AS b
 UNION ALL
 SELECT 7 as a, 'bb' AS b
    ), _data2 AS (
 SELECT
 row_number() OVER (PARTITION BY s.b ORDER BY s.a) AS seq,
 s.a,
 s.b
 FROM _sample_data s
    )
    SELECT d.b, MAX(d.a) AS max_a, max(d.seq)
    FROM _data2 d
    GROUP BY d.b
    ORDER BY d.b
----
logical_plan
Sort: d.b ASC NULLS LAST
  Projection: d.b, MAX(d.a) AS max_a, MAX(d.seq)
    Aggregate: groupBy=[[d.b]], aggr=[[MAX(d.a), MAX(d.seq)]]
      SubqueryAlias: d
        SubqueryAlias: _data2
          Projection: ROW_NUMBER() PARTITION BY [s.b] ORDER BY [s.a ASC NULLS LAST] RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW AS seq, s.a, s.b
            WindowAggr: windowExpr=[[ROW_NUMBER() PARTITION BY [s.b] ORDER BY [s.a ASC NULLS LAST] RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW]]
              SubqueryAlias: s
                SubqueryAlias: _sample_data
                  Union
                    Projection: Int64(1) AS a, Utf8("aa") AS b
                      EmptyRelation
                    Projection: Int64(3) AS a, Utf8("aa") AS b
                      EmptyRelation
                    Projection: Int64(5) AS a, Utf8("bb") AS b
                      EmptyRelation
                    Projection: Int64(7) AS a, Utf8("bb") AS b
                      EmptyRelation
physical_plan
SortPreservingMergeExec: [b@0 ASC NULLS LAST]
  SortExec: expr=[b@0 ASC NULLS LAST]
    ProjectionExec: expr=[b@0 as b, MAX(d.a)@1 as max_a, MAX(d.seq)@2 as MAX(d.seq)]
      AggregateExec: mode=FinalPartitioned, gby=[b@0 as b], aggr=[MAX(d.a), MAX(d.seq)]
        AggregateExec: mode=Partial, gby=[b@2 as b], aggr=[MAX(d.a), MAX(d.seq)]
          ProjectionExec: expr=[ROW_NUMBER() PARTITION BY [s.b] ORDER BY [s.a ASC NULLS LAST] RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW@2 as seq, a@0 as a, b@1 as b]
            BoundedWindowAggExec: wdw=[ROW_NUMBER(): Ok(Field { name: "ROW_NUMBER()", data_type: UInt64, nullable: false, dict_id: 0, dict_is_ordered: false, metadata: {} }), frame: WindowFrame { units: Range, start_bound: Preceding(Int64(NULL)), end_bound: CurrentRow }]
              SortExec: expr=[b@1 ASC NULLS LAST,a@0 ASC NULLS LAST]
                CoalesceBatchesExec: target_batch_size=8192
                  RepartitionExec: partitioning=Hash([Column { name: "b", index: 1 }], 4), input_partitions=4
                    UnionExec
                      ProjectionExec: expr=[1 as a, aa as b]
                        EmptyExec: produce_one_row=true
                      ProjectionExec: expr=[3 as a, aa as b]
                        EmptyExec: produce_one_row=true
                      ProjectionExec: expr=[5 as a, bb as b]
                        EmptyExec: produce_one_row=true
                      ProjectionExec: expr=[7 as a, bb as b]
                        EmptyExec: produce_one_row=true







# check actual result

query TII
WITH _sample_data AS (
 SELECT 1 as a, 'aa' AS b
 UNION ALL
 SELECT 3 as a, 'aa' AS b
 UNION ALL
 SELECT 5 as a, 'bb' AS b
 UNION ALL
 SELECT 7 as a, 'bb' AS b
    ), _data2 AS (
 SELECT
 row_number() OVER (PARTITION BY s.b ORDER BY s.a) AS seq,
 s.a,
 s.b
 FROM _sample_data s
    )
    SELECT d.b, MAX(d.a) AS max_a, max(d.seq)
    FROM _data2 d
    GROUP BY d.b
    ORDER BY d.b
----
aa 3 2
bb 7 2


# async fn window_in_expression
query I
select 1 - lag(amount, 1) over (order by idx) as column1 from (values ('a', 1, 100), ('a', 2, 150)) as t (col1, idx, amount)
---
----
NULL
-99


# async fn window_with_agg_in_expression
query TIIIII
select col1, idx, count(*), sum(amount), lag(sum(amount), 1) over (order by idx) as prev_amount,
sum(amount) - lag(sum(amount), 1) over (order by idx) as difference from (
select * from (values ('a', 1, 100), ('a', 2, 150)) as t (col1, idx, amount)
) a
group by col1, idx
----
a 1 1 100 NULL NULL
a 2 1 150 100 50


# async fn window_frame_empty
query II
SELECT
SUM(c3) OVER() as sum1,
COUNT(*) OVER () as count1
FROM aggregate_test_100
ORDER BY c9
LIMIT 5
----
781 100
781 100
781 100
781 100
781 100

# async fn window_frame_rows_preceding
query IRI
SELECT
SUM(c4) OVER(ORDER BY c4 ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING),
AVG(c4) OVER(ORDER BY c4 ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING),
COUNT(*) OVER(ORDER BY c4 ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING)
FROM aggregate_test_100
ORDER BY c9
LIMIT 5
----
-48302 -16100.666666666666 3
11243 3747.666666666667 3
-51311 -17103.666666666668 3
-2391 -797 3
46756 15585.333333333334 3


# async fn window_frame_rows_preceding_stddev_variance
query RRRR
SELECT
VAR(c4) OVER(ORDER BY c4 ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING),
VAR_POP(c4) OVER(ORDER BY c4 ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING),
STDDEV(c4) OVER(ORDER BY c4 ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING),
STDDEV_POP(c4) OVER(ORDER BY c4 ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING)
FROM aggregate_test_100
ORDER BY c9
LIMIT 5
----
46721.33333333174 31147.555555554496 216.151181660734 176.486700789477
2639429.333333332 1759619.5555555548 1624.632060908971 1326.50652299774
746202.3333333324 497468.2222222216 863.830037295146 705.314271954156
768422.9999999981 512281.9999999988 876.597399037893 715.738779164577
66526.3333333288 44350.88888888587 257.926992254259 210.596507304575

# async fn window_frame_rows_preceding_with_partition_unique_order_by
query IRI
SELECT
SUM(c4) OVER(PARTITION BY c1 ORDER BY c9 ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING),
AVG(c4) OVER(PARTITION BY c1 ORDER BY c9 ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING),
COUNT(*) OVER(PARTITION BY c2 ORDER BY c9 ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING)
FROM aggregate_test_100
ORDER BY c9
LIMIT 5
----
-38611 -19305.5 2
17547 8773.5 2
-1301 -650.5 2
26638 13319 3
26861 8953.666666666666 3

# /// The partition by clause conducts sorting according to given partition column by default. If the
# /// sorting columns have non unique values, the unstable sorting may produce indeterminate results.
# /// Therefore, we are commenting out the following test for now.

#// #[tokio::test]
#// async fn window_frame_rows_preceding_with_non_unique_partition
#//     let ctx = SessionContext::new();
#//     register_aggregate_csv(&ctx).await?;
#//     let sql = "SELECT
#// SUM(c4) OVER(PARTITION BY c1 ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING),
#// COUNT(*) OVER(PARTITION BY c2 ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING)
#// FROM aggregate_test_100
#// ORDER BY c9
#// LIMIT 5
#//     let actual = execute_to_batches(&ctx, sql).await;
#//     let expected = vec![
#//         "+----------------------------+-----------------+",
#//         "| SUM(aggregate_test_100.c4) | COUNT(UInt8(1)) |",
#//         "+----------------------------+-----------------+",
#//         "| -33822      | 3|",
#//         "| 20808       | 3|",
#//         "| -29881      | 3|",
#//         "| -47613      | 3|",
#//         "| -13474      | 3|",
#//         "+----------------------------+-----------------+",
#//     ];
#//     assert_batches_eq!(expected, &actual);
#//     Ok(())
#// }

# async fn window_frame_ranges_preceding_following_desc
# This query should pass. Tracked in  https://github.com/apache/arrow-datafusion/issues/5346
query error DataFusion error: Internal error: Operator \+ is not implemented
SELECT
SUM(c4) OVER(ORDER BY c2 DESC RANGE BETWEEN 1 PRECEDING AND 1 FOLLOWING),
SUM(c3) OVER(ORDER BY c2 DESC RANGE BETWEEN 10000 PRECEDING AND 10000 FOLLOWING),
COUNT(*) OVER(ORDER BY c2 DESC RANGE BETWEEN 1 PRECEDING AND 1 FOLLOWING)
FROM aggregate_test_100
ORDER BY c9
LIMIT 5

# async fn window_frame_order_by_asc_desc_large
query I
SELECT
 SUM(c5) OVER (ORDER BY c2 ASC, c6 DESC) as sum1
 FROM aggregate_test_100
 LIMIT 5
----
-1383162419
-3265456275
-3909681744
-5241214934
-4246910946


# async fn window_frame_order_by_desc_large
query I
SELECT
 SUM(c5) OVER (ORDER BY c2 DESC, c6 ASC) as sum1
 FROM aggregate_test_100
 ORDER BY c9
 LIMIT 5
----
11212193439
22799733943
2935356871
15810962683
18035025006

# async fn window_frame_order_by_null_timestamp_order_by
query I
SELECT
 SUM(c1) OVER (ORDER BY c2 DESC) as summation1
 FROM null_cases
 LIMIT 5
----
962
962
962
962
962

# async fn window_frame_order_by_null_desc
query I
SELECT
 COUNT(c2) OVER (ORDER BY c1 DESC RANGE BETWEEN 5 PRECEDING AND 3 FOLLOWING)
 FROM null_cases
 LIMIT 5
----
9
9
9
9
9

# async fn window_frame_order_by_null_asc
query I
SELECT
 COUNT(c2) OVER (ORDER BY c1 RANGE BETWEEN 5 PRECEDING AND 3 FOLLOWING)
 FROM null_cases
 ORDER BY c1
 LIMIT 5
----
2
2
2
2
5

# async fn window_frame_order_by_null_asc_null_first
query I
SELECT
 COUNT(c2) OVER (ORDER BY c1 NULLS FIRST RANGE BETWEEN 5 PRECEDING AND 3 FOLLOWING)
 FROM null_cases
 LIMIT 5
----
9
9
9
9
9

# async fn window_frame_order_by_null_desc_null_last
query I
SELECT
 COUNT(c2) OVER (ORDER BY c1 DESC NULLS LAST RANGE BETWEEN 5 PRECEDING AND 3 FOLLOWING)
 FROM null_cases
 LIMIT 5
----
5
5
5
6
6

# async fn window_frame_rows_order_by_null
query IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII
SELECT
        SUM(c1) OVER (ORDER BY c3 RANGE BETWEEN 10 PRECEDING AND 11 FOLLOWING) as a,
        SUM(c1) OVER (ORDER BY c3 RANGE BETWEEN 10 PRECEDING AND 11 FOLLOWING) as b,
        SUM(c1) OVER (ORDER BY c3 DESC RANGE BETWEEN 10 PRECEDING AND 11 FOLLOWING) as c,
        SUM(c1) OVER (ORDER BY c3 NULLS first RANGE BETWEEN 10 PRECEDING AND 11 FOLLOWING) as d,
        SUM(c1) OVER (ORDER BY c3 DESC NULLS last RANGE BETWEEN 10 PRECEDING AND 11 FOLLOWING) as e,
        SUM(c1) OVER (ORDER BY c3 DESC NULLS first RANGE BETWEEN 10 PRECEDING AND 11 FOLLOWING) as f,
        SUM(c1) OVER (ORDER BY c3 NULLS first RANGE BETWEEN 10 PRECEDING AND 11 FOLLOWING) as g,
        SUM(c1) OVER (ORDER BY c3) as h,
        SUM(c1) OVER (ORDER BY c3 DESC) as i,
        SUM(c1) OVER (ORDER BY c3 NULLS first) as j,
        SUM(c1) OVER (ORDER BY c3 DESC NULLS first) as k,
        SUM(c1) OVER (ORDER BY c3 DESC NULLS last) as l,
        SUM(c1) OVER (ORDER BY c3, c2) as m,
        SUM(c1) OVER (ORDER BY c3, c1 DESC) as n,
        SUM(c1) OVER (ORDER BY c3 DESC, c1) as o,
        SUM(c1) OVER (ORDER BY c3, c1 NULLs first) as p,
        SUM(c1) OVER (ORDER BY c3 RANGE BETWEEN UNBOUNDED PRECEDING AND 11 FOLLOWING) as a1,
        SUM(c1) OVER (ORDER BY c3 RANGE BETWEEN UNBOUNDED PRECEDING AND 11 FOLLOWING) as b1,
        SUM(c1) OVER (ORDER BY c3 DESC RANGE BETWEEN UNBOUNDED PRECEDING AND 11 FOLLOWING) as c1,
        SUM(c1) OVER (ORDER BY c3 NULLS first RANGE BETWEEN UNBOUNDED PRECEDING AND 11 FOLLOWING) as d1,
        SUM(c1) OVER (ORDER BY c3 DESC NULLS last RANGE BETWEEN UNBOUNDED PRECEDING AND 11 FOLLOWING) as e1,
        SUM(c1) OVER (ORDER BY c3 DESC NULLS first RANGE BETWEEN UNBOUNDED PRECEDING AND 11 FOLLOWING) as f1,
        SUM(c1) OVER (ORDER BY c3 NULLS first RANGE BETWEEN UNBOUNDED PRECEDING AND 11 FOLLOWING) as g1,
        SUM(c1) OVER (ORDER BY c3 RANGE BETWEEN UNBOUNDED PRECEDING AND current row) as h1,
        SUM(c1) OVER (ORDER BY c3 RANGE BETWEEN UNBOUNDED PRECEDING AND current row) as j1,
        SUM(c1) OVER (ORDER BY c3 DESC RANGE BETWEEN UNBOUNDED PRECEDING AND current row) as k1,
        SUM(c1) OVER (ORDER BY c3 NULLS first RANGE BETWEEN UNBOUNDED PRECEDING AND current row) as l1,
        SUM(c1) OVER (ORDER BY c3 DESC NULLS last RANGE BETWEEN UNBOUNDED PRECEDING AND current row) as m1,
        SUM(c1) OVER (ORDER BY c3 DESC NULLS first RANGE BETWEEN UNBOUNDED PRECEDING AND current row) as n1,
        SUM(c1) OVER (ORDER BY c3 NULLS first RANGE BETWEEN UNBOUNDED PRECEDING AND current row) as o1,
        SUM(c1) OVER (ORDER BY c3 RANGE BETWEEN current row AND UNBOUNDED FOLLOWING) as h11,
        SUM(c1) OVER (ORDER BY c3 RANGE BETWEEN current row AND UNBOUNDED FOLLOWING) as j11,
        SUM(c1) OVER (ORDER BY c3 DESC RANGE BETWEEN current row AND UNBOUNDED FOLLOWING) as k11,
        SUM(c1) OVER (ORDER BY c3 NULLS first RANGE BETWEEN current row AND UNBOUNDED FOLLOWING) as l11,
        SUM(c1) OVER (ORDER BY c3 DESC NULLS last RANGE BETWEEN current row AND UNBOUNDED FOLLOWING) as m11,
        SUM(c1) OVER (ORDER BY c3 DESC NULLS first RANGE BETWEEN current row AND UNBOUNDED FOLLOWING) as n11,
        SUM(c1) OVER (ORDER BY c3 NULLS first RANGE BETWEEN current row AND UNBOUNDED FOLLOWING) as o11
        FROM null_cases
        ORDER BY c3
        LIMIT 5
----
412 412 339 412 339 339 412 NULL 4627 NULL 4627 4627 NULL NULL 4627 NULL 412 412 4627 412 4627 4627 412 NULL NULL 4627 NULL 4627 4627 NULL 4627 4627 NULL 4627 NULL NULL 4627
488 488 412 488 412 412 488 72 4627 72 4627 4627 72 72 4627 72 488 488 4627 488 4627 4627 488 72 72 4627 72 4627 4627 72 4627 4627 72 4627 72 72 4627
543 543 488 543 488 488 543 96 4555 96 4555 4555 96 96 4555 96 543 543 4627 543 4627 4627 543 96 96 4555 96 4555 4555 96 4555 4555 96 4555 96 96 4555
553 553 543 553 543 543 553 115 4531 115 4531 4531 115 115 4531 115 553 553 4627 553 4627 4627 553 115 115 4531 115 4531 4531 115 4531 4531 115 4531 115 115 4531
553 553 553 553 553 553 553 140 4512 140 4512 4512 140 140 4512 140 553 553 4627 553 4627 4627 553 140 140 4512 140 4512 4512 140 4512 4512 140 4512 140 140 4512
