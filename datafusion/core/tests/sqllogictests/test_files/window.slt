# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at

#   http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

statement ok
CREATE EXTERNAL TABLE aggregate_test_100 (
  c1  VARCHAR NOT NULL,
  c2  TINYINT NOT NULL,
  c3  SMALLINT NOT NULL,
  c4  SMALLINT,
  c5  INT,
  c6  BIGINT NOT NULL,
  c7  SMALLINT NOT NULL,
  c8  INT NOT NULL,
  c9  BIGINT UNSIGNED NOT NULL,
  c10 VARCHAR NOT NULL,
  c11 FLOAT NOT NULL,
  c12 DOUBLE NOT NULL,
  c13 VARCHAR NOT NULL
)
STORED AS CSV
WITH HEADER ROW
LOCATION '../../testing/data/csv/aggregate_test_100.csv'

statement ok
CREATE EXTERNAL TABLE null_cases(
  c1 BIGINT NULL,
  c2 DOUBLE NULL,
  c3 BIGINT NULL
)
STORED AS CSV
WITH HEADER ROW
LOCATION 'tests/data/null_cases.csv';

### This is the same table as
### execute_with_partition with 4 partitions
statement ok
CREATE EXTERNAL TABLE test (c1 int, c2 bigint, c3 boolean)
STORED AS CSV LOCATION 'tests/data/partitioned_csv';


# for window functions without order by the first, last, and nth function call does not make sense
# csv_query_window_with_empty_over
query IIII
select
c9,
count(c5) over () as count1,
max(c5) over () as max1,
min(c5) over () as min1
from aggregate_test_100
order by c9
limit 5
----
28774375 100 2143473091 -2141999138
63044568 100 2143473091 -2141999138
141047417 100 2143473091 -2141999138
141680161 100 2143473091 -2141999138
145294611 100 2143473091 -2141999138

# for window functions without order by the first, last, and nth function call does not make sense
# csv_query_window_with_partition_by
query IIRIII
select
c9,
sum(cast(c4 as Int)) over (partition by c3) as sum1,
avg(cast(c4 as Int)) over (partition by c3) as avg1,
count(cast(c4 as Int)) over (partition by c3) as count1,
max(cast(c4 as Int)) over (partition by c3) as max1,
min(cast(c4 as Int)) over (partition by c3) as min1
from aggregate_test_100
order by c9
limit 5
----
28774375 -16110 -16110 1 -16110 -16110
63044568 3917 3917 1 3917 3917
141047417 -38455 -19227.5 2 -16974 -21481
141680161 -1114 -1114 1 -1114 -1114
145294611 15673 15673 1 15673 15673



# async fn csv_query_window_with_order_by
query IIRIIIIII
select
c9,
sum(c5) over (order by c9) as sum1,
avg(c5) over (order by c9) as avg1,
count(c5) over (order by c9) as count1,
max(c5) over (order by c9) as max1,
min(c5) over (order by c9) as min1,
first_value(c5) over (order by c9) as fv1,
last_value(c5) over (order by c9) as lv1,
nth_value(c5, 2) over (order by c9) as nv1
from aggregate_test_100
order by c9
limit 5
----
28774375 61035129 61035129 1 61035129 61035129 61035129 61035129 NULL
63044568 -47938237 -23969118.5 2 61035129 -108973366 61035129 -108973366 -108973366
141047417 575165281 191721760.33333334 3 623103518 -108973366 61035129 623103518 -108973366
141680161 -1352462829 -338115707.25 4 623103518 -1927628110 61035129 -1927628110 -108973366
145294611 -3251637940 -650327588 5 623103518 -1927628110 61035129 -1899175111 -108973366

# csv_query_window_with_partition_by_order_by
query IIRIIIIII
select
 c9,
 sum(c5) over (partition by c4 order by c9) as sum1,
 avg(c5) over (partition by c4 order by c9) as avg1,
 count(c5) over (partition by c4 order by c9) as count1,
 max(c5) over (partition by c4 order by c9) as max1,
 min(c5) over (partition by c4 order by c9) as min1,
 first_value(c5) over (partition by c4 order by c9) as fv1,
 last_value(c5) over (partition by c4 order by c9) as lv1,
 nth_value(c5, 2) over (partition by c4 order by c9) as nv1
from aggregate_test_100
order by c9
limit 5
----
28774375 61035129 61035129 1 61035129 61035129 61035129 61035129 NULL
63044568 -108973366 -108973366 1 -108973366 -108973366 -108973366 -108973366 NULL
141047417 623103518 623103518 1 623103518 623103518 623103518 623103518 NULL
141680161 -1927628110 -1927628110 1 -1927628110 -1927628110 -1927628110 -1927628110 NULL
145294611 -1899175111 -1899175111 1 -1899175111 -1899175111 -1899175111 -1899175111 NULL

# window()
query IIIIIIR
SELECT
c1,
c2,
SUM(c2) OVER () as sum1,
COUNT(c2) OVER () as count1,
MAX(c2) OVER () as max1,
MIN(c2) OVER () as min1,
AVG(c2) OVER () as avg1
FROM test
ORDER BY c1, c2
LIMIT 5
----
0 0 220 44 10 0 5
0 1 220 44 10 0 5
0 2 220 44 10 0 5
0 3 220 44 10 0 5
0 4 220 44 10 0 5


# window_order_by
query IIIIIIIIIIR
SELECT
c1,
c2,
ROW_NUMBER() OVER (ORDER BY c1, c2) as rn1,
FIRST_VALUE(c2) OVER (ORDER BY c1, c2) as fv1,
LAST_VALUE(c2) OVER (ORDER BY c1, c2) as lv1,
NTH_VALUE(c2, 2) OVER (ORDER BY c1, c2) as nv1,
SUM(c2) OVER (ORDER BY c1, c2) as sum1,
COUNT(c2) OVER (ORDER BY c1, c2) as count1,
MAX(c2) OVER (ORDER BY c1, c2) as max1,
MIN(c2) OVER (ORDER BY c1, c2) as min1,
AVG(c2) OVER (ORDER BY c1, c2) as avg1
FROM test
ORDER BY c1, c2
LIMIT 5
----
0 0 1 0 0 NULL 0 1 0 0 0
0 1 2 0 1 1 1 2 1 0 0.5
0 2 3 0 2 1 3 3 2 0 1
0 3 4 0 3 1 6 4 3 0 1.5
0 4 5 0 4 1 10 5 4 0 2

# window_partition_by
query IIIIIIR
SELECT
c1,
c2,
SUM(c2) OVER (PARTITION BY c2) as sum1,
COUNT(c2) OVER (PARTITION BY c2) as count1,
MAX(c2) OVER (PARTITION BY c2) as max1,
MIN(c2) OVER (PARTITION BY c2) as min1,
AVG(c2) OVER (PARTITION BY c2) as avg1
FROM test
ORDER BY c1, c2
LIMIT 5
----
0 0 0 4 0 0 0
0 1 4 4 1 1 1
0 2 8 4 2 2 2
0 3 12 4 3 3 3
0 4 16 4 4 4 4

query IIIIIIIIIIR
SELECT
c1,
c2,
ROW_NUMBER() OVER (PARTITION BY c2 ORDER BY c1) as rn1,
FIRST_VALUE(c2 + c1) OVER (PARTITION BY c2 ORDER BY c1) as fv1,
LAST_VALUE(c2 + c1) OVER (PARTITION BY c2 ORDER BY c1) as lv1,
NTH_VALUE(c2 + c1, 1) OVER (PARTITION BY c2 ORDER BY c1) as nv1,
SUM(c2) OVER (PARTITION BY c2 ORDER BY c1) as sum1,
COUNT(c2) OVER (PARTITION BY c2 ORDER BY c1) as count1,
MAX(c2) OVER (PARTITION BY c2 ORDER BY c1) as max1,
MIN(c2) OVER (PARTITION BY c2 ORDER BY c1) as min1,
AVG(c2) OVER (PARTITION BY c2 ORDER BY c1) as avg1
FROM test
ORDER BY c1, c2
LIMIT 5
----
0 0 1 0 0 0 0 1 0 0 0
0 1 1 1 1 1 1 1 1 1 1
0 2 1 2 2 2 2 1 2 2 2
0 3 1 3 3 3 3 1 3 3 3
0 4 1 4 4 4 4 1 4 4 4


#####
# window_expr_eliminate()
#####

# window expr is not referenced anywhere, eliminate it.
query TT
EXPLAIN
WITH _sample_data AS (
 SELECT 1 as a, 'aa' AS b
 UNION ALL
 SELECT 3 as a, 'aa' AS b
 UNION ALL
 SELECT 5 as a, 'bb' AS b
 UNION ALL
 SELECT 7 as a, 'bb' AS b
    ), _data2 AS (
 SELECT
 row_number() OVER (PARTITION BY s.b ORDER BY s.a) AS seq,
 s.a,
 s.b
 FROM _sample_data s
    )
    SELECT d.b, MAX(d.a) AS max_a
    FROM _data2 d
    GROUP BY d.b
    ORDER BY d.b;
----
logical_plan
Sort: d.b ASC NULLS LAST
  Projection: d.b, MAX(d.a) AS max_a
    Aggregate: groupBy=[[d.b]], aggr=[[MAX(d.a)]]
      SubqueryAlias: d
        SubqueryAlias: _data2
          SubqueryAlias: s
            SubqueryAlias: _sample_data
              Union
                Projection: Int64(1) AS a, Utf8("aa") AS b
                  EmptyRelation
                Projection: Int64(3) AS a, Utf8("aa") AS b
                  EmptyRelation
                Projection: Int64(5) AS a, Utf8("bb") AS b
                  EmptyRelation
                Projection: Int64(7) AS a, Utf8("bb") AS b
                  EmptyRelation
physical_plan
SortPreservingMergeExec: [b@0 ASC NULLS LAST]
  SortExec: expr=[b@0 ASC NULLS LAST]
    ProjectionExec: expr=[b@0 as b, MAX(d.a)@1 as max_a]
      AggregateExec: mode=FinalPartitioned, gby=[b@0 as b], aggr=[MAX(d.a)]
        CoalesceBatchesExec: target_batch_size=8192
          RepartitionExec: partitioning=Hash([Column { name: "b", index: 0 }], 4), input_partitions=4
            AggregateExec: mode=Partial, gby=[b@1 as b], aggr=[MAX(d.a)]
              UnionExec
                ProjectionExec: expr=[1 as a, aa as b]
                  EmptyExec: produce_one_row=true
                ProjectionExec: expr=[3 as a, aa as b]
                  EmptyExec: produce_one_row=true
                ProjectionExec: expr=[5 as a, bb as b]
                  EmptyExec: produce_one_row=true
                ProjectionExec: expr=[7 as a, bb as b]
                  EmptyExec: produce_one_row=true

# Check actual result:
query TI
WITH _sample_data AS (
 SELECT 1 as a, 'aa' AS b
 UNION ALL
 SELECT 3 as a, 'aa' AS b
 UNION ALL
 SELECT 5 as a, 'bb' AS b
 UNION ALL
 SELECT 7 as a, 'bb' AS b
    ), _data2 AS (
 SELECT
 row_number() OVER (PARTITION BY s.b ORDER BY s.a) AS seq,
 s.a,
 s.b
 FROM _sample_data s
    )
    SELECT d.b, MAX(d.a) AS max_a
    FROM _data2 d
    GROUP BY d.b
    ORDER BY d.b;
----
aa 3
bb 7

#   window expr is referenced by the output, keep it
query TT
EXPLAIN
WITH _sample_data AS (
 SELECT 1 as a, 'aa' AS b
 UNION ALL
 SELECT 3 as a, 'aa' AS b
 UNION ALL
 SELECT 5 as a, 'bb' AS b
 UNION ALL
 SELECT 7 as a, 'bb' AS b
    ), _data2 AS (
 SELECT
 row_number() OVER (PARTITION BY s.b ORDER BY s.a) AS seq,
 s.a,
 s.b
 FROM _sample_data s
    )
    SELECT d.b, MAX(d.a) AS max_a, max(d.seq)
    FROM _data2 d
    GROUP BY d.b
    ORDER BY d.b
----
logical_plan
Sort: d.b ASC NULLS LAST
  Projection: d.b, MAX(d.a) AS max_a, MAX(d.seq)
    Aggregate: groupBy=[[d.b]], aggr=[[MAX(d.a), MAX(d.seq)]]
      SubqueryAlias: d
        SubqueryAlias: _data2
          Projection: ROW_NUMBER() PARTITION BY [s.b] ORDER BY [s.a ASC NULLS LAST] RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW AS seq, s.a, s.b
            WindowAggr: windowExpr=[[ROW_NUMBER() PARTITION BY [s.b] ORDER BY [s.a ASC NULLS LAST] RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW]]
              SubqueryAlias: s
                SubqueryAlias: _sample_data
                  Union
                    Projection: Int64(1) AS a, Utf8("aa") AS b
                      EmptyRelation
                    Projection: Int64(3) AS a, Utf8("aa") AS b
                      EmptyRelation
                    Projection: Int64(5) AS a, Utf8("bb") AS b
                      EmptyRelation
                    Projection: Int64(7) AS a, Utf8("bb") AS b
                      EmptyRelation
physical_plan
SortPreservingMergeExec: [b@0 ASC NULLS LAST]
  SortExec: expr=[b@0 ASC NULLS LAST]
    ProjectionExec: expr=[b@0 as b, MAX(d.a)@1 as max_a, MAX(d.seq)@2 as MAX(d.seq)]
      AggregateExec: mode=FinalPartitioned, gby=[b@0 as b], aggr=[MAX(d.a), MAX(d.seq)]
        AggregateExec: mode=Partial, gby=[b@2 as b], aggr=[MAX(d.a), MAX(d.seq)]
          ProjectionExec: expr=[ROW_NUMBER() PARTITION BY [s.b] ORDER BY [s.a ASC NULLS LAST] RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW@2 as seq, a@0 as a, b@1 as b]
            BoundedWindowAggExec: wdw=[ROW_NUMBER(): Ok(Field { name: "ROW_NUMBER()", data_type: UInt64, nullable: false, dict_id: 0, dict_is_ordered: false, metadata: {} }), frame: WindowFrame { units: Range, start_bound: Preceding(Int64(NULL)), end_bound: CurrentRow }]
              SortExec: expr=[b@1 ASC NULLS LAST,a@0 ASC NULLS LAST]
                CoalesceBatchesExec: target_batch_size=8192
                  RepartitionExec: partitioning=Hash([Column { name: "b", index: 1 }], 4), input_partitions=4
                    UnionExec
                      ProjectionExec: expr=[1 as a, aa as b]
                        EmptyExec: produce_one_row=true
                      ProjectionExec: expr=[3 as a, aa as b]
                        EmptyExec: produce_one_row=true
                      ProjectionExec: expr=[5 as a, bb as b]
                        EmptyExec: produce_one_row=true
                      ProjectionExec: expr=[7 as a, bb as b]
                        EmptyExec: produce_one_row=true


# check actual result

query TII
WITH _sample_data AS (
 SELECT 1 as a, 'aa' AS b
 UNION ALL
 SELECT 3 as a, 'aa' AS b
 UNION ALL
 SELECT 5 as a, 'bb' AS b
 UNION ALL
 SELECT 7 as a, 'bb' AS b
    ), _data2 AS (
 SELECT
 row_number() OVER (PARTITION BY s.b ORDER BY s.a) AS seq,
 s.a,
 s.b
 FROM _sample_data s
    )
    SELECT d.b, MAX(d.a) AS max_a, max(d.seq)
    FROM _data2 d
    GROUP BY d.b
    ORDER BY d.b
----
aa 3 2
bb 7 2


# async fn window_in_expression
query I rowsort
select 1 - lag(amount, 1) over (order by idx) as column1 from (values ('a', 1, 100), ('a', 2, 150)) as t (col1, idx, amount)
---
----
-99
NULL


# async fn window_with_agg_in_expression
query TIIIII
select col1, idx, count(*), sum(amount), lag(sum(amount), 1) over (order by idx) as prev_amount,
sum(amount) - lag(sum(amount), 1) over (order by idx) as difference from (
select * from (values ('a', 1, 100), ('a', 2, 150)) as t (col1, idx, amount)
) a
group by col1, idx
----
a 1 1 100 NULL NULL
a 2 1 150 100 50


# async fn window_frame_empty
query II
SELECT
SUM(c3) OVER() as sum1,
COUNT(*) OVER () as count1
FROM aggregate_test_100
ORDER BY c9
LIMIT 5
----
781 100
781 100
781 100
781 100
781 100

# async fn window_frame_rows_preceding
query IRI
SELECT
SUM(c4) OVER(ORDER BY c4 ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING),
AVG(c4) OVER(ORDER BY c4 ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING),
COUNT(*) OVER(ORDER BY c4 ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING)
FROM aggregate_test_100
ORDER BY c9
LIMIT 5
----
-48302 -16100.666666666666 3
11243 3747.666666666667 3
-51311 -17103.666666666668 3
-2391 -797 3
46756 15585.333333333334 3


# async fn window_frame_rows_preceding_stddev_variance
query RRRR
SELECT
VAR(c4) OVER(ORDER BY c4 ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING),
VAR_POP(c4) OVER(ORDER BY c4 ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING),
STDDEV(c4) OVER(ORDER BY c4 ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING),
STDDEV_POP(c4) OVER(ORDER BY c4 ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING)
FROM aggregate_test_100
ORDER BY c9
LIMIT 5
----
46721.33333333174 31147.555555554496 216.151181660734 176.486700789477
2639429.333333332 1759619.5555555548 1624.632060908971 1326.50652299774
746202.3333333324 497468.2222222216 863.830037295146 705.314271954156
768422.9999999981 512281.9999999988 876.597399037893 715.738779164577
66526.3333333288 44350.88888888587 257.926992254259 210.596507304575

# async fn window_frame_rows_preceding_with_partition_unique_order_by
query IRI
SELECT
SUM(c4) OVER(PARTITION BY c1 ORDER BY c9 ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING),
AVG(c4) OVER(PARTITION BY c1 ORDER BY c9 ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING),
COUNT(*) OVER(PARTITION BY c2 ORDER BY c9 ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING)
FROM aggregate_test_100
ORDER BY c9
LIMIT 5
----
-38611 -19305.5 2
17547 8773.5 2
-1301 -650.5 2
26638 13319 3
26861 8953.666666666666 3

# /// The partition by clause conducts sorting according to given partition column by default. If the
# /// sorting columns have non unique values, the unstable sorting may produce indeterminate results.
# /// Therefore, we are commenting out the following test for now.

#// #[tokio::test]
#// async fn window_frame_rows_preceding_with_non_unique_partition
#//     let ctx = SessionContext::new();
#//     register_aggregate_csv(&ctx).await?;
#//     let sql = "SELECT
#// SUM(c4) OVER(PARTITION BY c1 ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING),
#// COUNT(*) OVER(PARTITION BY c2 ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING)
#// FROM aggregate_test_100
#// ORDER BY c9
#// LIMIT 5
#//     let actual = execute_to_batches(&ctx, sql).await;
#//     let expected = vec![
#//         "+----------------------------+-----------------+",
#//         "| SUM(aggregate_test_100.c4) | COUNT(UInt8(1)) |",
#//         "+----------------------------+-----------------+",
#//         "| -33822      | 3|",
#//         "| 20808       | 3|",
#//         "| -29881      | 3|",
#//         "| -47613      | 3|",
#//         "| -13474      | 3|",
#//         "+----------------------------+-----------------+",
#//     ];
#//     assert_batches_eq!(expected, &actual);
#//     Ok(())
#// }

# async fn window_frame_ranges_preceding_following_desc
query III
SELECT
SUM(c4) OVER(ORDER BY c2 DESC RANGE BETWEEN 1 PRECEDING AND 1 FOLLOWING),
SUM(c3) OVER(ORDER BY c2 DESC RANGE BETWEEN 10000 PRECEDING AND 10000 FOLLOWING),
COUNT(*) OVER(ORDER BY c2 DESC RANGE BETWEEN 1 PRECEDING AND 1 FOLLOWING)
FROM aggregate_test_100
ORDER BY c9
LIMIT 5
----
52276 781 56
260620 781 63
-28623 781 37
260620 781 63
260620 781 63

# async fn window_frame_large_range
# Range offset 10000 is too big for Int8 (i.e. the type of c3).
# In this case, we should be able to still produce correct results.
# See the issue: https://github.com/apache/arrow-datafusion/issues/5346
# below over clause is equivalent to OVER(ORDER BY c3 DESC RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)
# in terms of behaviour.
query I
SELECT
SUM(c3) OVER(ORDER BY c3 DESC RANGE BETWEEN 10000 PRECEDING AND 10000 FOLLOWING) as summation1
FROM aggregate_test_100
ORDER BY c9
LIMIT 5
----
781
781
781
781
781

# async fn window_frame_order_by_asc_desc_large
query I
SELECT
 SUM(c5) OVER (ORDER BY c2 ASC, c6 DESC) as sum1
 FROM aggregate_test_100
 LIMIT 5
----
-1383162419
-3265456275
-3909681744
-5241214934
-4246910946


# async fn window_frame_order_by_desc_large
query I
SELECT
 SUM(c5) OVER (ORDER BY c2 DESC, c6 ASC) as sum1
 FROM aggregate_test_100
 ORDER BY c9
 LIMIT 5
----
11212193439
22799733943
2935356871
15810962683
18035025006

# async fn window_frame_order_by_null_timestamp_order_by
query I
SELECT
 SUM(c1) OVER (ORDER BY c2 DESC) as summation1
 FROM null_cases
 LIMIT 5
----
962
962
962
962
962

# async fn window_frame_order_by_null_desc
query I
SELECT
 COUNT(c2) OVER (ORDER BY c1 DESC RANGE BETWEEN 5 PRECEDING AND 3 FOLLOWING)
 FROM null_cases
 LIMIT 5
----
9
9
9
9
9

# async fn window_frame_order_by_null_asc
query I
SELECT
 COUNT(c2) OVER (ORDER BY c1 RANGE BETWEEN 5 PRECEDING AND 3 FOLLOWING)
 FROM null_cases
 ORDER BY c1
 LIMIT 5
----
2
2
2
2
5

# async fn window_frame_order_by_null_asc_null_first
query I
SELECT
 COUNT(c2) OVER (ORDER BY c1 NULLS FIRST RANGE BETWEEN 5 PRECEDING AND 3 FOLLOWING)
 FROM null_cases
 LIMIT 5
----
9
9
9
9
9

# async fn window_frame_order_by_null_desc_null_last
query I
SELECT
 COUNT(c2) OVER (ORDER BY c1 DESC NULLS LAST RANGE BETWEEN 5 PRECEDING AND 3 FOLLOWING)
 FROM null_cases
 LIMIT 5
----
5
5
5
6
6

# async fn window_frame_rows_order_by_null
query IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII
SELECT
        SUM(c1) OVER (ORDER BY c3 RANGE BETWEEN 10 PRECEDING AND 11 FOLLOWING) as a,
        SUM(c1) OVER (ORDER BY c3 RANGE BETWEEN 10 PRECEDING AND 11 FOLLOWING) as b,
        SUM(c1) OVER (ORDER BY c3 DESC RANGE BETWEEN 10 PRECEDING AND 11 FOLLOWING) as c,
        SUM(c1) OVER (ORDER BY c3 NULLS first RANGE BETWEEN 10 PRECEDING AND 11 FOLLOWING) as d,
        SUM(c1) OVER (ORDER BY c3 DESC NULLS last RANGE BETWEEN 10 PRECEDING AND 11 FOLLOWING) as e,
        SUM(c1) OVER (ORDER BY c3 DESC NULLS first RANGE BETWEEN 10 PRECEDING AND 11 FOLLOWING) as f,
        SUM(c1) OVER (ORDER BY c3 NULLS first RANGE BETWEEN 10 PRECEDING AND 11 FOLLOWING) as g,
        SUM(c1) OVER (ORDER BY c3) as h,
        SUM(c1) OVER (ORDER BY c3 DESC) as i,
        SUM(c1) OVER (ORDER BY c3 NULLS first) as j,
        SUM(c1) OVER (ORDER BY c3 DESC NULLS first) as k,
        SUM(c1) OVER (ORDER BY c3 DESC NULLS last) as l,
        SUM(c1) OVER (ORDER BY c3, c2) as m,
        SUM(c1) OVER (ORDER BY c3, c1 DESC) as n,
        SUM(c1) OVER (ORDER BY c3 DESC, c1) as o,
        SUM(c1) OVER (ORDER BY c3, c1 NULLs first) as p,
        SUM(c1) OVER (ORDER BY c3 RANGE BETWEEN UNBOUNDED PRECEDING AND 11 FOLLOWING) as a1,
        SUM(c1) OVER (ORDER BY c3 RANGE BETWEEN UNBOUNDED PRECEDING AND 11 FOLLOWING) as b1,
        SUM(c1) OVER (ORDER BY c3 DESC RANGE BETWEEN UNBOUNDED PRECEDING AND 11 FOLLOWING) as c1,
        SUM(c1) OVER (ORDER BY c3 NULLS first RANGE BETWEEN UNBOUNDED PRECEDING AND 11 FOLLOWING) as d1,
        SUM(c1) OVER (ORDER BY c3 DESC NULLS last RANGE BETWEEN UNBOUNDED PRECEDING AND 11 FOLLOWING) as e1,
        SUM(c1) OVER (ORDER BY c3 DESC NULLS first RANGE BETWEEN UNBOUNDED PRECEDING AND 11 FOLLOWING) as f1,
        SUM(c1) OVER (ORDER BY c3 NULLS first RANGE BETWEEN UNBOUNDED PRECEDING AND 11 FOLLOWING) as g1,
        SUM(c1) OVER (ORDER BY c3 RANGE BETWEEN UNBOUNDED PRECEDING AND current row) as h1,
        SUM(c1) OVER (ORDER BY c3 RANGE BETWEEN UNBOUNDED PRECEDING AND current row) as j1,
        SUM(c1) OVER (ORDER BY c3 DESC RANGE BETWEEN UNBOUNDED PRECEDING AND current row) as k1,
        SUM(c1) OVER (ORDER BY c3 NULLS first RANGE BETWEEN UNBOUNDED PRECEDING AND current row) as l1,
        SUM(c1) OVER (ORDER BY c3 DESC NULLS last RANGE BETWEEN UNBOUNDED PRECEDING AND current row) as m1,
        SUM(c1) OVER (ORDER BY c3 DESC NULLS first RANGE BETWEEN UNBOUNDED PRECEDING AND current row) as n1,
        SUM(c1) OVER (ORDER BY c3 NULLS first RANGE BETWEEN UNBOUNDED PRECEDING AND current row) as o1,
        SUM(c1) OVER (ORDER BY c3 RANGE BETWEEN current row AND UNBOUNDED FOLLOWING) as h11,
        SUM(c1) OVER (ORDER BY c3 RANGE BETWEEN current row AND UNBOUNDED FOLLOWING) as j11,
        SUM(c1) OVER (ORDER BY c3 DESC RANGE BETWEEN current row AND UNBOUNDED FOLLOWING) as k11,
        SUM(c1) OVER (ORDER BY c3 NULLS first RANGE BETWEEN current row AND UNBOUNDED FOLLOWING) as l11,
        SUM(c1) OVER (ORDER BY c3 DESC NULLS last RANGE BETWEEN current row AND UNBOUNDED FOLLOWING) as m11,
        SUM(c1) OVER (ORDER BY c3 DESC NULLS first RANGE BETWEEN current row AND UNBOUNDED FOLLOWING) as n11,
        SUM(c1) OVER (ORDER BY c3 NULLS first RANGE BETWEEN current row AND UNBOUNDED FOLLOWING) as o11
        FROM null_cases
        ORDER BY c3
        LIMIT 5
----
412 412 339 412 339 339 412 NULL 4627 NULL 4627 4627 NULL NULL 4627 NULL 412 412 4627 412 4627 4627 412 NULL NULL 4627 NULL 4627 4627 NULL 4627 4627 NULL 4627 NULL NULL 4627
488 488 412 488 412 412 488 72 4627 72 4627 4627 72 72 4627 72 488 488 4627 488 4627 4627 488 72 72 4627 72 4627 4627 72 4627 4627 72 4627 72 72 4627
543 543 488 543 488 488 543 96 4555 96 4555 4555 96 96 4555 96 543 543 4627 543 4627 4627 543 96 96 4555 96 4555 4555 96 4555 4555 96 4555 96 96 4555
553 553 543 553 543 543 553 115 4531 115 4531 4531 115 115 4531 115 553 553 4627 553 4627 4627 553 115 115 4531 115 4531 4531 115 4531 4531 115 4531 115 115 4531
553 553 553 553 553 553 553 140 4512 140 4512 4512 140 140 4512 140 553 553 4627 553 4627 4627 553 140 140 4512 140 4512 4512 140 4512 4512 140 4512 140 140 4512



# window_frame_rows_preceding_with_unique_partition
query II
SELECT
SUM(c4) OVER(PARTITION BY c1 ORDER BY c9 ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING),
COUNT(*) OVER(PARTITION BY c1 ORDER BY c9 ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING)
FROM aggregate_test_100
ORDER BY c9
LIMIT 5
----
-38611 2
17547 2
-1301 2
26638 2
26861 3


#fn window_frame_ranges_preceding_following
statement error DataFusion error: Internal error: Operator \- is not implemented for types
SELECT
SUM(c4) OVER(ORDER BY c2 RANGE BETWEEN 1 PRECEDING AND 1 FOLLOWING),
SUM(c3) OVER(ORDER BY c2 RANGE BETWEEN 10000 PRECEDING AND 10000 FOLLOWING),
COUNT(*) OVER(ORDER BY c2 RANGE BETWEEN 1 PRECEDING AND 1 FOLLOWING)
FROM aggregate_test_100
ORDER BY c9
LIMIT 5


#fn window_frame_ranges_ntile
query II
SELECT
NTILE(8) OVER (ORDER BY C4) as ntile1,
NTILE(12) OVER (ORDER BY C12 DESC) as ntile2
FROM aggregate_test_100
ORDER BY c7
LIMIT 5
----
8 12
5 11
3 11
2 7
7 12

#fn window_frame_ranges_string_check
query II
SELECT
SUM(LENGTH(c13)) OVER(ORDER BY c13),
SUM(LENGTH(c1)) OVER(ORDER BY c1)
FROM aggregate_test_100
ORDER BY c9
LIMIT 5
----
2100 100
510 79
1440 21
1830 61
2010 21


#fn window_frame_order_by_unique
query II
SELECT
SUM(c5) OVER (ORDER BY c5) as sum1,
COUNT(*) OVER (ORDER BY c9) as count1
FROM aggregate_test_100
ORDER BY c9
LIMIT 5
----
-49877765574 1
-50025861694 2
-45402230071 3
-14557735645 4
-18365391649 5


# /// If the sorting columns have non unique values, the unstable sorting may produce
# /// indeterminate results. Therefore, we are commenting out the following test for now.
# ///
# // #[tokio::test]
# // async fn window_frame_order_by_non_unique
# //     let ctx = SessionContext::new();
# //     register_aggregate_csv(&ctx).await?;
# //     let sql = "SELECT \
# // c2, \
# // c9, \
# // SUM(c5) OVER (ORDER BY c2), \
# // COUNT(*) OVER (ORDER BY c2) \
# // FROM aggregate_test_100 \
# // ORDER BY c2 \
# // LIMIT 5";
# //     let actual = execute_to_batches(&ctx, sql).await;
# //     let expected = vec![
# //         "+----+------------+----------------------------+-----------------+",
# //         "| c2 | c9         | SUM(aggregate_test_100.c5) | COUNT(UInt8(1)) |",
# //         "+----+------------+----------------------------+-----------------+",
# //         "| 1  | 879082834  | -438598674  | 22              |",
# //         "| 1  | 3542840110 | -438598674  | 22              |",
# //         "| 1  | 3275293996 | -438598674  | 22              |",
# //         "| 1  | 774637006  | -438598674  | 22              |",
# //         "| 1  | 4015442341 | -438598674  | 22              |",
# //         "+----+------------+----------------------------+-----------------+",
# //     ];
# //     assert_batches_eq!(expected, &actual);
# //     Ok(())
# // }

#fn window_frame_ranges_unbounded_preceding_following
query II
SELECT
SUM(c2) OVER (ORDER BY c2 RANGE BETWEEN UNBOUNDED PRECEDING AND 1 FOLLOWING) as sum1,
COUNT(*) OVER (ORDER BY c2 RANGE BETWEEN UNBOUNDED PRECEDING AND 1 FOLLOWING) as cnt1
FROM aggregate_test_100
ORDER BY c9
LIMIT 5
----
285 100
123 63
285 100
123 63
123 63


#fn window_frame_ranges_preceding_and_preceding
query II
SELECT
SUM(c2) OVER (ORDER BY c2 RANGE BETWEEN 3 PRECEDING AND 1 PRECEDING),
COUNT(*) OVER (ORDER BY c2 RANGE BETWEEN 3 PRECEDING AND 1 PRECEDING)
FROM aggregate_test_100
ORDER BY c9
LIMIT 5
----
123 63
22 22
193 64
22 22
22 22

#fn window_frame_ranges_unbounded_preceding_following_diff_col
query II
SELECT
SUM(c2) OVER (ORDER BY c2 RANGE BETWEEN CURRENT ROW AND 1 FOLLOWING),
COUNT(*) OVER (ORDER BY c2 RANGE BETWEEN CURRENT ROW AND 1 FOLLOWING)
FROM aggregate_test_100
ORDER BY c9
LIMIT 5
----
162 37
101 41
70 14
101 41
101 41

#fn window_frame_partition_by_order_by_desc
query I
SELECT
SUM(c4) OVER(PARTITION BY c1 ORDER BY c2 DESC RANGE BETWEEN 1 PRECEDING AND 1 FOLLOWING)
FROM aggregate_test_100
ORDER BY c9
LIMIT 5
----
-124618
205080
-40819
-19517
47246


#fn window_frame_range_float
query R
SELECT
 SUM(c12) OVER (ORDER BY C12 RANGE BETWEEN 0.2 PRECEDING AND 0.2 FOLLOWING)
 FROM aggregate_test_100
 ORDER BY C9
 LIMIT 5
----
2.547670180363
10.629941254821
2.547670180363
20.349518503437
21.408674363508

#fn window_frame_ranges_timestamp

statement ok
create table temp as values
(1664264591000000000),
(1664264592000000000),
(1664264592000000000),
(1664264593000000000),
(1664264594000000000),
(1664364594000000000),
(1664464594000000000),
(1664564594000000000);

statement ok
create table t as select cast(column1 as timestamp) as ts from temp;

query PIII
SELECT
 ts,
 COUNT(*) OVER (ORDER BY ts RANGE BETWEEN INTERVAL '1' DAY PRECEDING AND INTERVAL '2 DAY' FOLLOWING) AS cnt1,
 COUNT(*) OVER (ORDER BY ts RANGE BETWEEN '0 DAY' PRECEDING AND '0' DAY FOLLOWING) as cnt2,
 COUNT(*) OVER (ORDER BY ts RANGE BETWEEN '5' SECOND PRECEDING AND CURRENT ROW) as cnt3
 FROM t
 ORDER BY ts
----
2022-09-27T07:43:11 6 1 1
2022-09-27T07:43:12 6 2 3
2022-09-27T07:43:12 6 2 3
2022-09-27T07:43:13 6 1 4
2022-09-27T07:43:14 6 1 5
2022-09-28T11:29:54 2 1 1
2022-09-29T15:16:34 2 1 1
2022-09-30T19:03:14 1 1 1

statement ok
drop table t

statement ok
drop table temp


#fn window_frame_ranges_unbounded_preceding_err
statement error DataFusion error: Execution error: Invalid window frame: end bound cannot be unbounded preceding
SELECT
SUM(c2) OVER (ORDER BY c2 RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED PRECEDING),
COUNT(*) OVER (ORDER BY c2 RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED PRECEDING)
FROM aggregate_test_100
ORDER BY c9
LIMIT 5


#fn window_frame_groups_preceding_following_desc
query III
SELECT
SUM(c4) OVER(ORDER BY c2 DESC GROUPS BETWEEN 1 PRECEDING AND 1 FOLLOWING),
SUM(c3) OVER(ORDER BY c2 DESC GROUPS BETWEEN 10000 PRECEDING AND 10000 FOLLOWING),
COUNT(*) OVER(ORDER BY c2 DESC GROUPS BETWEEN 1 PRECEDING AND 1 FOLLOWING)
FROM aggregate_test_100
ORDER BY c9
LIMIT 5
----
52276 781 56
260620 781 63
-28623 781 37
260620 781 63
260620 781 63

#fn window_frame_groups_order_by_null_desc
query I
SELECT
COUNT(c2) OVER (ORDER BY c1 DESC GROUPS BETWEEN 5 PRECEDING AND 3 FOLLOWING)
FROM null_cases
LIMIT 5
----
12
12
12
12
12

#fn window_frame_groups
query IIIIIIIIIIIIIIIIIIIIII
SELECT
SUM(c1) OVER (ORDER BY c3 GROUPS BETWEEN 9 PRECEDING AND 11 FOLLOWING) as a,
SUM(c1) OVER (ORDER BY c3 DESC GROUPS BETWEEN 9 PRECEDING AND 11 FOLLOWING) as b,
SUM(c1) OVER (ORDER BY c3 NULLS first GROUPS BETWEEN 9 PRECEDING AND 11 FOLLOWING) as c,
SUM(c1) OVER (ORDER BY c3 DESC NULLS last GROUPS BETWEEN 9 PRECEDING AND 11 FOLLOWING) as d,
SUM(c1) OVER (ORDER BY c3 DESC NULLS first GROUPS BETWEEN 9 PRECEDING AND 11 FOLLOWING) as e,
SUM(c1) OVER (ORDER BY c3 NULLS first GROUPS BETWEEN 9 PRECEDING AND 11 FOLLOWING) as f,
SUM(c1) OVER (ORDER BY c3 GROUPS current row) as a1,
SUM(c1) OVER (ORDER BY c3 GROUPS BETWEEN 9 PRECEDING AND 5 PRECEDING) as a2,
SUM(c1) OVER (ORDER BY c3 GROUPS BETWEEN UNBOUNDED PRECEDING AND 5 PRECEDING) as a3,
SUM(c1) OVER (ORDER BY c3 GROUPS BETWEEN UNBOUNDED PRECEDING AND 11 FOLLOWING) as a4,
SUM(c1) OVER (ORDER BY c3 GROUPS BETWEEN UNBOUNDED PRECEDING AND current row) as a5,
SUM(c1) OVER (ORDER BY c3 GROUPS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) as a6,
SUM(c1) OVER (ORDER BY c3 GROUPS BETWEEN 1 PRECEDING AND UNBOUNDED FOLLOWING) as a7,
SUM(c1) OVER (ORDER BY c3 GROUPS BETWEEN 3 FOLLOWING AND UNBOUNDED FOLLOWING) as a8,
SUM(c1) OVER (ORDER BY c3 GROUPS BETWEEN current row AND UNBOUNDED FOLLOWING) as a9,
SUM(c1) OVER (ORDER BY c3 GROUPS BETWEEN current row AND 3 FOLLOWING) as a10,
SUM(c1) OVER (ORDER BY c3 GROUPS BETWEEN 5 FOLLOWING AND 7 FOLLOWING) as a11,
SUM(c1) OVER (ORDER BY c3 DESC GROUPS current row) as a21,
SUM(c1) OVER (ORDER BY c3 NULLS first GROUPS BETWEEN 9 PRECEDING AND 5 PRECEDING) as a22,
SUM(c1) OVER (ORDER BY c3 DESC NULLS last GROUPS BETWEEN UNBOUNDED PRECEDING AND 5 PRECEDING) as a23,
SUM(c1) OVER (ORDER BY c3 NULLS last GROUPS BETWEEN UNBOUNDED PRECEDING AND 11 FOLLOWING) as a24,
SUM(c1) OVER (ORDER BY c3 DESC NULLS first GROUPS BETWEEN UNBOUNDED PRECEDING AND current row) as a25
FROM null_cases
ORDER BY c3
LIMIT 10
----
412 307 412 307 307 412 NULL NULL NULL 412 NULL 4627 4627 4531 4627 115 85 NULL NULL 4487 412 4627
488 339 488 339 339 488 72 NULL NULL 488 72 4627 4627 4512 4627 140 153 72 NULL 4473 488 4627
543 412 543 412 412 543 24 NULL NULL 543 96 4627 4627 4487 4555 82 122 24 NULL 4442 543 4555
553 488 553 488 488 553 19 NULL NULL 553 115 4627 4555 4473 4531 89 114 19 NULL 4402 553 4531
553 543 553 543 543 553 25 NULL NULL 553 140 4627 4531 4442 4512 110 105 25 NULL 4320 553 4512
591 553 591 553 553 591 14 NULL NULL 591 154 4627 4512 4402 4487 167 181 14 NULL 4320 591 4487
651 553 651 553 553 651 31 72 72 651 185 4627 4487 4320 4473 153 204 31 72 4288 651 4473
662 591 662 591 591 662 40 96 96 662 225 4627 4473 4320 4442 154 141 40 96 4215 662 4442
697 651 697 651 651 697 82 115 115 697 307 4627 4442 4288 4402 187 65 82 115 4139 697 4402
758 662 758 662 662 758 NULL 140 140 758 307 4627 4402 4215 4320 181 48 NULL 140 4084 758 4320

#fn window_frame_groups_multiple_order_columns
query IIIIIIIIIIIIIIIII
SELECT
SUM(c1) OVER (ORDER BY c2, c3 GROUPS BETWEEN 9 PRECEDING AND 11 FOLLOWING) as a,
SUM(c1) OVER (ORDER BY c2, c3 DESC GROUPS BETWEEN 9 PRECEDING AND 11 FOLLOWING) as b,
SUM(c1) OVER (ORDER BY c2, c3 NULLS first GROUPS BETWEEN 9 PRECEDING AND 11 FOLLOWING) as c,
SUM(c1) OVER (ORDER BY c2, c3 DESC NULLS last GROUPS BETWEEN 9 PRECEDING AND 11 FOLLOWING) as d,
SUM(c1) OVER (ORDER BY c2, c3 DESC NULLS first GROUPS BETWEEN 9 PRECEDING AND 11 FOLLOWING) as e,
SUM(c1) OVER (ORDER BY c2, c3 NULLS first GROUPS BETWEEN 9 PRECEDING AND 11 FOLLOWING) as f,
SUM(c1) OVER (ORDER BY c2, c3 GROUPS current row) as a1,
SUM(c1) OVER (ORDER BY c2, c3 GROUPS BETWEEN 9 PRECEDING AND 5 PRECEDING) as a2,
SUM(c1) OVER (ORDER BY c2, c3 GROUPS BETWEEN UNBOUNDED PRECEDING AND 5 PRECEDING) as a3,
SUM(c1) OVER (ORDER BY c2, c3 GROUPS BETWEEN UNBOUNDED PRECEDING AND 11 FOLLOWING) as a4,
SUM(c1) OVER (ORDER BY c2, c3 GROUPS BETWEEN UNBOUNDED PRECEDING AND current row) as a5,
SUM(c1) OVER (ORDER BY c2, c3 GROUPS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) as a6,
SUM(c1) OVER (ORDER BY c2, c3 GROUPS BETWEEN 1 PRECEDING AND UNBOUNDED FOLLOWING) as a7,
SUM(c1) OVER (ORDER BY c2, c3 GROUPS BETWEEN 3 FOLLOWING AND UNBOUNDED FOLLOWING) as a8,
SUM(c1) OVER (ORDER BY c2, c3 GROUPS BETWEEN current row AND UNBOUNDED FOLLOWING) as a9,
SUM(c1) OVER (ORDER BY c2, c3 GROUPS BETWEEN current row AND 3 FOLLOWING) as a10,
SUM(c1) OVER (ORDER BY c2, c3 GROUPS BETWEEN 5 FOLLOWING AND 7 FOLLOWING) as a11
FROM null_cases
ORDER BY c3
LIMIT 10
----
818 910 818 910 910 818 NULL 249 249 818 432 4627 4234 4157 4195 98 82
537 979 537 979 979 537 72 NULL NULL 537 210 4627 4569 4378 4489 169 55
811 838 811 838 838 811 24 221 3075 3665 3311 4627 1390 1276 1340 117 144
763 464 763 464 464 763 19 168 3572 4167 3684 4627 962 829 962 194 80
552 964 552 964 964 552 25 NULL NULL 552 235 4627 4489 4320 4417 167 39
963 930 963 930 930 963 14 201 818 1580 1098 4627 3638 3455 3543 177 224
1113 814 1113 814 814 1113 31 415 2653 3351 2885 4627 1798 1694 1773 165 162
780 868 780 868 868 780 40 258 3143 3665 3351 4627 1340 1223 1316 117 102
740 466 740 466 466 740 82 164 3592 4168 3766 4627 962 768 943 244 122
772 832 772 832 832 772 NULL 277 3189 3684 3351 4627 1316 1199 1276 119 64

#fn window_frame_groups_without_order_by
# Try executing an erroneous query (the ORDER BY clause is missing in the
# window frame):
statement error Error during planning: GROUPS mode requires an ORDER BY clause
SELECT
    SUM(c4) OVER(PARTITION BY c2 GROUPS BETWEEN 1 PRECEDING AND 1 FOLLOWING)
    FROM aggregate_test_100
    ORDER BY c9;


#fn window_frame_lag
statement error This feature is not implemented: There is only support Literal types for field at idx: 1 in Window Function
SELECT c2,
 lag(c2, c2, c2) OVER () as lag1
 FROM aggregate_test_100;


#fn window_frame_creation
statement error DataFusion error: Error during planning: Invalid window frame: start bound \(1 PRECEDING\) cannot be larger than end bound \(2 PRECEDING\)
SELECT
 COUNT(c1) OVER (ORDER BY c2 RANGE BETWEEN 1 PRECEDING AND 2 PRECEDING)
 FROM aggregate_test_100

statement error DataFusion error: Error during planning: Invalid window frame: start bound \(2 FOLLOWING\) cannot be larger than end bound \(1 FOLLOWING\)
SELECT
 COUNT(c1) OVER (ORDER BY c2 RANGE BETWEEN 2 FOLLOWING AND 1 FOLLOWING)
 FROM aggregate_test_100

statement error DataFusion error: Error during planning: GROUPS mode requires an ORDER BY clause
SELECT
 COUNT(c1) OVER(GROUPS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING)
 FROM aggregate_test_100


#fn test_window_row_number_aggregate
query III
SELECT
  c8,
  ROW_NUMBER() OVER(ORDER BY c9) AS rn1,
  ROW_NUMBER() OVER(ORDER BY c9 ROWS BETWEEN 10 PRECEDING and 1 FOLLOWING) as rn2
  FROM aggregate_test_100
  ORDER BY c8
  LIMIT 5
----
102 73 73
299 1 1
363 41 41
417 14 14
794 95 95

#fn test_window_range_equivalent_frames
query IIIIIII
SELECT
  c9,
  COUNT(*) OVER(ORDER BY c9, c1 RANGE BETWEEN CURRENT ROW AND CURRENT ROW) AS cnt1,
  COUNT(*) OVER(ORDER BY c9, c1 RANGE UNBOUNDED PRECEDING) AS cnt2,
  COUNT(*) OVER(ORDER BY c9, c1 RANGE CURRENT ROW) AS cnt3,
  COUNT(*) OVER(RANGE BETWEEN CURRENT ROW AND CURRENT ROW) AS cnt4,
  COUNT(*) OVER(RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS cnt5,
  COUNT(*) OVER(RANGE BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING) AS cnt6
  FROM aggregate_test_100
  ORDER BY c9
  LIMIT 5
----
28774375 1 1 1 100 100 100
63044568 1 2 1 100 100 100
141047417 1 3 1 100 100 100
141680161 1 4 1 100 100 100
145294611 1 5 1 100 100 100

#fn test_window_cume_dist
query IRR
SELECT
  c8,
  CUME_DIST() OVER(ORDER BY c9) as cd1,
  CUME_DIST() OVER(ORDER BY c9 ROWS BETWEEN 10 PRECEDING and 1 FOLLOWING) as cd2
  FROM aggregate_test_100
  ORDER BY c8
  LIMIT 5
----
102 0.73 0.73
299 0.01 0.01
363 0.41 0.41
417 0.14 0.14
794 0.95 0.95

#fn test_window_rank
query IIIIIRR
SELECT
  c9,
  RANK() OVER(ORDER BY c1) AS rank1,
  RANK() OVER(ORDER BY c1 ROWS BETWEEN 10 PRECEDING and 1 FOLLOWING) as rank2,
  DENSE_RANK() OVER(ORDER BY c1) as dense_rank1,
  DENSE_RANK() OVER(ORDER BY c1 ROWS BETWEEN 10 PRECEDING and 1 FOLLOWING) as dense_rank2,
  PERCENT_RANK() OVER(ORDER BY c1) as percent_rank1,
  PERCENT_RANK() OVER(ORDER BY c1 ROWS BETWEEN 10 PRECEDING and 1 FOLLOWING) as percent_rank2
  FROM aggregate_test_100
  ORDER BY c9
  LIMIT 5
----
28774375 80 80 5 5 0.79797979798 0.79797979798
63044568 62 62 4 4 0.616161616162 0.616161616162
141047417 1 1 1 1 0 0
141680161 41 41 3 3 0.40404040404 0.40404040404
145294611 1 1 1 1 0 0

#fn test_lag_lead
query IIIII
SELECT
  c9,
  LAG(c9, 2, 10101) OVER(ORDER BY c9) as lag1,
  LAG(c9, 2, 10101) OVER(ORDER BY c9 ROWS BETWEEN 10 PRECEDING and 1 FOLLOWING) as lag2,
  LEAD(c9, 2, 10101) OVER(ORDER BY c9) as lead1,
  LEAD(c9, 2, 10101) OVER(ORDER BY c9 ROWS BETWEEN 10 PRECEDING and 1 FOLLOWING) as lead2
  FROM aggregate_test_100
  ORDER BY c9
  LIMIT 5
----
28774375 10101 10101 141047417 141047417
63044568 10101 10101 141680161 141680161
141047417 28774375 28774375 145294611 145294611
141680161 63044568 63044568 225513085 225513085
145294611 141047417 141047417 243203849 243203849

#fn test_window_frame_first_value_last_value_aggregate
query IIII
SELECT
   FIRST_VALUE(c4) OVER(ORDER BY c9 ASC ROWS BETWEEN 10 PRECEDING AND 1 FOLLOWING) as first_value1,
   FIRST_VALUE(c4) OVER(ORDER BY c9 ASC ROWS BETWEEN 2 PRECEDING AND 3 FOLLOWING) as first_value2,
   LAST_VALUE(c4) OVER(ORDER BY c9 ASC ROWS BETWEEN 10 PRECEDING AND 1 FOLLOWING) as last_value1,
   LAST_VALUE(c4) OVER(ORDER BY c9 ASC ROWS BETWEEN 2 PRECEDING AND 3 FOLLOWING) as last_value2
   FROM aggregate_test_100
   ORDER BY c9
   LIMIT 5
----
-16110 -16110 3917 -1114
-16110 -16110 -16974 15673
-16110 -16110 -1114 13630
-16110 3917 15673 -13217
-16110 -16974 13630 20690

#fn test_window_frame_nth_value_aggregate
query II
SELECT
   NTH_VALUE(c4, 3) OVER(ORDER BY c9 ASC ROWS BETWEEN 2 PRECEDING AND 1 FOLLOWING) as nth_value1,
   NTH_VALUE(c4, 2) OVER(ORDER BY c9 ASC ROWS BETWEEN 1 PRECEDING AND 3 FOLLOWING) as nth_value2
   FROM aggregate_test_100
   ORDER BY c9
   LIMIT 5
----
NULL 3917
-16974 3917
-16974 -16974
-1114 -1114
15673 15673
