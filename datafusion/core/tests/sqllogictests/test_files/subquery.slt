# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at

#   http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

#############
## Subquery Tests
#############


#############
## Setup test data table
#############
# there tables for subquery
statement ok
CREATE TABLE t0(t0_id INT, t0_name TEXT, t0_int INT) AS VALUES
(11, 'o', 6),
(22, 'p', 7),
(33, 'q', 8),
(44, 'r', 9);

statement ok
CREATE TABLE t1(t1_id INT, t1_name TEXT, t1_int INT) AS VALUES
(11, 'a', 1),
(22, 'b', 2),
(33, 'c', 3),
(44, 'd', 4);

statement ok
CREATE TABLE t2(t2_id INT, t2_name TEXT, t2_int INT) AS VALUES
(11, 'z', 3),
(22, 'y', 1),
(44, 'x', 3),
(55, 'w', 3);

statement ok
CREATE EXTERNAL TABLE IF NOT EXISTS customer (
        c_custkey BIGINT,
        c_name VARCHAR,
        c_address VARCHAR,
        c_nationkey BIGINT,
        c_phone VARCHAR,
        c_acctbal DECIMAL(15, 2),
        c_mktsegment VARCHAR,
        c_comment VARCHAR,
) STORED AS CSV DELIMITER ',' WITH HEADER ROW LOCATION 'tests/tpch-csv/customer.csv';

statement ok
CREATE EXTERNAL TABLE IF NOT EXISTS orders (
        o_orderkey BIGINT,
        o_custkey BIGINT,
        o_orderstatus VARCHAR,
        o_totalprice DECIMAL(15, 2),
        o_orderdate DATE,
        o_orderpriority VARCHAR,
        o_clerk VARCHAR,
        o_shippriority INTEGER,
        o_comment VARCHAR,
) STORED AS CSV DELIMITER ',' WITH HEADER ROW LOCATION 'tests/tpch-csv/orders.csv';

statement ok
CREATE EXTERNAL TABLE IF NOT EXISTS lineitem (
        l_orderkey BIGINT,
        l_partkey BIGINT,
        l_suppkey BIGINT,
        l_linenumber INTEGER,
        l_quantity DECIMAL(15, 2),
        l_extendedprice DECIMAL(15, 2),
        l_discount DECIMAL(15, 2),
        l_tax DECIMAL(15, 2),
        l_returnflag VARCHAR,
        l_linestatus VARCHAR,
        l_shipdate DATE,
        l_commitdate DATE,
        l_receiptdate DATE,
        l_shipinstruct VARCHAR,
        l_shipmode VARCHAR,
        l_comment VARCHAR,
) STORED AS CSV DELIMITER ',' WITH HEADER ROW LOCATION 'tests/tpch-csv/lineitem.csv';

# in_subquery_to_join_with_correlated_outer_filter
query ITI rowsort
select t1.t1_id,
       t1.t1_name,
       t1.t1_int
from t1
where t1.t1_id + 12 in (
                           select t2.t2_id + 1 from t2 where t1.t1_int > 0
                       )
----
11 a 1
33 c 3
44 d 4

# not_in_subquery_to_join_with_correlated_outer_filter
query ITI rowsort
select t1.t1_id,
       t1.t1_name,
       t1.t1_int
from t1
where t1.t1_id + 12 not in (
                               select t2.t2_id + 1 from t2 where t1.t1_int > 0
                           )
----
22 b 2

# in subquery with two parentheses, see #5529
query ITI rowsort
select t1.t1_id,
       t1.t1_name,
       t1.t1_int
from t1
where t1.t1_id in ((
                       select t2.t2_id from t2
                  ))
----
11 a 1
22 b 2
44 d 4

query ITI rowsort
select t1.t1_id,
       t1.t1_name,
       t1.t1_int
from t1
where t1.t1_id in ((
                       select t2.t2_id from t2
                  ))
and t1.t1_int < 3
----
11 a 1
22 b 2

query ITI rowsort
select t1.t1_id,
       t1.t1_name,
       t1.t1_int
from t1
where t1.t1_id not in ((
                            select t2.t2_id from t2 where t2.t2_int = 3
                      ))
----
22 b 2
33 c 3

# VALUES in subqueries, see 6017
query I
select t1_id
from t1
where t1_int = (select max(i) from (values (1)) as s(i));
----
11

# aggregated_correlated_scalar_subquery
query TT
explain SELECT t1_id, (SELECT sum(t2_int) FROM t2 WHERE t2.t2_id = t1.t1_id) as t2_sum from t1
----
logical_plan
Projection: t1.t1_id, __scalar_sq_1.SUM(t2.t2_int) AS t2_sum
--Left Join: t1.t1_id = __scalar_sq_1.t2_id
----TableScan: t1 projection=[t1_id]
----SubqueryAlias: __scalar_sq_1
------Projection: SUM(t2.t2_int), t2.t2_id
--------Aggregate: groupBy=[[t2.t2_id]], aggr=[[SUM(t2.t2_int)]]
----------TableScan: t2 projection=[t2_id, t2_int]
physical_plan
ProjectionExec: expr=[t1_id@0 as t1_id, SUM(t2.t2_int)@1 as t2_sum]
--CoalesceBatchesExec: target_batch_size=8192
----HashJoinExec: mode=Partitioned, join_type=Left, on=[(t1_id@0, t2_id@1)]
------CoalesceBatchesExec: target_batch_size=8192
--------RepartitionExec: partitioning=Hash([t1_id@0], 4), input_partitions=4
----------MemoryExec: partitions=4, partition_sizes=[1, 0, 0, 0]
------ProjectionExec: expr=[SUM(t2.t2_int)@1 as SUM(t2.t2_int), t2_id@0 as t2_id]
--------AggregateExec: mode=FinalPartitioned, gby=[t2_id@0 as t2_id], aggr=[SUM(t2.t2_int)]
----------CoalesceBatchesExec: target_batch_size=8192
------------RepartitionExec: partitioning=Hash([t2_id@0], 4), input_partitions=4
--------------AggregateExec: mode=Partial, gby=[t2_id@0 as t2_id], aggr=[SUM(t2.t2_int)]
----------------MemoryExec: partitions=4, partition_sizes=[1, 0, 0, 0]

query II rowsort
SELECT t1_id, (SELECT sum(t2_int) FROM t2 WHERE t2.t2_id = t1.t1_id) as t2_sum from t1
----
11 3
22 1
33 NULL
44 3

# aggregated_correlated_scalar_subquery_with_cast
query TT
explain SELECT t1_id, (SELECT sum(t2_int * 1.0) + 1 FROM t2 WHERE t2.t2_id = t1.t1_id) as t2_sum from t1
----
logical_plan
Projection: t1.t1_id, __scalar_sq_1.SUM(t2.t2_int * Float64(1)) + Int64(1) AS t2_sum
--Left Join: t1.t1_id = __scalar_sq_1.t2_id
----TableScan: t1 projection=[t1_id]
----SubqueryAlias: __scalar_sq_1
------Projection: SUM(t2.t2_int * Float64(1)) + Float64(1) AS SUM(t2.t2_int * Float64(1)) + Int64(1), t2.t2_id
--------Aggregate: groupBy=[[t2.t2_id]], aggr=[[SUM(CAST(t2.t2_int AS Float64)) AS SUM(t2.t2_int * Float64(1))]]
----------TableScan: t2 projection=[t2_id, t2_int]
physical_plan
ProjectionExec: expr=[t1_id@0 as t1_id, SUM(t2.t2_int * Float64(1)) + Int64(1)@1 as t2_sum]
--CoalesceBatchesExec: target_batch_size=8192
----HashJoinExec: mode=Partitioned, join_type=Left, on=[(t1_id@0, t2_id@1)]
------CoalesceBatchesExec: target_batch_size=8192
--------RepartitionExec: partitioning=Hash([t1_id@0], 4), input_partitions=4
----------MemoryExec: partitions=4, partition_sizes=[1, 0, 0, 0]
------ProjectionExec: expr=[SUM(t2.t2_int * Float64(1))@1 + 1 as SUM(t2.t2_int * Float64(1)) + Int64(1), t2_id@0 as t2_id]
--------AggregateExec: mode=FinalPartitioned, gby=[t2_id@0 as t2_id], aggr=[SUM(t2.t2_int * Float64(1))]
----------CoalesceBatchesExec: target_batch_size=8192
------------RepartitionExec: partitioning=Hash([t2_id@0], 4), input_partitions=4
--------------AggregateExec: mode=Partial, gby=[t2_id@0 as t2_id], aggr=[SUM(t2.t2_int * Float64(1))]
----------------MemoryExec: partitions=4, partition_sizes=[1, 0, 0, 0]

query IR rowsort
SELECT t1_id, (SELECT sum(t2_int * 1.0) + 1 FROM t2 WHERE t2.t2_id = t1.t1_id) as t2_sum from t1
----
11 4
22 2
33 NULL
44 4

# aggregated_correlated_scalar_subquery_with_extra_group_by_constant
query TT
explain SELECT t1_id, (SELECT sum(t2_int) FROM t2 WHERE t2.t2_id = t1.t1_id group by t2_id, 'a') as t2_sum from t1
----
logical_plan
Projection: t1.t1_id, __scalar_sq_1.SUM(t2.t2_int) AS t2_sum
--Left Join: t1.t1_id = __scalar_sq_1.t2_id
----TableScan: t1 projection=[t1_id]
----SubqueryAlias: __scalar_sq_1
------Projection: SUM(t2.t2_int), t2.t2_id
--------Aggregate: groupBy=[[t2.t2_id, Utf8("a")]], aggr=[[SUM(t2.t2_int)]]
----------TableScan: t2 projection=[t2_id, t2_int]
physical_plan
ProjectionExec: expr=[t1_id@0 as t1_id, SUM(t2.t2_int)@1 as t2_sum]
--CoalesceBatchesExec: target_batch_size=8192
----HashJoinExec: mode=Partitioned, join_type=Left, on=[(t1_id@0, t2_id@1)]
------CoalesceBatchesExec: target_batch_size=8192
--------RepartitionExec: partitioning=Hash([t1_id@0], 4), input_partitions=4
----------MemoryExec: partitions=4, partition_sizes=[1, 0, 0, 0]
------CoalesceBatchesExec: target_batch_size=8192
--------RepartitionExec: partitioning=Hash([t2_id@1], 4), input_partitions=4
----------ProjectionExec: expr=[SUM(t2.t2_int)@2 as SUM(t2.t2_int), t2_id@0 as t2_id]
------------AggregateExec: mode=FinalPartitioned, gby=[t2_id@0 as t2_id, Utf8("a")@1 as Utf8("a")], aggr=[SUM(t2.t2_int)]
--------------CoalesceBatchesExec: target_batch_size=8192
----------------RepartitionExec: partitioning=Hash([t2_id@0, Utf8("a")@1], 4), input_partitions=4
------------------AggregateExec: mode=Partial, gby=[t2_id@0 as t2_id, a as Utf8("a")], aggr=[SUM(t2.t2_int)]
--------------------MemoryExec: partitions=4, partition_sizes=[1, 0, 0, 0]

query II rowsort
SELECT t1_id, (SELECT sum(t2_int) FROM t2 WHERE t2.t2_id = t1.t1_id group by t2_id, 'a') as t2_sum from t1
----
11 3
22 1
33 NULL
44 3

# aggregated_correlated_scalar_subquery_with_having
query TT
explain SELECT t1_id, (SELECT sum(t2_int) FROM t2 WHERE t2.t2_id = t1.t1_id having sum(t2_int) < 3) as t2_sum from t1
----
logical_plan
Projection: t1.t1_id, __scalar_sq_1.SUM(t2.t2_int) AS t2_sum
--Left Join: t1.t1_id = __scalar_sq_1.t2_id
----TableScan: t1 projection=[t1_id]
----SubqueryAlias: __scalar_sq_1
------Projection: SUM(t2.t2_int), t2.t2_id
--------Filter: SUM(t2.t2_int) < Int64(3)
----------Aggregate: groupBy=[[t2.t2_id]], aggr=[[SUM(t2.t2_int)]]
------------TableScan: t2 projection=[t2_id, t2_int]
physical_plan
ProjectionExec: expr=[t1_id@0 as t1_id, SUM(t2.t2_int)@1 as t2_sum]
--CoalesceBatchesExec: target_batch_size=8192
----HashJoinExec: mode=Partitioned, join_type=Left, on=[(t1_id@0, t2_id@1)]
------CoalesceBatchesExec: target_batch_size=8192
--------RepartitionExec: partitioning=Hash([t1_id@0], 4), input_partitions=4
----------MemoryExec: partitions=4, partition_sizes=[1, 0, 0, 0]
------ProjectionExec: expr=[SUM(t2.t2_int)@1 as SUM(t2.t2_int), t2_id@0 as t2_id]
--------CoalesceBatchesExec: target_batch_size=8192
----------FilterExec: SUM(t2.t2_int)@1 < 3
------------AggregateExec: mode=FinalPartitioned, gby=[t2_id@0 as t2_id], aggr=[SUM(t2.t2_int)]
--------------CoalesceBatchesExec: target_batch_size=8192
----------------RepartitionExec: partitioning=Hash([t2_id@0], 4), input_partitions=4
------------------AggregateExec: mode=Partial, gby=[t2_id@0 as t2_id], aggr=[SUM(t2.t2_int)]
--------------------MemoryExec: partitions=4, partition_sizes=[1, 0, 0, 0]

query II rowsort
SELECT t1_id, (SELECT sum(t2_int) FROM t2 WHERE t2.t2_id = t1.t1_id having sum(t2_int) < 3) as t2_sum from t1
----
11 NULL
22 1
33 NULL
44 NULL


statement ok
set datafusion.explain.logical_plan_only = true;

# correlated_recursive_scalar_subquery
query TT
explain select c_custkey from customer
where c_acctbal < (
    select sum(o_totalprice) from orders
    where o_custkey = c_custkey
    and o_totalprice < (
            select sum(l_extendedprice) as price from lineitem where l_orderkey = o_orderkey
    )
) order by c_custkey;
----
logical_plan
Sort: customer.c_custkey ASC NULLS LAST
--Projection: customer.c_custkey
----Inner Join: customer.c_custkey = __scalar_sq_1.o_custkey Filter: CAST(customer.c_acctbal AS Decimal128(25, 2)) < __scalar_sq_1.SUM(orders.o_totalprice)
------TableScan: customer projection=[c_custkey, c_acctbal]
------SubqueryAlias: __scalar_sq_1
--------Projection: SUM(orders.o_totalprice), orders.o_custkey
----------Aggregate: groupBy=[[orders.o_custkey]], aggr=[[SUM(orders.o_totalprice)]]
------------Projection: orders.o_custkey, orders.o_totalprice
--------------Inner Join: orders.o_orderkey = __scalar_sq_2.l_orderkey Filter: CAST(orders.o_totalprice AS Decimal128(25, 2)) < __scalar_sq_2.price
----------------TableScan: orders projection=[o_orderkey, o_custkey, o_totalprice]
----------------SubqueryAlias: __scalar_sq_2
------------------Projection: SUM(lineitem.l_extendedprice) AS price, lineitem.l_orderkey
--------------------Aggregate: groupBy=[[lineitem.l_orderkey]], aggr=[[SUM(lineitem.l_extendedprice)]]
----------------------TableScan: lineitem projection=[l_orderkey, l_extendedprice]

# correlated_where_in
query TT
explain select o_orderkey from orders
where o_orderstatus in (
    select l_linestatus from lineitem where l_orderkey = orders.o_orderkey
);
----
logical_plan
Projection: orders.o_orderkey
--LeftSemi Join: orders.o_orderstatus = __correlated_sq_1.l_linestatus, orders.o_orderkey = __correlated_sq_1.l_orderkey
----TableScan: orders projection=[o_orderkey, o_orderstatus]
----SubqueryAlias: __correlated_sq_1
------Projection: lineitem.l_linestatus, lineitem.l_orderkey
--------TableScan: lineitem projection=[l_orderkey, l_linestatus]

query I rowsort
select o_orderkey from orders
where o_orderstatus in (
    select l_linestatus from lineitem where l_orderkey = orders.o_orderkey
);
----
2
3

#exists_subquery_with_same_table
#Subquery and outer query refer to the same table.
#It will not be rewritten to join because it is not a correlated subquery.
query TT
explain SELECT t1_id, t1_name, t1_int FROM t1 WHERE EXISTS(SELECT t1_int FROM t1 WHERE t1.t1_id > t1.t1_int)
----
logical_plan
Filter: EXISTS (<subquery>)
--Subquery:
----Projection: t1.t1_int
------Filter: t1.t1_id > t1.t1_int
--------TableScan: t1
--TableScan: t1 projection=[t1_id, t1_name, t1_int]


#in_subquery_with_same_table
#Subquery and outer query refer to the same table.
#It will be rewritten to join because in-subquery has extra predicate(`t1.t1_id = __correlated_sq_10.t1_int`).
query TT
explain SELECT t1_id, t1_name, t1_int FROM t1 WHERE t1_id IN(SELECT t1_int FROM t1 WHERE t1.t1_id > t1.t1_int)
----
logical_plan
LeftSemi Join: t1.t1_id = __correlated_sq_1.t1_int
--TableScan: t1 projection=[t1_id, t1_name, t1_int]
--SubqueryAlias: __correlated_sq_1
----Projection: t1.t1_int
------Filter: t1.t1_id > t1.t1_int
--------TableScan: t1 projection=[t1_id, t1_int]

#in_subquery_nested_exist_subquery
query TT
explain SELECT t1_id, t1_name, t1_int FROM t1 WHERE t1_id IN(SELECT t2_id FROM t2 WHERE EXISTS(select * from t1 WHERE t1.t1_int > t2.t2_int))
----
logical_plan
LeftSemi Join: t1.t1_id = __correlated_sq_1.t2_id
--TableScan: t1 projection=[t1_id, t1_name, t1_int]
--SubqueryAlias: __correlated_sq_1
----Projection: t2.t2_id
------LeftSemi Join:  Filter: __correlated_sq_2.t1_int > t2.t2_int
--------TableScan: t2 projection=[t2_id, t2_int]
--------SubqueryAlias: __correlated_sq_2
----------TableScan: t1 projection=[t1_int]

#invalid_scalar_subquery
statement error DataFusion error: check_analyzed_plan\ncaused by\nError during planning: Scalar subquery should only return one column, but found 2: t2.t2_id, t2.t2_name
SELECT t1_id, t1_name, t1_int, (select t2_id, t2_name FROM t2 WHERE t2.t2_id = t1.t1_int) FROM t1

#subquery_not_allowed
#In/Exist Subquery is not allowed in ORDER BY clause.
statement error DataFusion error: check_analyzed_plan\ncaused by\nError during planning: In/Exist subquery can only be used in Projection, Filter, Window functions, Aggregate and Join plan nodes
SELECT t1_id, t1_name, t1_int FROM t1 order by t1_int in (SELECT t2_int FROM t2 WHERE t1.t1_id > t1.t1_int)

#non_aggregated_correlated_scalar_subquery
statement error DataFusion error: check_analyzed_plan\ncaused by\nError during planning: Correlated scalar subquery must be aggregated to return at most one row
SELECT t1_id, (SELECT t2_int FROM t2 WHERE t2.t2_int = t1.t1_int) as t2_int from t1

statement error DataFusion error: check_analyzed_plan\ncaused by\nError during planning: Correlated scalar subquery must be aggregated to return at most one row
SELECT t1_id, (SELECT t2_int FROM t2 WHERE t2.t2_int = t1_int group by t2_int) as t2_int from t1

#non_aggregated_correlated_scalar_subquery_with_limit
statement error DataFusion error: check_analyzed_plan\ncaused by\nError during planning: Correlated scalar subquery must be aggregated to return at most one row
SELECT t1_id, (SELECT t2_int FROM t2 WHERE t2.t2_int = t1.t1_int limit 2) as t2_int from t1

#non_aggregated_correlated_scalar_subquery_with_single_row
query TT
explain SELECT t1_id, (SELECT t2_int FROM t2 WHERE t2.t2_int = t1.t1_int limit 1) as t2_int from t1
----
logical_plan
Projection: t1.t1_id, (<subquery>) AS t2_int
--Subquery:
----Limit: skip=0, fetch=1
------Projection: t2.t2_int
--------Filter: t2.t2_int = outer_ref(t1.t1_int)
----------TableScan: t2
--TableScan: t1 projection=[t1_id]

query TT
explain SELECT t1_id from t1 where t1_int = (SELECT t2_int FROM t2 WHERE t2.t2_int = t1.t1_int limit 1)
----
logical_plan
Projection: t1.t1_id
--Filter: t1.t1_int = (<subquery>)
----Subquery:
------Limit: skip=0, fetch=1
--------Projection: t2.t2_int
----------Filter: t2.t2_int = outer_ref(t1.t1_int)
------------TableScan: t2
----TableScan: t1 projection=[t1_id, t1_int]

query TT
explain SELECT t1_id, (SELECT a FROM (select 1 as a) WHERE a = t1.t1_int) as t2_int from t1
----
logical_plan
Projection: t1.t1_id, __scalar_sq_1.a AS t2_int
--Left Join: CAST(t1.t1_int AS Int64) = __scalar_sq_1.a
----TableScan: t1 projection=[t1_id, t1_int]
----SubqueryAlias: __scalar_sq_1
------Projection: Int64(1) AS a
--------EmptyRelation

query II rowsort
SELECT t1_id, (SELECT a FROM (select 1 as a) WHERE a = t1.t1_int) as t2_int from t1
----
11 1
22 NULL
33 NULL
44 NULL

#non_equal_correlated_scalar_subquery
statement error DataFusion error: check_analyzed_plan\ncaused by\nError during planning: Correlated column is not allowed in predicate: t2\.t2_id < outer_ref\(t1\.t1_id\)
SELECT t1_id, (SELECT sum(t2_int) FROM t2 WHERE t2.t2_id < t1.t1_id) as t2_sum from t1

#aggregated_correlated_scalar_subquery_with_extra_group_by_columns
statement error DataFusion error: check_analyzed_plan\ncaused by\nError during planning: A GROUP BY clause in a scalar correlated subquery cannot contain non-correlated columns
SELECT t1_id, (SELECT sum(t2_int) FROM t2 WHERE t2.t2_id = t1.t1_id group by t2_name) as t2_sum from t1

#support_agg_correlated_columns
query TT
explain SELECT t1_id, t1_name FROM t1 WHERE EXISTS (SELECT sum(t1.t1_int + t2.t2_id) FROM t2 WHERE t1.t1_name = t2.t2_name)
----
logical_plan
Filter: EXISTS (<subquery>)
--Subquery:
----Projection: SUM(outer_ref(t1.t1_int) + t2.t2_id)
------Aggregate: groupBy=[[]], aggr=[[SUM(outer_ref(t1.t1_int) + t2.t2_id)]]
--------Filter: outer_ref(t1.t1_name) = t2.t2_name
----------TableScan: t2
--TableScan: t1 projection=[t1_id, t1_name]

#support_agg_correlated_columns2
query TT
explain SELECT t1_id, t1_name FROM t1 WHERE EXISTS (SELECT count(*) FROM t2 WHERE t1.t1_name = t2.t2_name having sum(t1_int + t2_id) >0)
----
logical_plan
Filter: EXISTS (<subquery>)
--Subquery:
----Projection: COUNT(UInt8(1))
------Filter: SUM(outer_ref(t1.t1_int) + t2.t2_id) > Int64(0)
--------Aggregate: groupBy=[[]], aggr=[[COUNT(UInt8(1)), SUM(outer_ref(t1.t1_int) + t2.t2_id)]]
----------Filter: outer_ref(t1.t1_name) = t2.t2_name
------------TableScan: t2
--TableScan: t1 projection=[t1_id, t1_name]

#support_join_correlated_columns
query TT
explain SELECT t0_id, t0_name FROM t0 WHERE EXISTS (SELECT 1 FROM t1 INNER JOIN t2 ON(t1.t1_id = t2.t2_id and t1.t1_name = t0.t0_name))
----
logical_plan
Filter: EXISTS (<subquery>)
--Subquery:
----Projection: Int64(1)
------Inner Join:  Filter: t1.t1_id = t2.t2_id AND t1.t1_name = outer_ref(t0.t0_name)
--------TableScan: t1
--------TableScan: t2
--TableScan: t0 projection=[t0_id, t0_name]

#subquery_contains_join_contains_correlated_columns
query TT
explain SELECT t0_id, t0_name FROM t0 WHERE EXISTS (SELECT 1 FROM t1 INNER JOIN (select * from t2 where t2.t2_name = t0.t0_name) as t2 ON(t1.t1_id = t2.t2_id ))
----
logical_plan
LeftSemi Join: t0.t0_name = __correlated_sq_1.t2_name
--TableScan: t0 projection=[t0_id, t0_name]
--SubqueryAlias: __correlated_sq_1
----Projection: t2.t2_name
------Inner Join: t1.t1_id = t2.t2_id
--------TableScan: t1 projection=[t1_id]
--------SubqueryAlias: t2
----------TableScan: t2 projection=[t2_id, t2_name]

#subquery_contains_join_contains_sub_query_alias_correlated_columns
query TT
explain SELECT t0_id, t0_name FROM t0 WHERE EXISTS (select 1 from (SELECT * FROM t1 where t1.t1_id = t0.t0_id) as x INNER JOIN (select * from t2 where t2.t2_name = t0.t0_name) as y ON(x.t1_id = y.t2_id))
----
logical_plan
LeftSemi Join: t0.t0_id = __correlated_sq_1.t1_id, t0.t0_name = __correlated_sq_1.t2_name
--TableScan: t0 projection=[t0_id, t0_name]
--SubqueryAlias: __correlated_sq_1
----Projection: x.t1_id, y.t2_name
------Inner Join: x.t1_id = y.t2_id
--------SubqueryAlias: x
----------TableScan: t1 projection=[t1_id]
--------SubqueryAlias: y
----------TableScan: t2 projection=[t2_id, t2_name]

#support_order_by_correlated_columns
query TT
explain SELECT t1_id, t1_name FROM t1 WHERE EXISTS (SELECT * FROM t2 WHERE t2_id >= t1_id order by t1_id)
----
logical_plan
Filter: EXISTS (<subquery>)
--Subquery:
----Sort: outer_ref(t1.t1_id) ASC NULLS LAST
------Projection: t2.t2_id, t2.t2_name, t2.t2_int
--------Filter: t2.t2_id >= outer_ref(t1.t1_id)
----------TableScan: t2
--TableScan: t1 projection=[t1_id, t1_name]

#exists_subquery_with_select_null
query TT
explain SELECT t1_id, t1_name FROM t1 WHERE EXISTS (SELECT NULL)
----
logical_plan
Filter: EXISTS (<subquery>)
--Subquery:
----Projection: NULL
------EmptyRelation
--TableScan: t1 projection=[t1_id, t1_name]

#exists_subquery_with_limit
#de-correlated, limit is removed
query TT
explain SELECT t1_id, t1_name FROM t1 WHERE EXISTS (SELECT * FROM t2 WHERE t2_id = t1_id limit 1)
----
logical_plan
LeftSemi Join: t1.t1_id = __correlated_sq_1.t2_id
--TableScan: t1 projection=[t1_id, t1_name]
--SubqueryAlias: __correlated_sq_1
----TableScan: t2 projection=[t2_id]

query IT rowsort
SELECT t1_id, t1_name FROM t1 WHERE EXISTS (SELECT * FROM t2 WHERE t2_id = t1_id limit 1)
----
11 a
22 b
44 d

#exists_subquery_with_limit0
#de-correlated, limit is removed and replaced with EmptyRelation
query TT
explain SELECT t1_id, t1_name FROM t1 WHERE EXISTS (SELECT * FROM t2 WHERE t2_id = t1_id limit 0)
----
logical_plan
LeftSemi Join: t1.t1_id = __correlated_sq_1.t2_id
--TableScan: t1 projection=[t1_id, t1_name]
--EmptyRelation

query IT rowsort
SELECT t1_id, t1_name FROM t1 WHERE EXISTS (SELECT * FROM t2 WHERE t2_id = t1_id limit 0)
----


#not_exists_subquery_with_limit0
#de-correlated, limit is removed and replaced with EmptyRelation
query TT
explain SELECT t1_id, t1_name FROM t1 WHERE NOT EXISTS (SELECT * FROM t2 WHERE t2_id = t1_id limit 0)
----
logical_plan
LeftAnti Join: t1.t1_id = __correlated_sq_1.t2_id
--TableScan: t1 projection=[t1_id, t1_name]
--EmptyRelation

query IT rowsort
SELECT t1_id, t1_name FROM t1 WHERE NOT EXISTS (SELECT * FROM t2 WHERE t2_id = t1_id limit 0)
----
11 a
22 b
33 c
44 d

#in_correlated_subquery_with_limit
#not de-correlated
query TT
explain SELECT t1_id, t1_name FROM t1 WHERE t1_id in (SELECT t2_id FROM t2 where t1_name = t2_name limit 10)
----
logical_plan
Filter: t1.t1_id IN (<subquery>)
--Subquery:
----Limit: skip=0, fetch=10
------Projection: t2.t2_id
--------Filter: outer_ref(t1.t1_name) = t2.t2_name
----------TableScan: t2
--TableScan: t1 projection=[t1_id, t1_name]

#in_non_correlated_subquery_with_limit
#de-correlated, limit is kept
query TT
explain SELECT t1_id, t1_name FROM t1 WHERE t1_id in (SELECT t2_id FROM t2 limit 10)
----
logical_plan
LeftSemi Join: t1.t1_id = __correlated_sq_1.t2_id
--TableScan: t1 projection=[t1_id, t1_name]
--SubqueryAlias: __correlated_sq_1
----Limit: skip=0, fetch=10
------TableScan: t2 projection=[t2_id], fetch=10


#uncorrelated_scalar_subquery_with_limit0
query TT
explain SELECT t1_id, (SELECT t2_id FROM t2 limit 0) FROM t1
----
logical_plan
Projection: t1.t1_id, __scalar_sq_1.t2_id AS t2_id
--Left Join: 
----TableScan: t1 projection=[t1_id]
----EmptyRelation

query II rowsort
SELECT t1_id, (SELECT t2_id FROM t2 limit 0) FROM t1
----
11 NULL
22 NULL
33 NULL
44 NULL

#support_union_subquery
query TT
explain SELECT t1_id, t1_name FROM t1 WHERE EXISTS (SELECT * FROM t2 WHERE t2_id = t1_id UNION ALL SELECT * FROM t2 WHERE upper(t2_name) = upper(t1.t1_name))
----
logical_plan
Filter: EXISTS (<subquery>)
--Subquery:
----Union
------Projection: t2.t2_id, t2.t2_name, t2.t2_int
--------Filter: t2.t2_id = outer_ref(t1.t1_id)
----------TableScan: t2
------Projection: t2.t2_id, t2.t2_name, t2.t2_int
--------Filter: upper(t2.t2_name) = upper(outer_ref(t1.t1_name))
----------TableScan: t2
--TableScan: t1 projection=[t1_id, t1_name]

#simple_uncorrelated_scalar_subquery
query TT
explain select (select count(*) from t1) as b
----
logical_plan
Projection: __scalar_sq_1.COUNT(UInt8(1)) AS b
--SubqueryAlias: __scalar_sq_1
----Aggregate: groupBy=[[]], aggr=[[COUNT(UInt8(1))]]
------TableScan: t1 projection=[t1_id]

#simple_uncorrelated_scalar_subquery2
query TT
explain select (select count(*) from t1) as b, (select count(1) from t2)
----
logical_plan
Projection: __scalar_sq_1.COUNT(UInt8(1)) AS b, __scalar_sq_2.COUNT(Int64(1)) AS COUNT(Int64(1))
--Left Join: 
----SubqueryAlias: __scalar_sq_1
------Aggregate: groupBy=[[]], aggr=[[COUNT(UInt8(1))]]
--------TableScan: t1 projection=[t1_id]
----SubqueryAlias: __scalar_sq_2
------Aggregate: groupBy=[[]], aggr=[[COUNT(Int64(1))]]
--------TableScan: t2 projection=[t2_id]

query II
select (select count(*) from t1) as b, (select count(1) from t2)
----
4 4

#correlated_scalar_subquery_count_agg
query TT
explain SELECT t1_id, (SELECT count(*) FROM t2 WHERE t2.t2_int = t1.t1_int) from t1
----
logical_plan
Projection: t1.t1_id, CASE WHEN __scalar_sq_1.__always_true IS NULL THEN Int64(0) ELSE __scalar_sq_1.COUNT(UInt8(1)) END AS COUNT(UInt8(1))
--Left Join: t1.t1_int = __scalar_sq_1.t2_int
----TableScan: t1 projection=[t1_id, t1_int]
----SubqueryAlias: __scalar_sq_1
------Projection: COUNT(UInt8(1)), t2.t2_int, __always_true
--------Aggregate: groupBy=[[t2.t2_int, Boolean(true) AS __always_true]], aggr=[[COUNT(UInt8(1))]]
----------TableScan: t2 projection=[t2_int]

query II rowsort
SELECT t1_id, (SELECT count(*) FROM t2 WHERE t2.t2_int = t1.t1_int) from t1
----
11 1
22 0
33 3
44 0


#correlated_scalar_subquery_count_agg2
query TT
explain SELECT t1_id, (SELECT count(*) FROM t2 WHERE t2.t2_int = t1.t1_int) as cnt from t1
----
logical_plan
Projection: t1.t1_id, CASE WHEN __scalar_sq_1.__always_true IS NULL THEN Int64(0) ELSE __scalar_sq_1.COUNT(UInt8(1)) END AS cnt
--Left Join: t1.t1_int = __scalar_sq_1.t2_int
----TableScan: t1 projection=[t1_id, t1_int]
----SubqueryAlias: __scalar_sq_1
------Projection: COUNT(UInt8(1)), t2.t2_int, __always_true
--------Aggregate: groupBy=[[t2.t2_int, Boolean(true) AS __always_true]], aggr=[[COUNT(UInt8(1))]]
----------TableScan: t2 projection=[t2_int]

query II rowsort
SELECT t1_id, (SELECT count(*) FROM t2 WHERE t2.t2_int = t1.t1_int) as cnt from t1
----
11 1
22 0
33 3
44 0

#correlated_scalar_subquery_count_agg_with_alias
query TT
explain SELECT t1_id, (SELECT count(*) as _cnt FROM t2 WHERE t2.t2_int = t1.t1_int) as cnt from t1
----
logical_plan
Projection: t1.t1_id, CASE WHEN __scalar_sq_1.__always_true IS NULL THEN Int64(0) AS _cnt ELSE __scalar_sq_1._cnt END AS cnt
--Left Join: t1.t1_int = __scalar_sq_1.t2_int
----TableScan: t1 projection=[t1_id, t1_int]
----SubqueryAlias: __scalar_sq_1
------Projection: COUNT(UInt8(1)) AS _cnt, t2.t2_int, __always_true
--------Aggregate: groupBy=[[t2.t2_int, Boolean(true) AS __always_true]], aggr=[[COUNT(UInt8(1))]]
----------TableScan: t2 projection=[t2_int]

query II rowsort
SELECT t1_id, (SELECT count(*) as _cnt FROM t2 WHERE t2.t2_int = t1.t1_int) as cnt from t1
----
11 1
22 0
33 3
44 0

#correlated_scalar_subquery_count_agg_complex_expr
query TT
explain SELECT t1_id, (SELECT count(*) + 2 as _cnt FROM t2 WHERE t2.t2_int = t1.t1_int) from t1
----
logical_plan
Projection: t1.t1_id, CASE WHEN __scalar_sq_1.__always_true IS NULL THEN Int64(2) AS _cnt ELSE __scalar_sq_1._cnt END AS _cnt
--Left Join: t1.t1_int = __scalar_sq_1.t2_int
----TableScan: t1 projection=[t1_id, t1_int]
----SubqueryAlias: __scalar_sq_1
------Projection: COUNT(UInt8(1)) + Int64(2) AS _cnt, t2.t2_int, __always_true
--------Aggregate: groupBy=[[t2.t2_int, Boolean(true) AS __always_true]], aggr=[[COUNT(UInt8(1))]]
----------TableScan: t2 projection=[t2_int]

query II rowsort
SELECT t1_id, (SELECT count(*) + 2 as _cnt FROM t2 WHERE t2.t2_int = t1.t1_int) from t1
----
11 3
22 2
33 5
44 2

#correlated_scalar_subquery_count_agg_where_clause
query TT
explain select t1.t1_int from t1 where (select count(*) from t2 where t1.t1_id = t2.t2_id) < t1.t1_int
----
logical_plan
Projection: t1.t1_int
--Filter: CASE WHEN __scalar_sq_1.__always_true IS NULL THEN Int64(0) ELSE __scalar_sq_1.COUNT(UInt8(1)) END < CAST(t1.t1_int AS Int64)
----Projection: t1.t1_int, __scalar_sq_1.COUNT(UInt8(1)), __scalar_sq_1.__always_true
------Left Join: t1.t1_id = __scalar_sq_1.t2_id
--------TableScan: t1 projection=[t1_id, t1_int]
--------SubqueryAlias: __scalar_sq_1
----------Projection: COUNT(UInt8(1)), t2.t2_id, __always_true
------------Aggregate: groupBy=[[t2.t2_id, Boolean(true) AS __always_true]], aggr=[[COUNT(UInt8(1))]]
--------------TableScan: t2 projection=[t2_id]

query I rowsort
select t1.t1_int from t1 where (select count(*) from t2 where t1.t1_id = t2.t2_id) < t1.t1_int
----
2
3
4

#correlated_scalar_subquery_count_agg_with_having
#the having condition is kept as the normal filter condition, no need to pull up
query TT
explain SELECT t1_id, (SELECT count(*) + 2 as cnt_plus_2 FROM t2 WHERE t2.t2_int = t1.t1_int having count(*) >1) from t1
----
logical_plan
Projection: t1.t1_id, __scalar_sq_1.cnt_plus_2 AS cnt_plus_2
--Left Join: t1.t1_int = __scalar_sq_1.t2_int
----TableScan: t1 projection=[t1_id, t1_int]
----SubqueryAlias: __scalar_sq_1
------Projection: COUNT(UInt8(1)) + Int64(2) AS cnt_plus_2, t2.t2_int
--------Filter: COUNT(UInt8(1)) > Int64(1)
----------Projection: t2.t2_int, COUNT(UInt8(1))
------------Aggregate: groupBy=[[t2.t2_int, Boolean(true) AS __always_true]], aggr=[[COUNT(UInt8(1))]]
--------------TableScan: t2 projection=[t2_int]

query II rowsort
SELECT t1_id, (SELECT count(*) + 2 as cnt_plus_2 FROM t2 WHERE t2.t2_int = t1.t1_int having count(*) >1) from t1
----
11 NULL
22 NULL
33 5
44 NULL

#correlated_scalar_subquery_count_agg_with_pull_up_having
#the having condition need to pull up and evaluated after the left out join
query TT
explain SELECT t1_id, (SELECT count(*) + 2 as cnt_plus_2 FROM t2 WHERE t2.t2_int = t1.t1_int having count(*) = 0) from t1
----
logical_plan
Projection: t1.t1_id, CASE WHEN __scalar_sq_1.__always_true IS NULL THEN Int64(2) AS cnt_plus_2 WHEN __scalar_sq_1.COUNT(UInt8(1)) != Int64(0) THEN NULL ELSE __scalar_sq_1.cnt_plus_2 END AS cnt_plus_2
--Left Join: t1.t1_int = __scalar_sq_1.t2_int
----TableScan: t1 projection=[t1_id, t1_int]
----SubqueryAlias: __scalar_sq_1
------Projection: COUNT(UInt8(1)) + Int64(2) AS cnt_plus_2, t2.t2_int, COUNT(UInt8(1)), __always_true
--------Aggregate: groupBy=[[t2.t2_int, Boolean(true) AS __always_true]], aggr=[[COUNT(UInt8(1))]]
----------TableScan: t2 projection=[t2_int]

query II rowsort
SELECT t1_id, (SELECT count(*) + 2 as cnt_plus_2 FROM t2 WHERE t2.t2_int = t1.t1_int having count(*) = 0) from t1
----
11 NULL
22 2
33 NULL
44 2

#correlated_scalar_subquery_count_agg_in_having
query TT
explain select t1.t1_int from t1 group by t1.t1_int having (select count(*) from t2 where t1.t1_int = t2.t2_int) = 0
----
logical_plan
Projection: t1.t1_int
--Filter: CASE WHEN __scalar_sq_1.__always_true IS NULL THEN Int64(0) ELSE __scalar_sq_1.COUNT(UInt8(1)) END = Int64(0)
----Projection: t1.t1_int, __scalar_sq_1.COUNT(UInt8(1)), __scalar_sq_1.__always_true
------Left Join: t1.t1_int = __scalar_sq_1.t2_int
--------Aggregate: groupBy=[[t1.t1_int]], aggr=[[]]
----------TableScan: t1 projection=[t1_int]
--------SubqueryAlias: __scalar_sq_1
----------Projection: COUNT(UInt8(1)), t2.t2_int, __always_true
------------Aggregate: groupBy=[[t2.t2_int, Boolean(true) AS __always_true]], aggr=[[COUNT(UInt8(1))]]
--------------TableScan: t2 projection=[t2_int]

query I rowsort
select t1.t1_int from t1 group by t1.t1_int having (select count(*) from t2 where t1.t1_int = t2.t2_int) = 0
----
2
4

#correlated_scalar_subquery_count_agg_in_nested_projection
query TT
explain select t1.t1_int from t1 where (select cnt from (select count(*) as cnt, sum(t2_int) from t2 where t1.t1_int = t2.t2_int)) = 0
----
logical_plan
Projection: t1.t1_int
--Filter: CASE WHEN __scalar_sq_1.__always_true IS NULL THEN Int64(0) ELSE __scalar_sq_1.cnt END = Int64(0)
----Projection: t1.t1_int, __scalar_sq_1.cnt, __scalar_sq_1.__always_true
------Left Join: t1.t1_int = __scalar_sq_1.t2_int
--------TableScan: t1 projection=[t1_int]
--------SubqueryAlias: __scalar_sq_1
----------Projection: COUNT(UInt8(1)) AS cnt, t2.t2_int, __always_true
------------Aggregate: groupBy=[[t2.t2_int, Boolean(true) AS __always_true]], aggr=[[COUNT(UInt8(1))]]
--------------TableScan: t2 projection=[t2_int]


query I rowsort
select t1.t1_int from t1 where (select cnt from (select count(*) as cnt, sum(t2_int) from t2 where t1.t1_int = t2.t2_int)) = 0
----
2
4

#correlated_scalar_subquery_count_agg_in_nested_subquery
#pull up the deeply nested having condition
query TT
explain
select t1.t1_int from t1 where (
    select cnt_plus_one + 1 as cnt_plus_two from (
        select cnt + 1 as cnt_plus_one from (
            select count(*) as cnt, sum(t2_int) s from t2 where t1.t1_int = t2.t2_int having cnt = 0
        )
    )
) = 2
----
logical_plan
Projection: t1.t1_int
--Filter: CASE WHEN __scalar_sq_1.__always_true IS NULL THEN Int64(2) WHEN __scalar_sq_1.COUNT(UInt8(1)) != Int64(0) THEN NULL ELSE __scalar_sq_1.cnt_plus_two END = Int64(2)
----Projection: t1.t1_int, __scalar_sq_1.cnt_plus_two, __scalar_sq_1.COUNT(UInt8(1)), __scalar_sq_1.__always_true
------Left Join: t1.t1_int = __scalar_sq_1.t2_int
--------TableScan: t1 projection=[t1_int]
--------SubqueryAlias: __scalar_sq_1
----------Projection: COUNT(UInt8(1)) + Int64(1) + Int64(1) AS cnt_plus_two, t2.t2_int, COUNT(UInt8(1)), __always_true
------------Aggregate: groupBy=[[t2.t2_int, Boolean(true) AS __always_true]], aggr=[[COUNT(UInt8(1))]]
--------------TableScan: t2 projection=[t2_int]

query I rowsort
select t1.t1_int from t1 where (
    select cnt_plus_one + 1 as cnt_plus_two from (
        select cnt + 1 as cnt_plus_one from (
            select count(*) as cnt, sum(t2_int) s from t2 where t1.t1_int = t2.t2_int having cnt = 0
        )
    )
) = 2
----
2
4

#correlated_scalar_subquery_count_agg_in_case_when
query TT
explain
select t1.t1_int from t1 where
       (select case when count(*) = 1 then null else count(*) end as cnt from t2 where t2.t2_int = t1.t1_int) = 0
----
logical_plan
Projection: t1.t1_int
--Filter: CASE WHEN __scalar_sq_1.__always_true IS NULL THEN Int64(0) ELSE __scalar_sq_1.cnt END = Int64(0)
----Projection: t1.t1_int, __scalar_sq_1.cnt, __scalar_sq_1.__always_true
------Left Join: t1.t1_int = __scalar_sq_1.t2_int
--------TableScan: t1 projection=[t1_int]
--------SubqueryAlias: __scalar_sq_1
----------Projection: CASE WHEN COUNT(UInt8(1)) = Int64(1) THEN Int64(NULL) ELSE COUNT(UInt8(1)) END AS cnt, t2.t2_int, __always_true
------------Aggregate: groupBy=[[t2.t2_int, Boolean(true) AS __always_true]], aggr=[[COUNT(UInt8(1))]]
--------------TableScan: t2 projection=[t2_int]


query I rowsort
select t1.t1_int from t1 where
       (select case when count(*) = 1 then null else count(*) end as cnt from t2 where t2.t2_int = t1.t1_int) = 0
----
2
4

query B rowsort
select t1_int > (select avg(t1_int) from t1) from t1
----
false
false
true
true
