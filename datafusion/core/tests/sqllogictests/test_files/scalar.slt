# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at

#   http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

#############
## Scalar Function Tests
#############

statement ok
CREATE TABLE t1(
  a INT,
  b INT,
  c INT,
  d INT
) as VALUES
  (1, 100, 567, 1024),
  (2, 1000, 123, 256),
  (3, 10000, 978, 2048)
;

# abs scalar function
query RRR rowsort
select abs(64), abs(0), abs(-64);
----
64 0 64

# abs scalar nulls
query R rowsort
select abs(null);
----
NULL

# acos scalar function
query RRR rowsort
select acos(0), acos(0.5), acos(1);
----
1.570796326795 1.047197551197 0

# acos scalar nulls
query R rowsort
select acos(null);
----
NULL

# acosh scalar function
# cosh(x) = (exp(x) + exp(-x)) / 2
query RRR rowsort
select acosh((exp(1) + exp(-1)) / 2), acosh((exp(2) + exp(-2)) / 2), acosh((exp(3) + exp(-3)) / 2);
----
1 2 3

# acosh scalar nulls
query R rowsort
select acosh(null);
----
NULL

# asin scalar function
query RRR rowsort
select asin(0), asin(0.5), asin(1);
----
0 0.523598775598 1.570796326795

# asin scalar nulls
query R rowsort
select asin(null);
----
NULL

# asinh scalar function
# sinh(x) = (exp(x) - exp(-x)) / 2
query RRR rowsort
select asinh((exp(1) - exp(-1)) / 2), asinh((exp(2) - exp(-2)) / 2), asinh((exp(3) - exp(-3)) / 2);
----
1 2 3

# asinh scalar nulls
query R rowsort
select asinh(null);
----
NULL

# atan scalar function
query RRR rowsort
select atan(0), atan(cbrt(3)), atan(1);
----
0 0.964539792856 0.785398163397

# atan scalar nulls
query R rowsort
select atan(null);
----
NULL

# atanh scalar function
# tanh(x) = (exp(2x) - 1) / (exp(2x) + 1)
query RRR rowsort
select atanh((exp(2) - 1) / (exp(2) + 1)), atanh((exp(4) - 1) / (exp(4) + 1)), atanh((exp(6) - 1) / (exp(6) + 1));
----
1 2 3

# atanh scalar nulls
query R rowsort
select atanh(null);
----
NULL

# atan2 scalar function
query RRR rowsort
select atan2(0, 1), atan2(1, 2), atan2(2, 2);
----
0 0.4636476 0.7853982

# atan2 scalar nulls
query R rowsort
select atan2(null, 64);
----
NULL

# atan2 scalar nulls 1
query R rowsort
select atan2(2, null);
----
NULL

# atan2 scalar nulls 2
query R rowsort
select atan2(null, null);
----
NULL

# cbrt scalar function
query RRR rowsort
select cbrt(0), cbrt(8), cbrt(27);
----
0 2 3

# cbrt scalar nulls
query R rowsort
select cbrt(null);
----
NULL

# ceil scalar function
query RRR rowsort
select ceil(1.6), ceil(1.5), ceil(1.4);
----
2 2 2

# ceil scalar nulls
query R rowsort
select ceil(null);
----
NULL

# degrees scalar function
query RRR rowsort
select degrees(0), degrees(pi() / 2), degrees(pi());
----
0 90 180

# degrees scalar nulls
query R rowsort
select degrees(null);
----
NULL

# cos scalar function
query RRR rowsort
select cos(0), cos(pi() / 3), cos(pi() / 2);
----
1 0.5 0

# cos scalar nulls
query R rowsort
select cos(null);
----
NULL

# cosh scalar function
# cosh(x) = (exp(x) + exp(-x)) / 2
query RRR rowsort
select cosh(1), cosh(2), cosh(3);
----
1.543080634815 3.762195691084 10.067661995778

# cosh scalar nulls
query R rowsort
select cosh(null);
----
NULL

# exp scalar function
query RRR rowsort
select exp(0), exp(1), exp(2);
----
1 2.718281828459 7.389056098931

# exp scalar nulls
query R rowsort
select exp(null);
----
NULL

# factorial scalar function
query III rowsort
select factorial(0), factorial(10), factorial(15);
----
1 3628800 1307674368000

# factorial scalar nulls
query I rowsort
select factorial(null);
----
NULL

# floor scalar function
query RRR rowsort
select floor(1.4), floor(1.5), floor(1.6);
----
1 1 1

# floor scalar nulls
query R rowsort
select floor(null);
----
NULL

# gcd scalar function
query III rowsort
select gcd(0, 0), gcd(2, 3), gcd(15, 10);
----
0 1 5

# gcd scalar nulls
query I rowsort
select gcd(null, 64);
----
NULL

# gcd scalar nulls 1
query I rowsort
select gcd(2, null);
----
NULL

# gcd scalar nulls 2
query I rowsort
select gcd(null, null);
----
NULL

# lcm scalar function
query III rowsort
select lcm(0, 0), lcm(2, 3), lcm(15, 10);
----
0 6 30

# lcm scalar nulls
query I rowsort
select lcm(null, 64);
----
NULL

# lcm scalar nulls 1
query I rowsort
select lcm(2, null);
----
NULL

# lcm scalar nulls 2
query I rowsort
select lcm(null, null);
----
NULL

# ln scalar function
query RRR rowsort
select ln(1), ln(exp(1)), ln(3);
----
0 1 1.098612288668

# ln scalar nulls
query R rowsort
select ln(null);
----
NULL

# ln scalar ops with zero edgecases
# please see https://github.com/apache/arrow-datafusion/pull/5245#issuecomment-1426828382
query R rowsort
select ln(0);
----
-Infinity

# log scalar function
query RR rowsort
select log(2, 64) a, log(100) b union all select log(2, 8), log(10);
----
3 1
6 2

# log scalar function
query RRR rowsort
select log(a, 64) a, log(b), log(10, b) from t1;
----
3.7855785 4 4
6 3 3
Infinity 2 2

# log scalar nulls
query RR rowsort
select log(null, 64) a, log(null) b;
----
NULL NULL

# log scalar nulls 1
query RR rowsort
select log(2, null) a, log(null) b;
----
NULL NULL

# log scalar nulls 2
query RR rowsort
select log(null, null) a, log(null) b;
----
NULL NULL

# log scalar ops with zero edgecases
# please see https://github.com/apache/arrow-datafusion/pull/5245#issuecomment-1426828382
query RR rowsort
select log(0) a, log(1, 64) b;
----
-Infinity Infinity

# log10 scalar function
query RRR rowsort
select log10(1), log10(10), log10(100);
----
0 1 2

# log10 scalar nulls
query R rowsort
select log10(null);
----
NULL

# log10 scalar ops with zero edgecases
# please see https://github.com/apache/arrow-datafusion/pull/5245#issuecomment-1426828382
query R rowsort
select log10(0);
----
-Infinity

# log2 scalar function
query RRR rowsort
select log2(1), log2(2), log2(4);
----
0 1 2

# log2 scalar nulls
query R rowsort
select log2(null);
----
NULL

# log2 scalar ops with zero edgecases
# please see https://github.com/apache/arrow-datafusion/pull/5245#issuecomment-1426828382
query R rowsort
select log2(0);
----
-Infinity

# pi scalar function
query RRR rowsort
select pi(), pi() / 2, pi() / 3;
----
3.14159265359 1.570796326795 1.047197551197

# power scalar function
query III rowsort
select power(2, 0), power(2, 1), power(2, 2);
----
1 2 4

# power scalar nulls
query R rowsort
select power(null, 64);
----
NULL

# power scalar nulls 1
query I rowsort
select power(2, null);
----
NULL

# power scalar nulls 2
query R rowsort
select power(null, null);
----
NULL

# radians scalar function
query RRR rowsort
select radians(0), radians(90), radians(180);
----
0 1.570796326795 3.14159265359

# radians scalar nulls
query R rowsort
select radians(null);
----
NULL

# round scalar function
query RRR rowsort
select round(1.4), round(1.5), round(1.6);
----
1 2 2

# round scalar nulls
query R rowsort
select round(null);
----
NULL

# signum scalar function
query RRR rowsort
select signum(-2), signum(0), signum(2);
----
-1 1 1

# signum scalar nulls
query R rowsort
select signum(null);
----
NULL

# sin scalar function
query RRR rowsort
select sin(0), sin(pi() / 3), sin(pi() / 2);
----
0 0.866025403784 1

# sin scalar nulls
query R rowsort
select sin(null);
----
NULL

# sinh scalar function
# sinh(x) = (exp(x) - exp(-x)) / 2
query RRR rowsort
select sinh(1), sinh(2), sinh(3);
----
1.175201193644 3.626860407847 10.01787492741

# sinh scalar nulls
query R rowsort
select sinh(null);
----
NULL

# sqrt scalar function
query RRR rowsort
select sqrt(0), sqrt(4), sqrt(9);
----
0 2 3

# sqrt scalar nulls
query R rowsort
select sqrt(null);
----
NULL

# tan scalar function
query RRR rowsort
select tan(0), tan(pi() / 6), tan(pi() / 4);
----
0 0.57735026919 1

# tan scalar nulls
query R rowsort
select tan(null);
----
NULL

# tanh scalar function
# tanh(x) = (exp(2x) - 1) / (exp(2x) + 1)
query RRR rowsort
select tanh(1), tanh(2), tanh(3);
----
0.761594155956 0.964027580076 0.995054753687

# tanh scalar nulls
query R rowsort
select tanh(null);
----
NULL

# trunc scalar function
query RRR rowsort
select trunc(1.5), trunc(2.71), trunc(3.1415);
----
1 2 3

# trunc scalar nulls
query R rowsort
select trunc(null);
----
NULL

# bitwise and with column and scalar
query I rowsort
select c & 856 from t1;
----
528
848
88

# bitwise or with column and scalar
query I rowsort
select c | 856 from t1;
----
891
895
986

# bitwise xor with column and scalar
query I rowsort
select c ^ 856 from t1;
----
138
367
803

# right shift with column and scalar
query I rowsort
select d >> 2 from t1;
----
256
512
64

# left shift with column and scalar
query I rowsort
select d << 2 from t1;
----
1024
4096
8192

statement ok
drop table t1


statement ok
create table t1(c1 varchar) as values ('a'), ('b'), ('c'), (null);

# case_when()
query I
SELECT
CASE WHEN c1 = 'a' THEN 1
 WHEN c1 = 'b' THEN 2
 END
FROM t1
----
1
2
NULL
NULL

# case_when_else()
query I
SELECT
CASE WHEN c1 = 'a' THEN 1
 WHEN c1 = 'b' THEN 2
 ELSE 999 END
FROM t1
----
1
2
999
999

# case_when_with_base_expr()
query I
SELECT
CASE c1 WHEN 'a' THEN 1
 WHEN 'b' THEN 2
 END
FROM t1
----
1
2
NULL
NULL

# case_when_else_with_base_expr()
query I
SELECT
CASE c1 WHEN 'a' THEN 1
 WHEN 'b' THEN 2
 ELSE 999 END
FROM t1
----
1
2
999
999

# case_when_else_with_null_contant()
query I
 SELECT
CASE WHEN c1 = 'a' THEN 1
 WHEN NULL THEN 2
 ELSE 999 END
FROM t1
----
1
999
999
999

statement ok
drop table t1


query T
SELECT CASE WHEN NULL THEN 'foo' ELSE 'bar' END
----
bar

# case_expr_with_null()
query ?
select case when b is null then null else b end from (select a,b from (values (1,null),(2,3)) as t (a,b)) a;
----
NULL
3

query ?
select case when b is null then null else b end from (select a,b from (values (1,1),(2,3)) as t (a,b)) a;
----
1
3

# case_expr_with_nulls()
query ?
select case when b is null then null when b < 3 then null when b >=3 then b + 1 else b end from (select a,b from (values (1,null),(1,2),(2,3)) as t (a,b)) a
----
NULL
NULL
4

query ?
select case b when 1 then null when 2 then null when 3 then b + 1 else b end from (select a,b from (values (1,null),(1,2),(2,3)) as t (a,b)) a;
----
NULL
NULL
4

# issue: https://github.com/apache/arrow-datafusion/issues/6376
query I
select case when a = 0 then 123 end from (values(1), (0), (null)) as t(a);
----
NULL
123
NULL

# csv_query_sum_cast() {

statement ok
CREATE EXTERNAL TABLE aggregate_test_100 (
  c1  VARCHAR NOT NULL,
  c2  TINYINT NOT NULL,
  c3  SMALLINT NOT NULL,
  c4  SMALLINT,
  c5  INT,
  c6  BIGINT NOT NULL,
  c7  SMALLINT NOT NULL,
  c8  INT NOT NULL,
  c9  BIGINT UNSIGNED NOT NULL,
  c10 VARCHAR NOT NULL,
  c11 FLOAT NOT NULL,
  c12 DOUBLE NOT NULL,
  c13 VARCHAR NOT NULL
)
STORED AS CSV
WITH HEADER ROW
LOCATION '../../testing/data/csv/aggregate_test_100.csv'

# c8 = i32; c6 = i64
query TTT
SELECT arrow_typeof(c8), arrow_typeof(c6), arrow_typeof(c8 + c6) FROM aggregate_test_100 limit 1;
----
Int32 Int64 Int64

# in list array
query BBBBB rowsort
SELECT c1 IN ('a', 'c') AS utf8_in_true
      ,c1 IN ('x', 'y') AS utf8_in_false
      ,c1 NOT IN ('x', 'y') AS utf8_not_in_true
      ,c1 NOT IN ('a', 'c') AS utf8_not_in_false
      ,NULL IN ('a', 'c') AS utf8_in_null
FROM aggregate_test_100 WHERE c12 < 0.05
----
false false true true NULL
false false true true NULL
false false true true NULL
false false true true NULL
true false true false NULL
true false true false NULL
true false true false NULL

# csv count star
query III
SELECT COUNT(*), COUNT(1) AS c, COUNT(c1) FROM aggregate_test_100
----
100 100 100

# csv query sqrt sqrt
query R
SELECT sqrt(sqrt(c12)) FROM aggregate_test_100 LIMIT 1
----
0.98186505614

# csv query cbrt cbrt
query R
SELECT cbrt(cbrt(c12)) FROM aggregate_test_100 LIMIT 1
----
0.991899036678

# csv query cast
query R rowsort
SELECT CAST(c12 AS float) FROM aggregate_test_100 WHERE c12 > 0.376 AND c12 < 0.4
----
0.3887028
0.39144436

# csv query cast literal
query RR rowsort
SELECT c12, CAST(1 AS float) FROM aggregate_test_100 WHERE c12 > CAST(0 AS float) LIMIT 2
----
0.311471253986 1
0.929409733247 1

statement ok
drop table aggregate_test_100

statement ok
create table test_boolean(c1 boolean) as values (false), (null), (true);

statement ok
create table test_int32(c1 int) as values (0), (1), (null), (3);

## Note that test_float has a NaN (which is not possible to create in SQL) so it is registered via rust.

# query_not()

query B
SELECT NOT c1 FROM test_boolean
----
true
NULL
false


# query_is_null()

# Note the last value is NaN (not NULL)
query R
SELECT c1 from test_float;
----
1
NULL
NaN


query B
SELECT c1 IS NULL FROM test_float
----
false
true
false

# query_is_not_null()
query B
SELECT c1 IS NOT NULL FROM test_float
----
true
false
true


# query_is_true()
query B
SELECT c1 IS TRUE as t FROM test_boolean
----
false
false
true

# query_is_false()
query B
SELECT c1 IS FALSE as f FROM test_boolean
----
true
false
false

# query_is_not_true()

query B
SELECT c1 IS NOT TRUE as nt FROM test_boolean
----
true
true
false

# query_is_not_false()
query B
SELECT c1 IS NOT FALSE as nf FROM test_boolean
----
false
true
true


# query_is_unknown()
query B
SELECT c1 IS UNKNOWN as t FROM test_boolean
----
false
true
false

# query_is_not_unknown()
query B
SELECT c1 IS NOT UNKNOWN as t FROM test_boolean
----
true
false
true


# query_without_from()

query I
SELECT 1
----
1

query IIR
SELECT 1+2, 3/4, cos(0)
----
3 0 1


# query_scalar_minus_array()
query I
SELECT 4 - c1 FROM test_int32
----
4
3
NULL
1

# test_string_concat_operator()
# concat 2 strings
query T
SELECT 'aa' || 'b'
----
aab

# concat 4 strings as a string concat pipe.
query T
SELECT 'aa' || 'b' || 'cc' || 'd'
----
aabccd

# concat 2 strings and NULL, output should be NULL
query T
SELECT 'aa' || NULL || 'd'
----
NULL

# concat 1 strings and 2 numeric
query T
SELECT 'a' || 42 || 23.3
----
a4223.3

# test_not_expressions()

query BB
SELECT not(true), not(false)
----
false true

query error DataFusion error: Optimizer rule 'simplify_expressions' failed\ncaused by\nInternal error: NOT 'Literal \{ value: Int64\(1\) \}' can't be evaluated because the expression's type is Int64, not boolean or NULL\. This was likely caused by a bug in DataFusion's code and we would welcome that you file an bug report in our issue tracker
SELECT not(1), not(0)

query ?B
SELECT null, not(null)
----
NULL NULL

query error DataFusion error: Optimizer rule 'simplify_expressions' failed\ncaused by\nInternal error: NOT 'Literal \{ value: Utf8\("hi"\) \}' can't be evaluated because the expression's type is Utf8, not boolean or NULL\. This was likely caused by a bug in DataFusion's code and we would welcome that you file an bug report in our issue tracker
SELECT NOT('hi')

# test_negative_expressions()

query ??
SELECT null, -null
----
NULL NULL

statement ok
drop table test_boolean

statement ok
drop table test_int32

# scientific notation (0s)
query RRRR
SELECT 0e0 AS c1, 0.e-0 AS c2, -.0e+0 AS c3, 00.00e-00 AS c4
----
0 0 0 0

# scientific notation (integer)
query RRRR
SELECT -1e-1, 0e100, 10E-2, 1E+0;
----
-0.1 0 0.1 1

# scientific notation (decimal)
query RRRR
SELECT -1.5e-1, 00.0e1, 150.0E-3, 0.015E+2;
----
-0.15 0 0.15 1.5

# scientific notation (integer or decimal part only)
query RRRR
SELECT -2.e-1, 0.e0, .0002E+3, .02E+2;
----
-0.2 0 0.2 2

# scientific notation (overflows)
# FLOAT64 range: -1.79E+308 to -2.22E-308, or from 2.22E-308 to 1.79E+308
query RRRR
SELECT -1.79e309, -2.22e-309, 2.22E-309, 1.79E+309;
----
-Infinity 0 0 Infinity

# scientific notation (other edgecases)
query IRRR
SELECT 1ea, 1e-2a, 1E-2-2, 1E-1e2;
----
1 0.01 -1.99 0.1

# case with bool type result
query B
SELECT CASE WHEN 'cpu' != 'cpu' THEN true ELSE false END
----
false

statement ok
CREATE TABLE t1(
  a boolean,
  b boolean,
) as VALUES
  (true, true),
  (true, null),
  (true, false),
  (null, true),
  (null, null),
  (null, false),
  (false, true),
  (false, null),
  (false, null)
;

# csv query boolean eq neq
query BBBBBB rowsort
SELECT a, b, a = b as eq, b = true as eq_scalar, a != b as neq, a != true as neq_scalar FROM t1
----
NULL NULL NULL NULL NULL NULL
NULL false NULL false NULL NULL
NULL true NULL true NULL NULL
false NULL NULL NULL NULL true
false NULL NULL NULL NULL true
false true false true true true
true NULL NULL NULL NULL false
true false false false true false
true true true true false false

# csv query boolean lt lt eq
query BBBBBB rowsort
SELECT a, b, a < b as lt, b = true as lt_scalar, a <= b as lt_eq, a <= true as lt_eq_scalar FROM t1
----
NULL NULL NULL NULL NULL NULL
NULL false NULL false NULL NULL
NULL true NULL true NULL NULL
false NULL NULL NULL NULL true
false NULL NULL NULL NULL true
false true true true true true
true NULL NULL NULL NULL true
true false false false false true
true true false true true true

# csv query boolean gt gt eq
query BBBBBB rowsort
SELECT a, b, a > b as gt, b = true as gt_scalar, a >= b as gt_eq, a >= true as gt_eq_scalar FROM t1
---- 
----
NULL NULL NULL NULL NULL NULL
NULL false NULL false NULL NULL
NULL true NULL true NULL NULL
false NULL NULL NULL NULL false
false NULL NULL NULL NULL false
false true false true false false
true NULL NULL NULL NULL true
true false true false true true
true true false true true true

# csv query boolean distinct from
query BBBBBB rowsort
SELECT a, b,
      a is distinct from b as df, 
      b is distinct from true as df_scalar, 
      a is not distinct from b as ndf, 
      a is not distinct from true as ndf_scalar 
FROM t1
----
NULL NULL false true true false
NULL false true true false false
NULL true true false false false
false NULL true true false false
false NULL true true false false
false true true false false false
true NULL true true false true
true false true true false true
true true false false true true

statement ok
drop table t1

# like nlike with null lt
query BB rowsort
SELECT column1 like NULL as col_null, NULL like column1 as null_col from (values('a'), ('b'), (NULL)) as t
----
NULL NULL
NULL NULL
NULL NULL

query BB rowsort
SELECT column1 not like NULL as col_null, NULL not like column1 as null_col from (values('a'), ('b'), (NULL)) as t
----
NULL NULL
NULL NULL
NULL NULL

statement ok
CREATE TABLE test(
  c1 VARCHAR,
  c2 INT
) as VALUES
('',0),
('a',1),
('aa',NULL),
('aaa',3);

# query concat
query T rowsort
SELECT concat(c1, '-hi-', cast(c2 as varchar)) FROM test
----
-hi-0
a-hi-1
aa-hi-
aaa-hi-3

# query array
query ? rowsort
SELECT make_array(c1, cast(c2 as varchar)) FROM test
----
[, 0]
[a, 1]
[aa, ]
[aaa, 3]

statement ok
drop table test

# query array scalar
query ?
SELECT make_array(1, 2, 3);
----
[1, 2, 3]

# coalesce static empty value
query T
SELECT COALESCE('', 'test')
----
(empty)

# coalesce static value with null
query T
SELECT COALESCE(NULL, 'test')
----
test

statement ok
CREATE TABLE test(
  c1 INT,
  c2 INT
) as VALUES
(0, 1),
(NULL, 1),
(1, 0),
(NULL, 1),
(NULL, NULL);

# coalesce result
query I rowsort
SELECT COALESCE(c1, c2) FROM test
----
0
1
1
1
NULL

# coalesce result with default value
query T rowsort
SELECT COALESCE(c1, c2, '-1') FROM test
----
-1
0
1
1
1

statement ok
drop table test

statement ok
CREATE TABLE test(
  c1 INT,
  c2 INT
) as VALUES
(1, 2),
(NULL, 2),
(1, NULL),
(NULL, NULL);

# coalesce sum with default value
query I
SELECT SUM(COALESCE(c1, c2, 0)) FROM test
----
4

# coalesce mul with default value
query I
SELECT COALESCE(c1 * c2, 0) FROM test
----
2
0
0
0

statement ok
drop table test

statement ok
CREATE TABLE test(
  i32 INT,
  i64 INT,
  f32 FLOAT,
  f64 FLOAT
) as VALUES
(2, 2, 1.0, 1.0),
(5, 5, 2.5, 2.5),
(0, 0, 0.0, 0.0),
(-14, -14, -14.5, -14.5),
(NULL, NULL, NULL, NULL);

query RRRRIR rowsort
SELECT power(i32, exp_i) as power_i32,
       power(i64, exp_f) as power_i64,
       pow(f32, exp_i) as power_f32,
       power(f64, exp_f) as power_f64,
       pow(2, 3) as power_int_scalar,
       power(2.5, 3.0) as power_float_scalar
FROM (select test.*, 3 as exp_i, 3.0 as exp_f from test) a
----
-2744 -2744 -3048.625 -3048.625 8 15.625
0 0 0 0 8 15.625
125 125 15.625 15.625 8 15.625
8 8 1 1 8 15.625
NULL NULL NULL NULL 8 15.625

statement ok
drop table test

# error message for wrong function signature (Variadic: arbitrary number of args all from some common types)
statement error Error during planning: No function matches the given name and argument types 'concat\(\)'. You might need to add explicit type casts.\n\tCandidate functions:\n\tconcat\(Utf8, ..\)
SELECT concat();

# error message for wrong function signature (Uniform: t args all from some common types)
statement error Error during planning: No function matches the given name and argument types 'nullif\(Int64\)'. You might need to add explicit type casts.\n\tCandidate functions:\n\tnullif\(Boolean/UInt8/UInt16/UInt32/UInt64/Int8/Int16/Int32/Int64/Float32/Float64/Utf8/LargeUtf8, Boolean/UInt8/UInt16/UInt32/UInt64/Int8/Int16/Int32/Int64/Float32/Float64/Utf8/LargeUtf8\)
SELECT nullif(1);

# error message for wrong function signature (Exact: exact number of args of an exact type)
statement error Error during planning: No function matches the given name and argument types 'pi\(Float64\)'. You might need to add explicit type casts.\n\tCandidate functions:\n\tpi\(\)
SELECT pi(3.14);

# error message for wrong function signature (Any: fixed number of args of arbitrary types)
statement error Error during planning: No function matches the given name and argument types 'arrow_typeof\(Int64, Int64\)'. You might need to add explicit type casts.\n\tCandidate functions:\n\tarrow_typeof\(Any\)
SELECT arrow_typeof(1, 1);

# error message for wrong function signature (OneOf: fixed number of args of arbitrary types)
statement error Error during planning: No function matches the given name and argument types 'power\(Int64, Int64, Int64\)'. You might need to add explicit type casts.\n\tCandidate functions:\n\tpower\(Int64, Int64\)\n\tpower\(Float64, Float64\)
SELECT power(1, 2, 3);

# turn off enable_ident_normalization
statement ok
set datafusion.sql_parser.enable_ident_normalization = false;

query I
SELECT LENGTH('str');
----
3

query T
SELECT CONCAT('Hello', 'World')
----
HelloWorld

# turn on enable_ident_normalization
statement ok
set datafusion.sql_parser.enable_ident_normalization = true;

query I
SELECT LENGTH('str');
----
3

query T
SELECT CONCAT('Hello', 'World')
----
HelloWorld
