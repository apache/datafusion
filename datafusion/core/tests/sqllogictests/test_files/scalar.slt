# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at

#   http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

#############
## Scalar Function Tests
#############

statement ok
CREATE TABLE t1(
  a INT,
  b INT,
  c INT,
  d INT
) as VALUES
  (1, 100, 567, 1024), 
  (2, 1000, 123, 256), 
  (3, 10000, 978, 2048)
;

# pi scalar function
query RRR rowsort
select pi(), pi() / 2, pi() / 3;
----
3.14159265359 1.570796326795 1.047197551197

# log scalar function
query RR rowsort
select log(2, 64) a, log(100) b union all select log(2, 8), log(10);
----
3 1
6 2

# log scalar function
query RRR rowsort
select log(a, 64) a, log(b), log(10, b) from t1;
----
3.7855785 4 4
6 3 3
Infinity 2 2

# log scalar nulls
query RR rowsort
select log(null, 64) a, log(null) b
----
NULL NULL

# log scalar nulls 1
query RR rowsort
select log(2, null) a, log(null) b
----
NULL NULL

# log scalar nulls 2
query RR rowsort
select log(null, null) a, log(null) b
----
NULL NULL

# log scalar ops with zero edgecases
# please see https://github.com/apache/arrow-datafusion/pull/5245#issuecomment-1426828382
query RR rowsort
select log(0) a, log(1, 64) b
----
-Infinity Infinity

# bitwise and with column and scalar
query I rowsort
select c & 856 from t1;
----
528
848
88

# bitwise or with column and scalar
query I rowsort
select c | 856 from t1;
----
891
895
986

# bitwise xor with column and scalar
query I rowsort
select c ^ 856 from t1;
----
138
367
803

# right shift with column and scalar
query I rowsort
select d >> 2 from t1;
----
256
512
64

# left shift with column and scalar
query I rowsort
select d << 2 from t1;
----
1024
4096
8192
