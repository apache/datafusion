{"run_id":"1748873147-503907000","line":571,"new":{"module_name":"core_integration__dataframe","snapshot_name":"aggregate_with_pk","metadata":{"source":"datafusion/core/tests/dataframe/mod.rs","assertion_line":571,"expression":"physical_plan_to_string(&df).await"},"snapshot":"AggregateExec: mode=Single, gby=[id@0 as id, name@1 as name], aggr=[]\n  YieldStreamExec child=DataSourceExec\n    DataSourceExec: partitions=1, partition_sizes=[1]"},"old":{"module_name":"core_integration__dataframe","metadata":{},"snapshot":"AggregateExec: mode=Single, gby=[id@0 as id, name@1 as name], aggr=[]\n  DataSourceExec: partitions=1, partition_sizes=[1]"}}
{"run_id":"1748873175-977737000","line":571,"new":null,"old":null}
{"run_id":"1748873175-977737000","line":582,"new":null,"old":null}
{"run_id":"1748873250-690022000","line":4557,"new":null,"old":null}
{"run_id":"1748873250-690022000","line":5490,"new":null,"old":null}
{"run_id":"1748873250-690022000","line":2022,"new":null,"old":null}
{"run_id":"1748873250-690022000","line":511,"new":null,"old":null}
{"run_id":"1748873250-690022000","line":1920,"new":null,"old":null}
{"run_id":"1748873250-690022000","line":5509,"new":null,"old":null}
{"run_id":"1748873250-690022000","line":5548,"new":null,"old":null}
{"run_id":"1748873250-690022000","line":5561,"new":null,"old":null}
{"run_id":"1748873250-690022000","line":5417,"new":null,"old":null}
{"run_id":"1748873250-690022000","line":2029,"new":null,"old":null}
{"run_id":"1748873250-690022000","line":5435,"new":null,"old":null}
{"run_id":"1748873250-690022000","line":480,"new":null,"old":null}
{"run_id":"1748873250-690022000","line":448,"new":null,"old":null}
{"run_id":"1748873250-690022000","line":5450,"new":null,"old":null}
{"run_id":"1748873250-690022000","line":3221,"new":null,"old":null}
{"run_id":"1748873250-690022000","line":3203,"new":null,"old":null}
{"run_id":"1748873250-690022000","line":3266,"new":null,"old":null}
{"run_id":"1748873250-690022000","line":1197,"new":null,"old":null}
{"run_id":"1748873250-690022000","line":1243,"new":null,"old":null}
{"run_id":"1748873250-690022000","line":1170,"new":null,"old":null}
{"run_id":"1748873250-690022000","line":3506,"new":null,"old":null}
{"run_id":"1748873250-690022000","line":1219,"new":null,"old":null}
{"run_id":"1748873250-690022000","line":1224,"new":null,"old":null}
{"run_id":"1748873250-690022000","line":3517,"new":null,"old":null}
{"run_id":"1748873250-690022000","line":3598,"new":null,"old":null}
{"run_id":"1748873250-690022000","line":3239,"new":null,"old":null}
{"run_id":"1748873250-690022000","line":3551,"new":null,"old":null}
{"run_id":"1748873250-690022000","line":3610,"new":null,"old":null}
{"run_id":"1748873250-690022000","line":342,"new":null,"old":null}
{"run_id":"1748873250-690022000","line":2310,"new":null,"old":null}
{"run_id":"1748873250-690022000","line":3302,"new":null,"old":null}
{"run_id":"1748873250-690022000","line":3564,"new":null,"old":null}
{"run_id":"1748873250-690022000","line":3167,"new":null,"old":null}
{"run_id":"1748873250-690022000","line":3185,"new":null,"old":null}
{"run_id":"1748873250-690022000","line":5334,"new":null,"old":null}
{"run_id":"1748873250-690022000","line":874,"new":null,"old":null}
{"run_id":"1748873250-690022000","line":3080,"new":null,"old":null}
{"run_id":"1748873250-690022000","line":5352,"new":null,"old":null}
{"run_id":"1748873250-690022000","line":571,"new":null,"old":null}
{"run_id":"1748873250-690022000","line":3127,"new":null,"old":null}
{"run_id":"1748873250-690022000","line":582,"new":null,"old":null}
{"run_id":"1748873250-690022000","line":5367,"new":null,"old":null}
{"run_id":"1748873250-690022000","line":613,"new":null,"old":null}
{"run_id":"1748873250-690022000","line":5647,"new":null,"old":null}
{"run_id":"1748873250-690022000","line":663,"new":null,"old":null}
{"run_id":"1748873250-690022000","line":5658,"new":null,"old":null}
{"run_id":"1748873250-690022000","line":715,"new":null,"old":null}
{"run_id":"1748873250-690022000","line":5720,"new":null,"old":null}
{"run_id":"1748873250-690022000","line":678,"new":null,"old":null}
{"run_id":"1748873250-690022000","line":628,"new":null,"old":null}
{"run_id":"1748873250-690022000","line":728,"new":null,"old":null}
{"run_id":"1748873250-690022000","line":5725,"new":null,"old":null}
{"run_id":"1748873250-690022000","line":5755,"new":null,"old":null}
{"run_id":"1748873250-690022000","line":5767,"new":null,"old":null}
{"run_id":"1748873250-690022000","line":5696,"new":null,"old":null}
{"run_id":"1748873250-690022000","line":5783,"new":null,"old":null}
{"run_id":"1748873250-690022000","line":4878,"new":null,"old":null}
{"run_id":"1748873250-690022000","line":756,"new":null,"old":null}
{"run_id":"1748873250-690022000","line":1389,"new":null,"old":null}
{"run_id":"1748873250-690022000","line":1405,"new":null,"old":null}
{"run_id":"1748873250-690022000","line":839,"new":null,"old":null}
{"run_id":"1748873250-690022000","line":2716,"new":null,"old":null}
{"run_id":"1748873250-690022000","line":4973,"new":null,"old":null}
{"run_id":"1748873250-690022000","line":2635,"new":null,"old":null}
{"run_id":"1748873250-690022000","line":5042,"new":null,"old":null}
{"run_id":"1748873250-690022000","line":4985,"new":null,"old":null}
{"run_id":"1748873250-690022000","line":5003,"new":null,"old":null}
{"run_id":"1748873250-690022000","line":5055,"new":null,"old":null}
{"run_id":"1748873250-690022000","line":5075,"new":null,"old":null}
{"run_id":"1748873250-690022000","line":5011,"new":null,"old":null}
{"run_id":"1748873250-690022000","line":2755,"new":null,"old":null}
{"run_id":"1748873250-690022000","line":5084,"new":null,"old":null}
{"run_id":"1748873250-690022000","line":2857,"new":null,"old":null}
{"run_id":"1748873250-690022000","line":4909,"new":null,"old":null}
{"run_id":"1748873250-690022000","line":4922,"new":null,"old":null}
{"run_id":"1748873250-690022000","line":4942,"new":null,"old":null}
{"run_id":"1748873250-690022000","line":2883,"new":null,"old":null}
{"run_id":"1748873250-690022000","line":4952,"new":null,"old":null}
{"run_id":"1748873250-690022000","line":2681,"new":null,"old":null}
{"run_id":"1748873250-690022000","line":1042,"new":null,"old":null}
{"run_id":"1748873250-690022000","line":1129,"new":null,"old":null}
{"run_id":"1748873250-690022000","line":803,"new":null,"old":null}
{"run_id":"1748873250-690022000","line":5943,"new":null,"old":null}
{"run_id":"1748873250-690022000","line":5971,"new":null,"old":null}
{"run_id":"1748873250-690022000","line":1890,"new":null,"old":null}
{"run_id":"1748873250-690022000","line":5988,"new":null,"old":null}
{"run_id":"1748873250-690022000","line":1061,"new":null,"old":null}
{"run_id":"1748873250-690022000","line":6066,"new":null,"old":null}
{"run_id":"1748873250-690022000","line":3337,"new":null,"old":null}
{"run_id":"1748873250-690022000","line":4508,"new":null,"old":null}
{"run_id":"1748873250-690022000","line":1096,"new":null,"old":null}
{"run_id":"1748873250-690022000","line":4474,"new":null,"old":null}
{"run_id":"1748873250-690022000","line":1013,"new":null,"old":null}
{"run_id":"1748873250-690022000","line":4053,"new":null,"old":null}
{"run_id":"1748873250-690022000","line":4153,"new":null,"old":null}
{"run_id":"1748873250-690022000","line":3810,"new":null,"old":null}
{"run_id":"1748873250-690022000","line":5583,"new":null,"old":null}
{"run_id":"1748873250-690022000","line":4181,"new":null,"old":null}
{"run_id":"1748873250-690022000","line":4074,"new":null,"old":null}
{"run_id":"1748873250-690022000","line":3832,"new":null,"old":null}
{"run_id":"1748873250-690022000","line":3851,"new":null,"old":null}
{"run_id":"1748873250-690022000","line":3630,"new":null,"old":null}
{"run_id":"1748873250-690022000","line":3876,"new":null,"old":null}
{"run_id":"1748873250-690022000","line":3646,"new":null,"old":null}
{"run_id":"1748873250-690022000","line":3930,"new":null,"old":null}
{"run_id":"1748873250-690022000","line":5615,"new":null,"old":null}
{"run_id":"1748873250-690022000","line":4205,"new":null,"old":null}
{"run_id":"1748873250-690022000","line":3898,"new":null,"old":null}
{"run_id":"1748873250-690022000","line":3952,"new":null,"old":null}
{"run_id":"1748873250-690022000","line":3760,"new":null,"old":null}
{"run_id":"1748873250-690022000","line":4001,"new":null,"old":null}
{"run_id":"1748873250-690022000","line":4421,"new":null,"old":null}
{"run_id":"1748873250-690022000","line":4022,"new":null,"old":null}
{"run_id":"1748873250-690022000","line":4348,"new":null,"old":null}
{"run_id":"1748873250-690022000","line":3672,"new":null,"old":null}
{"run_id":"1748873250-690022000","line":3788,"new":null,"old":null}
{"run_id":"1748873250-690022000","line":4379,"new":null,"old":null}
{"run_id":"1748873250-690022000","line":4249,"new":null,"old":null}
{"run_id":"1748873250-690022000","line":4282,"new":null,"old":null}
{"run_id":"1748873250-690022000","line":3700,"new":null,"old":null}
{"run_id":"1748873250-690022000","line":1986,"new":null,"old":null}
{"run_id":"1748873250-690022000","line":1710,"new":null,"old":null}
{"run_id":"1748873250-690022000","line":3429,"new":null,"old":null}
{"run_id":"1748873250-690022000","line":4293,"new":null,"old":null}
{"run_id":"1748873250-690022000","line":3380,"new":null,"old":null}
{"run_id":"1748873250-690022000","line":1532,"new":null,"old":null}
{"run_id":"1748873250-690022000","line":1447,"new":null,"old":null}
{"run_id":"1748873250-690022000","line":1830,"new":null,"old":null}
{"run_id":"1748873250-690022000","line":2479,"new":null,"old":null}
{"run_id":"1748873250-690022000","line":2422,"new":null,"old":null}
{"run_id":"1748873250-690022000","line":1674,"new":null,"old":null}
{"run_id":"1748873250-690022000","line":931,"new":null,"old":null}
{"run_id":"1748873250-690022000","line":1574,"new":null,"old":null}
{"run_id":"1748873250-690022000","line":1587,"new":null,"old":null}
{"run_id":"1748873250-690022000","line":1470,"new":null,"old":null}
{"run_id":"1748873250-690022000","line":1603,"new":null,"old":null}
{"run_id":"1748873250-690022000","line":1846,"new":null,"old":null}
{"run_id":"1748873250-690022000","line":2790,"new":{"module_name":"core_integration__dataframe","snapshot_name":"count_wildcard_on_window","metadata":{"source":"datafusion/core/tests/dataframe/mod.rs","assertion_line":2790,"expression":"pretty_format_batches(&sql_results).unwrap()"},"snapshot":"+---------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| plan_type     | plan                                                                                                                                                                                                                                                                                                                                                                                                                                                                      |\n+---------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| logical_plan  | Projection: count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING AS count(*) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING                                                                                                                                                                                                                                                                             |\n|               |   WindowAggr: windowExpr=[[count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING]]                                                                                                                                                                                                                                                                                                                                                   |\n|               |     TableScan: t1 projection=[a]                                                                                                                                                                                                                                                                                                                                                                                                                                          |\n| physical_plan | ProjectionExec: expr=[count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING@1 as count(*) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING]                                                                                                                                                                                                                                                                |\n|               |   BoundedWindowAggExec: wdw=[count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING: Ok(Field { name: \"count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING\", data_type: Int64, nullable: false, dict_id: 0, dict_is_ordered: false, metadata: {} }), frame: WindowFrame { units: Range, start_bound: Preceding(UInt32(6)), end_bound: Following(UInt32(2)), is_causal: false }], mode=[Sorted] |\n|               |     SortExec: expr=[a@0 DESC], preserve_partitioning=[false]                                                                                                                                                                                                                                                                                                                                                                                                              |\n|               |       YieldStreamExec child=DataSourceExec                                                                                                                                                                                                                                                                                                                                                                                                                                |\n|               |         DataSourceExec: partitions=1, partition_sizes=[1]                                                                                                                                                                                                                                                                                                                                                                                                                 |\n|               |                                                                                                                                                                                                                                                                                                                                                                                                                                                                           |\n+---------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+"},"old":{"module_name":"core_integration__dataframe","metadata":{},"snapshot":"+---------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| plan_type     | plan                                                                                                                                                                                                                                                                                                                                                                                                                                                                      |\n+---------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| logical_plan  | Projection: count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING AS count(*) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING                                                                                                                                                                                                                                                                             |\n|               |   WindowAggr: windowExpr=[[count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING]]                                                                                                                                                                                                                                                                                                                                                   |\n|               |     TableScan: t1 projection=[a]                                                                                                                                                                                                                                                                                                                                                                                                                                          |\n| physical_plan | ProjectionExec: expr=[count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING@1 as count(*) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING]                                                                                                                                                                                                                                                                |\n|               |   BoundedWindowAggExec: wdw=[count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING: Ok(Field { name: \"count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING\", data_type: Int64, nullable: false, dict_id: 0, dict_is_ordered: false, metadata: {} }), frame: WindowFrame { units: Range, start_bound: Preceding(UInt32(6)), end_bound: Following(UInt32(2)), is_causal: false }], mode=[Sorted] |\n|               |     SortExec: expr=[a@0 DESC], preserve_partitioning=[false]                                                                                                                                                                                                                                                                                                                                                                                                              |\n|               |       DataSourceExec: partitions=1, partition_sizes=[1]                                                                                                                                                                                                                                                                                                                                                                                                                   |\n|               |                                                                                                                                                                                                                                                                                                                                                                                                                                                                           |\n+---------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+"}}
{"run_id":"1748873250-690022000","line":5148,"new":null,"old":null}
{"run_id":"1748873250-690022000","line":2364,"new":null,"old":null}
{"run_id":"1748873250-690022000","line":2538,"new":null,"old":null}
{"run_id":"1748873250-690022000","line":1745,"new":null,"old":null}
{"run_id":"1748873250-690022000","line":1758,"new":null,"old":null}
{"run_id":"1748873250-690022000","line":2575,"new":{"module_name":"core_integration__dataframe","snapshot_name":"count_wildcard_on_sort","metadata":{"source":"datafusion/core/tests/dataframe/mod.rs","assertion_line":2575,"expression":"pretty_format_batches(&sql_results).unwrap()"},"snapshot":"+---------------+------------------------------------------------------------------------------------------------------------+\n| plan_type     | plan                                                                                                       |\n+---------------+------------------------------------------------------------------------------------------------------------+\n| logical_plan  | Projection: t1.b, count(*)                                                                                 |\n|               |   Sort: count(Int64(1)) AS count(*) AS count(*) ASC NULLS LAST                                             |\n|               |     Projection: t1.b, count(Int64(1)) AS count(*), count(Int64(1))                                         |\n|               |       Aggregate: groupBy=[[t1.b]], aggr=[[count(Int64(1))]]                                                |\n|               |         TableScan: t1 projection=[b]                                                                       |\n| physical_plan | ProjectionExec: expr=[b@0 as b, count(*)@1 as count(*)]                                                    |\n|               |   SortPreservingMergeExec: [count(Int64(1))@2 ASC NULLS LAST]                                              |\n|               |     SortExec: expr=[count(Int64(1))@2 ASC NULLS LAST], preserve_partitioning=[true]                        |\n|               |       ProjectionExec: expr=[b@0 as b, count(Int64(1))@1 as count(*), count(Int64(1))@1 as count(Int64(1))] |\n|               |         AggregateExec: mode=FinalPartitioned, gby=[b@0 as b], aggr=[count(Int64(1))]                       |\n|               |           CoalesceBatchesExec: target_batch_size=8192                                                      |\n|               |             RepartitionExec: partitioning=Hash([b@0], 4), input_partitions=4                               |\n|               |               RepartitionExec: partitioning=RoundRobinBatch(4), input_partitions=1                         |\n|               |                 AggregateExec: mode=Partial, gby=[b@0 as b], aggr=[count(Int64(1))]                        |\n|               |                   YieldStreamExec child=DataSourceExec                                                     |\n|               |                     DataSourceExec: partitions=1, partition_sizes=[1]                                      |\n|               |                                                                                                            |\n+---------------+------------------------------------------------------------------------------------------------------------+"},"old":{"module_name":"core_integration__dataframe","metadata":{},"snapshot":"+---------------+------------------------------------------------------------------------------------------------------------+\n| plan_type     | plan                                                                                                       |\n+---------------+------------------------------------------------------------------------------------------------------------+\n| logical_plan  | Projection: t1.b, count(*)                                                                                 |\n|               |   Sort: count(Int64(1)) AS count(*) AS count(*) ASC NULLS LAST                                             |\n|               |     Projection: t1.b, count(Int64(1)) AS count(*), count(Int64(1))                                         |\n|               |       Aggregate: groupBy=[[t1.b]], aggr=[[count(Int64(1))]]                                                |\n|               |         TableScan: t1 projection=[b]                                                                       |\n| physical_plan | ProjectionExec: expr=[b@0 as b, count(*)@1 as count(*)]                                                    |\n|               |   SortPreservingMergeExec: [count(Int64(1))@2 ASC NULLS LAST]                                              |\n|               |     SortExec: expr=[count(Int64(1))@2 ASC NULLS LAST], preserve_partitioning=[true]                        |\n|               |       ProjectionExec: expr=[b@0 as b, count(Int64(1))@1 as count(*), count(Int64(1))@1 as count(Int64(1))] |\n|               |         AggregateExec: mode=FinalPartitioned, gby=[b@0 as b], aggr=[count(Int64(1))]                       |\n|               |           CoalesceBatchesExec: target_batch_size=8192                                                      |\n|               |             RepartitionExec: partitioning=Hash([b@0], 4), input_partitions=4                               |\n|               |               RepartitionExec: partitioning=RoundRobinBatch(4), input_partitions=1                         |\n|               |                 AggregateExec: mode=Partial, gby=[b@0 as b], aggr=[count(Int64(1))]                        |\n|               |                   DataSourceExec: partitions=1, partition_sizes=[1]                                        |\n|               |                                                                                                            |\n+---------------+------------------------------------------------------------------------------------------------------------+"}}
{"run_id":"1748873250-690022000","line":1774,"new":null,"old":null}
{"run_id":"1748873250-690022000","line":5170,"new":null,"old":null}
{"run_id":"1748873250-690022000","line":1493,"new":null,"old":null}
{"run_id":"1748873250-690022000","line":2912,"new":{"module_name":"core_integration__dataframe","snapshot_name":"count_wildcard_on_where_scalar_subquery","metadata":{"source":"datafusion/core/tests/dataframe/mod.rs","assertion_line":2912,"expression":"pretty_format_batches(&sql_results).unwrap()"},"snapshot":"+---------------+---------------------------------------------------------------------------------------------------------------------------+\n| plan_type     | plan                                                                                                                      |\n+---------------+---------------------------------------------------------------------------------------------------------------------------+\n| logical_plan  | Projection: t1.a, t1.b                                                                                                    |\n|               |   Filter: CASE WHEN __scalar_sq_1.__always_true IS NULL THEN Int64(0) ELSE __scalar_sq_1.count(*) END > Int64(0)          |\n|               |     Projection: t1.a, t1.b, __scalar_sq_1.count(*), __scalar_sq_1.__always_true                                           |\n|               |       Left Join: t1.a = __scalar_sq_1.a                                                                                   |\n|               |         TableScan: t1 projection=[a, b]                                                                                   |\n|               |         SubqueryAlias: __scalar_sq_1                                                                                      |\n|               |           Projection: count(Int64(1)) AS count(*), t2.a, Boolean(true) AS __always_true                                   |\n|               |             Aggregate: groupBy=[[t2.a]], aggr=[[count(Int64(1))]]                                                         |\n|               |               TableScan: t2 projection=[a]                                                                                |\n| physical_plan | CoalesceBatchesExec: target_batch_size=8192                                                                               |\n|               |   FilterExec: CASE WHEN __always_true@3 IS NULL THEN 0 ELSE count(*)@2 END > 0, projection=[a@0, b@1]                     |\n|               |     CoalesceBatchesExec: target_batch_size=8192                                                                           |\n|               |       HashJoinExec: mode=CollectLeft, join_type=Left, on=[(a@0, a@1)], projection=[a@0, b@1, count(*)@2, __always_true@4] |\n|               |         YieldStreamExec child=DataSourceExec                                                                              |\n|               |           DataSourceExec: partitions=1, partition_sizes=[1]                                                               |\n|               |         ProjectionExec: expr=[count(Int64(1))@1 as count(*), a@0 as a, true as __always_true]                             |\n|               |           AggregateExec: mode=FinalPartitioned, gby=[a@0 as a], aggr=[count(Int64(1))]                                    |\n|               |             CoalesceBatchesExec: target_batch_size=8192                                                                   |\n|               |               RepartitionExec: partitioning=Hash([a@0], 4), input_partitions=4                                            |\n|               |                 RepartitionExec: partitioning=RoundRobinBatch(4), input_partitions=1                                      |\n|               |                   AggregateExec: mode=Partial, gby=[a@0 as a], aggr=[count(Int64(1))]                                     |\n|               |                     YieldStreamExec child=DataSourceExec                                                                  |\n|               |                       DataSourceExec: partitions=1, partition_sizes=[1]                                                   |\n|               |                                                                                                                           |\n+---------------+---------------------------------------------------------------------------------------------------------------------------+"},"old":{"module_name":"core_integration__dataframe","metadata":{},"snapshot":"+---------------+---------------------------------------------------------------------------------------------------------------------------+\n| plan_type     | plan                                                                                                                      |\n+---------------+---------------------------------------------------------------------------------------------------------------------------+\n| logical_plan  | Projection: t1.a, t1.b                                                                                                    |\n|               |   Filter: CASE WHEN __scalar_sq_1.__always_true IS NULL THEN Int64(0) ELSE __scalar_sq_1.count(*) END > Int64(0)          |\n|               |     Projection: t1.a, t1.b, __scalar_sq_1.count(*), __scalar_sq_1.__always_true                                           |\n|               |       Left Join: t1.a = __scalar_sq_1.a                                                                                   |\n|               |         TableScan: t1 projection=[a, b]                                                                                   |\n|               |         SubqueryAlias: __scalar_sq_1                                                                                      |\n|               |           Projection: count(Int64(1)) AS count(*), t2.a, Boolean(true) AS __always_true                                   |\n|               |             Aggregate: groupBy=[[t2.a]], aggr=[[count(Int64(1))]]                                                         |\n|               |               TableScan: t2 projection=[a]                                                                                |\n| physical_plan | CoalesceBatchesExec: target_batch_size=8192                                                                               |\n|               |   FilterExec: CASE WHEN __always_true@3 IS NULL THEN 0 ELSE count(*)@2 END > 0, projection=[a@0, b@1]                     |\n|               |     CoalesceBatchesExec: target_batch_size=8192                                                                           |\n|               |       HashJoinExec: mode=CollectLeft, join_type=Left, on=[(a@0, a@1)], projection=[a@0, b@1, count(*)@2, __always_true@4] |\n|               |         DataSourceExec: partitions=1, partition_sizes=[1]                                                                 |\n|               |         ProjectionExec: expr=[count(Int64(1))@1 as count(*), a@0 as a, true as __always_true]                             |\n|               |           AggregateExec: mode=FinalPartitioned, gby=[a@0 as a], aggr=[count(Int64(1))]                                    |\n|               |             CoalesceBatchesExec: target_batch_size=8192                                                                   |\n|               |               RepartitionExec: partitioning=Hash([a@0], 4), input_partitions=4                                            |\n|               |                 RepartitionExec: partitioning=RoundRobinBatch(4), input_partitions=1                                      |\n|               |                   AggregateExec: mode=Partial, gby=[a@0 as a], aggr=[count(Int64(1))]                                     |\n|               |                     DataSourceExec: partitions=1, partition_sizes=[1]                                                     |\n|               |                                                                                                                           |\n+---------------+---------------------------------------------------------------------------------------------------------------------------+"}}
{"run_id":"1748873250-690022000","line":1618,"new":null,"old":null}
{"run_id":"1748873250-690022000","line":1789,"new":null,"old":null}
{"run_id":"1748873447-22072000","line":2575,"new":{"module_name":"core_integration__dataframe","snapshot_name":"count_wildcard_on_sort","metadata":{"source":"datafusion/core/tests/dataframe/mod.rs","assertion_line":2575,"expression":"pretty_format_batches(&sql_results).unwrap()"},"snapshot":"+---------------+------------------------------------------------------------------------------------------------------------+\n| plan_type     | plan                                                                                                       |\n+---------------+------------------------------------------------------------------------------------------------------------+\n| logical_plan  | Projection: t1.b, count(*)                                                                                 |\n|               |   Sort: count(Int64(1)) AS count(*) AS count(*) ASC NULLS LAST                                             |\n|               |     Projection: t1.b, count(Int64(1)) AS count(*), count(Int64(1))                                         |\n|               |       Aggregate: groupBy=[[t1.b]], aggr=[[count(Int64(1))]]                                                |\n|               |         TableScan: t1 projection=[b]                                                                       |\n| physical_plan | ProjectionExec: expr=[b@0 as b, count(*)@1 as count(*)]                                                    |\n|               |   SortPreservingMergeExec: [count(Int64(1))@2 ASC NULLS LAST]                                              |\n|               |     SortExec: expr=[count(Int64(1))@2 ASC NULLS LAST], preserve_partitioning=[true]                        |\n|               |       ProjectionExec: expr=[b@0 as b, count(Int64(1))@1 as count(*), count(Int64(1))@1 as count(Int64(1))] |\n|               |         AggregateExec: mode=FinalPartitioned, gby=[b@0 as b], aggr=[count(Int64(1))]                       |\n|               |           CoalesceBatchesExec: target_batch_size=8192                                                      |\n|               |             RepartitionExec: partitioning=Hash([b@0], 4), input_partitions=4                               |\n|               |               RepartitionExec: partitioning=RoundRobinBatch(4), input_partitions=1                         |\n|               |                 AggregateExec: mode=Partial, gby=[b@0 as b], aggr=[count(Int64(1))]                        |\n|               |                   YieldStreamExec child=DataSourceExec                                                     |\n|               |                     DataSourceExec: partitions=1, partition_sizes=[1]                                      |\n|               |                                                                                                            |\n+---------------+------------------------------------------------------------------------------------------------------------+"},"old":{"module_name":"core_integration__dataframe","metadata":{},"snapshot":"+---------------+------------------------------------------------------------------------------------------------------------+\n| plan_type     | plan                                                                                                       |\n+---------------+------------------------------------------------------------------------------------------------------------+\n| logical_plan  | Projection: t1.b, count(*)                                                                                 |\n|               |   Sort: count(Int64(1)) AS count(*) AS count(*) ASC NULLS LAST                                             |\n|               |     Projection: t1.b, count(Int64(1)) AS count(*), count(Int64(1))                                         |\n|               |       Aggregate: groupBy=[[t1.b]], aggr=[[count(Int64(1))]]                                                |\n|               |         TableScan: t1 projection=[b]                                                                       |\n| physical_plan | ProjectionExec: expr=[b@0 as b, count(*)@1 as count(*)]                                                    |\n|               |   SortPreservingMergeExec: [count(Int64(1))@2 ASC NULLS LAST]                                              |\n|               |     SortExec: expr=[count(Int64(1))@2 ASC NULLS LAST], preserve_partitioning=[true]                        |\n|               |       ProjectionExec: expr=[b@0 as b, count(Int64(1))@1 as count(*), count(Int64(1))@1 as count(Int64(1))] |\n|               |         AggregateExec: mode=FinalPartitioned, gby=[b@0 as b], aggr=[count(Int64(1))]                       |\n|               |           CoalesceBatchesExec: target_batch_size=8192                                                      |\n|               |             RepartitionExec: partitioning=Hash([b@0], 4), input_partitions=4                               |\n|               |               RepartitionExec: partitioning=RoundRobinBatch(4), input_partitions=1                         |\n|               |                 AggregateExec: mode=Partial, gby=[b@0 as b], aggr=[count(Int64(1))]                        |\n|               |                   DataSourceExec: partitions=1, partition_sizes=[1]                                        |\n|               |                                                                                                            |\n+---------------+------------------------------------------------------------------------------------------------------------+"}}
{"run_id":"1748873613-663955000","line":2575,"new":null,"old":null}
{"run_id":"1748873613-663955000","line":2602,"new":{"module_name":"core_integration__dataframe","snapshot_name":"count_wildcard_on_sort-2","metadata":{"source":"datafusion/core/tests/dataframe/mod.rs","assertion_line":2602,"expression":"pretty_format_batches(&df_results).unwrap()"},"snapshot":"+---------------+--------------------------------------------------------------------------------+\n| plan_type     | plan                                                                           |\n+---------------+--------------------------------------------------------------------------------+\n| logical_plan  | Sort: count(*) ASC NULLS LAST                                                  |\n|               |   Aggregate: groupBy=[[t1.b]], aggr=[[count(Int64(1)) AS count(*)]]            |\n|               |     TableScan: t1 projection=[b]                                               |\n| physical_plan | SortPreservingMergeExec: [count(*)@1 ASC NULLS LAST]                           |\n|               |   SortExec: expr=[count(*)@1 ASC NULLS LAST], preserve_partitioning=[true]     |\n|               |     AggregateExec: mode=FinalPartitioned, gby=[b@0 as b], aggr=[count(*)]      |\n|               |       CoalesceBatchesExec: target_batch_size=8192                              |\n|               |         RepartitionExec: partitioning=Hash([b@0], 4), input_partitions=4       |\n|               |           RepartitionExec: partitioning=RoundRobinBatch(4), input_partitions=1 |\n|               |             AggregateExec: mode=Partial, gby=[b@0 as b], aggr=[count(*)]       |\n|               |               YieldStreamExec child=DataSourceExec                             |\n|               |                 DataSourceExec: partitions=1, partition_sizes=[1]              |\n|               |                                                                                |\n+---------------+--------------------------------------------------------------------------------+"},"old":{"module_name":"core_integration__dataframe","metadata":{},"snapshot":"+---------------+--------------------------------------------------------------------------------+\n| plan_type     | plan                                                                           |\n+---------------+--------------------------------------------------------------------------------+\n| logical_plan  | Sort: count(*) ASC NULLS LAST                                                  |\n|               |   Aggregate: groupBy=[[t1.b]], aggr=[[count(Int64(1)) AS count(*)]]            |\n|               |     TableScan: t1 projection=[b]                                               |\n| physical_plan | SortPreservingMergeExec: [count(*)@1 ASC NULLS LAST]                           |\n|               |   SortExec: expr=[count(*)@1 ASC NULLS LAST], preserve_partitioning=[true]     |\n|               |     AggregateExec: mode=FinalPartitioned, gby=[b@0 as b], aggr=[count(*)]      |\n|               |       CoalesceBatchesExec: target_batch_size=8192                              |\n|               |         RepartitionExec: partitioning=Hash([b@0], 4), input_partitions=4       |\n|               |           RepartitionExec: partitioning=RoundRobinBatch(4), input_partitions=1 |\n|               |             AggregateExec: mode=Partial, gby=[b@0 as b], aggr=[count(*)]       |\n|               |               DataSourceExec: partitions=1, partition_sizes=[1]                |\n|               |                                                                                |\n+---------------+--------------------------------------------------------------------------------+"}}
{"run_id":"1748873676-404273000","line":2575,"new":null,"old":null}
{"run_id":"1748873676-404273000","line":2602,"new":null,"old":null}
{"run_id":"1748873683-425586000","line":2022,"new":null,"old":null}
{"run_id":"1748873683-425586000","line":5493,"new":null,"old":null}
{"run_id":"1748873683-425586000","line":4560,"new":null,"old":null}
{"run_id":"1748873683-425586000","line":511,"new":null,"old":null}
{"run_id":"1748873683-425586000","line":1920,"new":null,"old":null}
{"run_id":"1748873683-425586000","line":5512,"new":null,"old":null}
{"run_id":"1748873683-425586000","line":5551,"new":null,"old":null}
{"run_id":"1748873683-425586000","line":5564,"new":null,"old":null}
{"run_id":"1748873683-425586000","line":2029,"new":null,"old":null}
{"run_id":"1748873683-425586000","line":5420,"new":null,"old":null}
{"run_id":"1748873683-425586000","line":5438,"new":null,"old":null}
{"run_id":"1748873683-425586000","line":480,"new":null,"old":null}
{"run_id":"1748873683-425586000","line":5453,"new":null,"old":null}
{"run_id":"1748873683-425586000","line":448,"new":null,"old":null}
{"run_id":"1748873683-425586000","line":3206,"new":null,"old":null}
{"run_id":"1748873683-425586000","line":3224,"new":null,"old":null}
{"run_id":"1748873683-425586000","line":3269,"new":null,"old":null}
{"run_id":"1748873683-425586000","line":1243,"new":null,"old":null}
{"run_id":"1748873683-425586000","line":1197,"new":null,"old":null}
{"run_id":"1748873683-425586000","line":1170,"new":null,"old":null}
{"run_id":"1748873683-425586000","line":3509,"new":null,"old":null}
{"run_id":"1748873683-425586000","line":1219,"new":null,"old":null}
{"run_id":"1748873683-425586000","line":1224,"new":null,"old":null}
{"run_id":"1748873683-425586000","line":3601,"new":null,"old":null}
{"run_id":"1748873683-425586000","line":3554,"new":null,"old":null}
{"run_id":"1748873683-425586000","line":3613,"new":null,"old":null}
{"run_id":"1748873683-425586000","line":3520,"new":null,"old":null}
{"run_id":"1748873683-425586000","line":3242,"new":null,"old":null}
{"run_id":"1748873683-425586000","line":2310,"new":null,"old":null}
{"run_id":"1748873683-425586000","line":342,"new":null,"old":null}
{"run_id":"1748873683-425586000","line":3567,"new":null,"old":null}
{"run_id":"1748873683-425586000","line":3305,"new":null,"old":null}
{"run_id":"1748873683-425586000","line":3188,"new":null,"old":null}
{"run_id":"1748873683-425586000","line":3170,"new":null,"old":null}
{"run_id":"1748873683-425586000","line":874,"new":null,"old":null}
{"run_id":"1748873683-425586000","line":5337,"new":null,"old":null}
{"run_id":"1748873683-425586000","line":3083,"new":null,"old":null}
{"run_id":"1748873683-425586000","line":5355,"new":null,"old":null}
{"run_id":"1748873683-425586000","line":5370,"new":null,"old":null}
{"run_id":"1748873683-425586000","line":571,"new":null,"old":null}
{"run_id":"1748873683-425586000","line":613,"new":null,"old":null}
{"run_id":"1748873683-425586000","line":3130,"new":null,"old":null}
{"run_id":"1748873683-425586000","line":582,"new":null,"old":null}
{"run_id":"1748873683-425586000","line":5650,"new":null,"old":null}
{"run_id":"1748873683-425586000","line":628,"new":null,"old":null}
{"run_id":"1748873683-425586000","line":715,"new":null,"old":null}
{"run_id":"1748873683-425586000","line":5661,"new":null,"old":null}
{"run_id":"1748873683-425586000","line":663,"new":null,"old":null}
{"run_id":"1748873683-425586000","line":728,"new":null,"old":null}
{"run_id":"1748873683-425586000","line":5723,"new":null,"old":null}
{"run_id":"1748873683-425586000","line":5758,"new":null,"old":null}
{"run_id":"1748873683-425586000","line":5699,"new":null,"old":null}
{"run_id":"1748873683-425586000","line":5728,"new":null,"old":null}
{"run_id":"1748873683-425586000","line":678,"new":null,"old":null}
{"run_id":"1748873683-425586000","line":5770,"new":null,"old":null}
{"run_id":"1748873683-425586000","line":5786,"new":null,"old":null}
{"run_id":"1748873683-425586000","line":756,"new":null,"old":null}
{"run_id":"1748873683-425586000","line":1389,"new":null,"old":null}
{"run_id":"1748873683-425586000","line":4881,"new":null,"old":null}
{"run_id":"1748873683-425586000","line":1405,"new":null,"old":null}
{"run_id":"1748873683-425586000","line":839,"new":null,"old":null}
{"run_id":"1748873683-425586000","line":2719,"new":null,"old":null}
{"run_id":"1748873683-425586000","line":2758,"new":null,"old":null}
{"run_id":"1748873683-425586000","line":4976,"new":null,"old":null}
{"run_id":"1748873683-425586000","line":803,"new":null,"old":null}
{"run_id":"1748873683-425586000","line":5045,"new":null,"old":null}
{"run_id":"1748873683-425586000","line":2638,"new":null,"old":null}
{"run_id":"1748873683-425586000","line":2575,"new":null,"old":null}
{"run_id":"1748873683-425586000","line":2602,"new":null,"old":null}
{"run_id":"1748873683-425586000","line":5058,"new":null,"old":null}
{"run_id":"1748873683-425586000","line":4988,"new":null,"old":null}
{"run_id":"1748873683-425586000","line":5078,"new":null,"old":null}
{"run_id":"1748873683-425586000","line":5006,"new":null,"old":null}
{"run_id":"1748873683-425586000","line":2860,"new":null,"old":null}
{"run_id":"1748873683-425586000","line":4912,"new":null,"old":null}
{"run_id":"1748873683-425586000","line":5087,"new":null,"old":null}
{"run_id":"1748873683-425586000","line":5014,"new":null,"old":null}
{"run_id":"1748873683-425586000","line":4925,"new":null,"old":null}
{"run_id":"1748873683-425586000","line":2886,"new":null,"old":null}
{"run_id":"1748873683-425586000","line":1129,"new":null,"old":null}
{"run_id":"1748873683-425586000","line":4945,"new":null,"old":null}
{"run_id":"1748873683-425586000","line":4955,"new":null,"old":null}
{"run_id":"1748873683-425586000","line":1042,"new":null,"old":null}
{"run_id":"1748873683-425586000","line":2684,"new":null,"old":null}
{"run_id":"1748873683-425586000","line":5974,"new":null,"old":null}
{"run_id":"1748873683-425586000","line":5946,"new":null,"old":null}
{"run_id":"1748873683-425586000","line":1890,"new":null,"old":null}
{"run_id":"1748873683-425586000","line":5991,"new":null,"old":null}
{"run_id":"1748873683-425586000","line":4477,"new":null,"old":null}
{"run_id":"1748873683-425586000","line":6069,"new":null,"old":null}
{"run_id":"1748873683-425586000","line":4511,"new":null,"old":null}
{"run_id":"1748873683-425586000","line":3340,"new":null,"old":null}
{"run_id":"1748873683-425586000","line":1061,"new":null,"old":null}
{"run_id":"1748873683-425586000","line":1096,"new":null,"old":null}
{"run_id":"1748873683-425586000","line":1013,"new":null,"old":null}
{"run_id":"1748873683-425586000","line":4056,"new":null,"old":null}
{"run_id":"1748873683-425586000","line":4156,"new":null,"old":null}
{"run_id":"1748873683-425586000","line":5618,"new":null,"old":null}
{"run_id":"1748873683-425586000","line":5586,"new":null,"old":null}
{"run_id":"1748873683-425586000","line":4077,"new":null,"old":null}
{"run_id":"1748873683-425586000","line":3879,"new":null,"old":null}
{"run_id":"1748873683-425586000","line":3633,"new":null,"old":null}
{"run_id":"1748873683-425586000","line":3813,"new":null,"old":null}
{"run_id":"1748873683-425586000","line":4184,"new":null,"old":null}
{"run_id":"1748873683-425586000","line":3763,"new":null,"old":null}
{"run_id":"1748873683-425586000","line":3901,"new":null,"old":null}
{"run_id":"1748873683-425586000","line":3933,"new":null,"old":null}
{"run_id":"1748873683-425586000","line":3835,"new":null,"old":null}
{"run_id":"1748873683-425586000","line":3649,"new":null,"old":null}
{"run_id":"1748873683-425586000","line":3791,"new":null,"old":null}
{"run_id":"1748873683-425586000","line":4004,"new":null,"old":null}
{"run_id":"1748873683-425586000","line":3955,"new":null,"old":null}
{"run_id":"1748873683-425586000","line":3854,"new":null,"old":null}
{"run_id":"1748873683-425586000","line":4208,"new":null,"old":null}
{"run_id":"1748873683-425586000","line":4252,"new":null,"old":null}
{"run_id":"1748873683-425586000","line":4424,"new":null,"old":null}
{"run_id":"1748873683-425586000","line":4025,"new":null,"old":null}
{"run_id":"1748873683-425586000","line":4351,"new":null,"old":null}
{"run_id":"1748873683-425586000","line":4285,"new":null,"old":null}
{"run_id":"1748873683-425586000","line":3675,"new":null,"old":null}
{"run_id":"1748873683-425586000","line":4382,"new":null,"old":null}
{"run_id":"1748873683-425586000","line":4296,"new":null,"old":null}
{"run_id":"1748873683-425586000","line":3703,"new":null,"old":null}
{"run_id":"1748873683-425586000","line":1710,"new":null,"old":null}
{"run_id":"1748873683-425586000","line":1986,"new":null,"old":null}
{"run_id":"1748873683-425586000","line":1532,"new":null,"old":null}
{"run_id":"1748873683-425586000","line":3432,"new":null,"old":null}
{"run_id":"1748873683-425586000","line":2422,"new":null,"old":null}
{"run_id":"1748873683-425586000","line":1447,"new":null,"old":null}
{"run_id":"1748873683-425586000","line":2479,"new":null,"old":null}
{"run_id":"1748873683-425586000","line":3383,"new":null,"old":null}
{"run_id":"1748873683-425586000","line":931,"new":null,"old":null}
{"run_id":"1748873683-425586000","line":1574,"new":null,"old":null}
{"run_id":"1748873683-425586000","line":1587,"new":null,"old":null}
{"run_id":"1748873683-425586000","line":1674,"new":null,"old":null}
{"run_id":"1748873683-425586000","line":1603,"new":null,"old":null}
{"run_id":"1748873683-425586000","line":1830,"new":null,"old":null}
{"run_id":"1748873683-425586000","line":5151,"new":null,"old":null}
{"run_id":"1748873683-425586000","line":2364,"new":null,"old":null}
{"run_id":"1748873683-425586000","line":1470,"new":null,"old":null}
{"run_id":"1748873683-425586000","line":2538,"new":null,"old":null}
{"run_id":"1748873683-425586000","line":5173,"new":null,"old":null}
{"run_id":"1748873683-425586000","line":1745,"new":null,"old":null}
{"run_id":"1748873683-425586000","line":1758,"new":null,"old":null}
{"run_id":"1748873683-425586000","line":1846,"new":null,"old":null}
{"run_id":"1748873683-425586000","line":1774,"new":null,"old":null}
{"run_id":"1748873683-425586000","line":2793,"new":{"module_name":"core_integration__dataframe","snapshot_name":"count_wildcard_on_window","metadata":{"source":"datafusion/core/tests/dataframe/mod.rs","assertion_line":2793,"expression":"pretty_format_batches(&sql_results).unwrap()"},"snapshot":"+---------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| plan_type     | plan                                                                                                                                                                                                                                                                                                                                                                                                                                                                      |\n+---------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| logical_plan  | Projection: count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING AS count(*) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING                                                                                                                                                                                                                                                                             |\n|               |   WindowAggr: windowExpr=[[count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING]]                                                                                                                                                                                                                                                                                                                                                   |\n|               |     TableScan: t1 projection=[a]                                                                                                                                                                                                                                                                                                                                                                                                                                          |\n| physical_plan | ProjectionExec: expr=[count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING@1 as count(*) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING]                                                                                                                                                                                                                                                                |\n|               |   BoundedWindowAggExec: wdw=[count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING: Ok(Field { name: \"count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING\", data_type: Int64, nullable: false, dict_id: 0, dict_is_ordered: false, metadata: {} }), frame: WindowFrame { units: Range, start_bound: Preceding(UInt32(6)), end_bound: Following(UInt32(2)), is_causal: false }], mode=[Sorted] |\n|               |     SortExec: expr=[a@0 DESC], preserve_partitioning=[false]                                                                                                                                                                                                                                                                                                                                                                                                              |\n|               |       YieldStreamExec child=DataSourceExec                                                                                                                                                                                                                                                                                                                                                                                                                                |\n|               |         DataSourceExec: partitions=1, partition_sizes=[1]                                                                                                                                                                                                                                                                                                                                                                                                                 |\n|               |                                                                                                                                                                                                                                                                                                                                                                                                                                                                           |\n+---------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+"},"old":{"module_name":"core_integration__dataframe","metadata":{},"snapshot":"+---------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| plan_type     | plan                                                                                                                                                                                                                                                                                                                                                                                                                                                                      |\n+---------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| logical_plan  | Projection: count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING AS count(*) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING                                                                                                                                                                                                                                                                             |\n|               |   WindowAggr: windowExpr=[[count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING]]                                                                                                                                                                                                                                                                                                                                                   |\n|               |     TableScan: t1 projection=[a]                                                                                                                                                                                                                                                                                                                                                                                                                                          |\n| physical_plan | ProjectionExec: expr=[count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING@1 as count(*) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING]                                                                                                                                                                                                                                                                |\n|               |   BoundedWindowAggExec: wdw=[count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING: Ok(Field { name: \"count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING\", data_type: Int64, nullable: false, dict_id: 0, dict_is_ordered: false, metadata: {} }), frame: WindowFrame { units: Range, start_bound: Preceding(UInt32(6)), end_bound: Following(UInt32(2)), is_causal: false }], mode=[Sorted] |\n|               |     SortExec: expr=[a@0 DESC], preserve_partitioning=[false]                                                                                                                                                                                                                                                                                                                                                                                                              |\n|               |       DataSourceExec: partitions=1, partition_sizes=[1]                                                                                                                                                                                                                                                                                                                                                                                                                   |\n|               |                                                                                                                                                                                                                                                                                                                                                                                                                                                                           |\n+---------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+"}}
{"run_id":"1748873683-425586000","line":2915,"new":{"module_name":"core_integration__dataframe","snapshot_name":"count_wildcard_on_where_scalar_subquery","metadata":{"source":"datafusion/core/tests/dataframe/mod.rs","assertion_line":2915,"expression":"pretty_format_batches(&sql_results).unwrap()"},"snapshot":"+---------------+---------------------------------------------------------------------------------------------------------------------------+\n| plan_type     | plan                                                                                                                      |\n+---------------+---------------------------------------------------------------------------------------------------------------------------+\n| logical_plan  | Projection: t1.a, t1.b                                                                                                    |\n|               |   Filter: CASE WHEN __scalar_sq_1.__always_true IS NULL THEN Int64(0) ELSE __scalar_sq_1.count(*) END > Int64(0)          |\n|               |     Projection: t1.a, t1.b, __scalar_sq_1.count(*), __scalar_sq_1.__always_true                                           |\n|               |       Left Join: t1.a = __scalar_sq_1.a                                                                                   |\n|               |         TableScan: t1 projection=[a, b]                                                                                   |\n|               |         SubqueryAlias: __scalar_sq_1                                                                                      |\n|               |           Projection: count(Int64(1)) AS count(*), t2.a, Boolean(true) AS __always_true                                   |\n|               |             Aggregate: groupBy=[[t2.a]], aggr=[[count(Int64(1))]]                                                         |\n|               |               TableScan: t2 projection=[a]                                                                                |\n| physical_plan | CoalesceBatchesExec: target_batch_size=8192                                                                               |\n|               |   FilterExec: CASE WHEN __always_true@3 IS NULL THEN 0 ELSE count(*)@2 END > 0, projection=[a@0, b@1]                     |\n|               |     CoalesceBatchesExec: target_batch_size=8192                                                                           |\n|               |       HashJoinExec: mode=CollectLeft, join_type=Left, on=[(a@0, a@1)], projection=[a@0, b@1, count(*)@2, __always_true@4] |\n|               |         YieldStreamExec child=DataSourceExec                                                                              |\n|               |           DataSourceExec: partitions=1, partition_sizes=[1]                                                               |\n|               |         ProjectionExec: expr=[count(Int64(1))@1 as count(*), a@0 as a, true as __always_true]                             |\n|               |           AggregateExec: mode=FinalPartitioned, gby=[a@0 as a], aggr=[count(Int64(1))]                                    |\n|               |             CoalesceBatchesExec: target_batch_size=8192                                                                   |\n|               |               RepartitionExec: partitioning=Hash([a@0], 4), input_partitions=4                                            |\n|               |                 RepartitionExec: partitioning=RoundRobinBatch(4), input_partitions=1                                      |\n|               |                   AggregateExec: mode=Partial, gby=[a@0 as a], aggr=[count(Int64(1))]                                     |\n|               |                     YieldStreamExec child=DataSourceExec                                                                  |\n|               |                       DataSourceExec: partitions=1, partition_sizes=[1]                                                   |\n|               |                                                                                                                           |\n+---------------+---------------------------------------------------------------------------------------------------------------------------+"},"old":{"module_name":"core_integration__dataframe","metadata":{},"snapshot":"+---------------+---------------------------------------------------------------------------------------------------------------------------+\n| plan_type     | plan                                                                                                                      |\n+---------------+---------------------------------------------------------------------------------------------------------------------------+\n| logical_plan  | Projection: t1.a, t1.b                                                                                                    |\n|               |   Filter: CASE WHEN __scalar_sq_1.__always_true IS NULL THEN Int64(0) ELSE __scalar_sq_1.count(*) END > Int64(0)          |\n|               |     Projection: t1.a, t1.b, __scalar_sq_1.count(*), __scalar_sq_1.__always_true                                           |\n|               |       Left Join: t1.a = __scalar_sq_1.a                                                                                   |\n|               |         TableScan: t1 projection=[a, b]                                                                                   |\n|               |         SubqueryAlias: __scalar_sq_1                                                                                      |\n|               |           Projection: count(Int64(1)) AS count(*), t2.a, Boolean(true) AS __always_true                                   |\n|               |             Aggregate: groupBy=[[t2.a]], aggr=[[count(Int64(1))]]                                                         |\n|               |               TableScan: t2 projection=[a]                                                                                |\n| physical_plan | CoalesceBatchesExec: target_batch_size=8192                                                                               |\n|               |   FilterExec: CASE WHEN __always_true@3 IS NULL THEN 0 ELSE count(*)@2 END > 0, projection=[a@0, b@1]                     |\n|               |     CoalesceBatchesExec: target_batch_size=8192                                                                           |\n|               |       HashJoinExec: mode=CollectLeft, join_type=Left, on=[(a@0, a@1)], projection=[a@0, b@1, count(*)@2, __always_true@4] |\n|               |         DataSourceExec: partitions=1, partition_sizes=[1]                                                                 |\n|               |         ProjectionExec: expr=[count(Int64(1))@1 as count(*), a@0 as a, true as __always_true]                             |\n|               |           AggregateExec: mode=FinalPartitioned, gby=[a@0 as a], aggr=[count(Int64(1))]                                    |\n|               |             CoalesceBatchesExec: target_batch_size=8192                                                                   |\n|               |               RepartitionExec: partitioning=Hash([a@0], 4), input_partitions=4                                            |\n|               |                 RepartitionExec: partitioning=RoundRobinBatch(4), input_partitions=1                                      |\n|               |                   AggregateExec: mode=Partial, gby=[a@0 as a], aggr=[count(Int64(1))]                                     |\n|               |                     DataSourceExec: partitions=1, partition_sizes=[1]                                                     |\n|               |                                                                                                                           |\n+---------------+---------------------------------------------------------------------------------------------------------------------------+"}}
{"run_id":"1748873683-425586000","line":1493,"new":null,"old":null}
{"run_id":"1748873683-425586000","line":1618,"new":null,"old":null}
{"run_id":"1748873683-425586000","line":1789,"new":null,"old":null}
{"run_id":"1748873859-597000000","line":2915,"new":null,"old":null}
{"run_id":"1748873859-597000000","line":2975,"new":null,"old":null}
{"run_id":"1748873866-668387000","line":5499,"new":null,"old":null}
{"run_id":"1748873866-668387000","line":2022,"new":null,"old":null}
{"run_id":"1748873866-668387000","line":4566,"new":null,"old":null}
{"run_id":"1748873866-668387000","line":511,"new":null,"old":null}
{"run_id":"1748873866-668387000","line":5518,"new":null,"old":null}
{"run_id":"1748873866-668387000","line":5557,"new":null,"old":null}
{"run_id":"1748873866-668387000","line":5570,"new":null,"old":null}
{"run_id":"1748873866-668387000","line":1920,"new":null,"old":null}
{"run_id":"1748873866-668387000","line":5426,"new":null,"old":null}
{"run_id":"1748873866-668387000","line":2029,"new":null,"old":null}
{"run_id":"1748873866-668387000","line":5444,"new":null,"old":null}
{"run_id":"1748873866-668387000","line":5459,"new":null,"old":null}
{"run_id":"1748873866-668387000","line":480,"new":null,"old":null}
{"run_id":"1748873866-668387000","line":448,"new":null,"old":null}
{"run_id":"1748873866-668387000","line":3230,"new":null,"old":null}
{"run_id":"1748873866-668387000","line":3212,"new":null,"old":null}
{"run_id":"1748873866-668387000","line":1170,"new":null,"old":null}
{"run_id":"1748873866-668387000","line":3275,"new":null,"old":null}
{"run_id":"1748873866-668387000","line":1197,"new":null,"old":null}
{"run_id":"1748873866-668387000","line":1243,"new":null,"old":null}
{"run_id":"1748873866-668387000","line":1219,"new":null,"old":null}
{"run_id":"1748873866-668387000","line":1224,"new":null,"old":null}
{"run_id":"1748873866-668387000","line":3515,"new":null,"old":null}
{"run_id":"1748873866-668387000","line":3607,"new":null,"old":null}
{"run_id":"1748873866-668387000","line":3560,"new":null,"old":null}
{"run_id":"1748873866-668387000","line":3526,"new":null,"old":null}
{"run_id":"1748873866-668387000","line":3619,"new":null,"old":null}
{"run_id":"1748873866-668387000","line":2310,"new":null,"old":null}
{"run_id":"1748873866-668387000","line":3248,"new":null,"old":null}
{"run_id":"1748873866-668387000","line":3573,"new":null,"old":null}
{"run_id":"1748873866-668387000","line":342,"new":null,"old":null}
{"run_id":"1748873866-668387000","line":3194,"new":null,"old":null}
{"run_id":"1748873866-668387000","line":3176,"new":null,"old":null}
{"run_id":"1748873866-668387000","line":3311,"new":null,"old":null}
{"run_id":"1748873866-668387000","line":874,"new":null,"old":null}
{"run_id":"1748873866-668387000","line":5343,"new":null,"old":null}
{"run_id":"1748873866-668387000","line":3089,"new":null,"old":null}
{"run_id":"1748873866-668387000","line":5361,"new":null,"old":null}
{"run_id":"1748873866-668387000","line":3136,"new":null,"old":null}
{"run_id":"1748873866-668387000","line":571,"new":null,"old":null}
{"run_id":"1748873866-668387000","line":5376,"new":null,"old":null}
{"run_id":"1748873866-668387000","line":663,"new":null,"old":null}
{"run_id":"1748873866-668387000","line":582,"new":null,"old":null}
{"run_id":"1748873866-668387000","line":613,"new":null,"old":null}
{"run_id":"1748873866-668387000","line":715,"new":null,"old":null}
{"run_id":"1748873866-668387000","line":5656,"new":null,"old":null}
{"run_id":"1748873866-668387000","line":678,"new":null,"old":null}
{"run_id":"1748873866-668387000","line":628,"new":null,"old":null}
{"run_id":"1748873866-668387000","line":5667,"new":null,"old":null}
{"run_id":"1748873866-668387000","line":5729,"new":null,"old":null}
{"run_id":"1748873866-668387000","line":728,"new":null,"old":null}
{"run_id":"1748873866-668387000","line":5764,"new":null,"old":null}
{"run_id":"1748873866-668387000","line":5734,"new":null,"old":null}
{"run_id":"1748873866-668387000","line":4887,"new":null,"old":null}
{"run_id":"1748873866-668387000","line":5776,"new":null,"old":null}
{"run_id":"1748873866-668387000","line":5792,"new":null,"old":null}
{"run_id":"1748873866-668387000","line":5705,"new":null,"old":null}
{"run_id":"1748873866-668387000","line":1389,"new":null,"old":null}
{"run_id":"1748873866-668387000","line":1405,"new":null,"old":null}
{"run_id":"1748873866-668387000","line":756,"new":null,"old":null}
{"run_id":"1748873866-668387000","line":839,"new":null,"old":null}
{"run_id":"1748873866-668387000","line":2719,"new":null,"old":null}
{"run_id":"1748873866-668387000","line":2638,"new":null,"old":null}
{"run_id":"1748873866-668387000","line":4982,"new":null,"old":null}
{"run_id":"1748873866-668387000","line":2860,"new":null,"old":null}
{"run_id":"1748873866-668387000","line":4994,"new":null,"old":null}
{"run_id":"1748873866-668387000","line":5012,"new":null,"old":null}
{"run_id":"1748873866-668387000","line":5020,"new":null,"old":null}
{"run_id":"1748873866-668387000","line":2886,"new":null,"old":null}
{"run_id":"1748873866-668387000","line":2758,"new":null,"old":null}
{"run_id":"1748873866-668387000","line":5051,"new":null,"old":null}
{"run_id":"1748873866-668387000","line":4918,"new":null,"old":null}
{"run_id":"1748873866-668387000","line":5064,"new":null,"old":null}
{"run_id":"1748873866-668387000","line":2575,"new":null,"old":null}
{"run_id":"1748873866-668387000","line":2684,"new":null,"old":null}
{"run_id":"1748873866-668387000","line":2602,"new":null,"old":null}
{"run_id":"1748873866-668387000","line":4931,"new":null,"old":null}
{"run_id":"1748873866-668387000","line":4951,"new":null,"old":null}
{"run_id":"1748873866-668387000","line":5084,"new":null,"old":null}
{"run_id":"1748873866-668387000","line":2915,"new":null,"old":null}
{"run_id":"1748873866-668387000","line":1129,"new":null,"old":null}
{"run_id":"1748873866-668387000","line":4961,"new":null,"old":null}
{"run_id":"1748873866-668387000","line":5093,"new":null,"old":null}
{"run_id":"1748873866-668387000","line":1042,"new":null,"old":null}
{"run_id":"1748873866-668387000","line":803,"new":null,"old":null}
{"run_id":"1748873866-668387000","line":5980,"new":null,"old":null}
{"run_id":"1748873866-668387000","line":5952,"new":null,"old":null}
{"run_id":"1748873866-668387000","line":5997,"new":null,"old":null}
{"run_id":"1748873866-668387000","line":2975,"new":null,"old":null}
{"run_id":"1748873866-668387000","line":6075,"new":null,"old":null}
{"run_id":"1748873866-668387000","line":4517,"new":null,"old":null}
{"run_id":"1748873866-668387000","line":4483,"new":null,"old":null}
{"run_id":"1748873866-668387000","line":3346,"new":null,"old":null}
{"run_id":"1748873866-668387000","line":1013,"new":null,"old":null}
{"run_id":"1748873866-668387000","line":1061,"new":null,"old":null}
{"run_id":"1748873866-668387000","line":4062,"new":null,"old":null}
{"run_id":"1748873866-668387000","line":5592,"new":null,"old":null}
{"run_id":"1748873866-668387000","line":4162,"new":null,"old":null}
{"run_id":"1748873866-668387000","line":3819,"new":null,"old":null}
{"run_id":"1748873866-668387000","line":1096,"new":null,"old":null}
{"run_id":"1748873866-668387000","line":3841,"new":null,"old":null}
{"run_id":"1748873866-668387000","line":4083,"new":null,"old":null}
{"run_id":"1748873866-668387000","line":3639,"new":null,"old":null}
{"run_id":"1748873866-668387000","line":3860,"new":null,"old":null}
{"run_id":"1748873866-668387000","line":3885,"new":null,"old":null}
{"run_id":"1748873866-668387000","line":3655,"new":null,"old":null}
{"run_id":"1748873866-668387000","line":5624,"new":null,"old":null}
{"run_id":"1748873866-668387000","line":4190,"new":null,"old":null}
{"run_id":"1748873866-668387000","line":3939,"new":null,"old":null}
{"run_id":"1748873866-668387000","line":3907,"new":null,"old":null}
{"run_id":"1748873866-668387000","line":3769,"new":null,"old":null}
{"run_id":"1748873866-668387000","line":3961,"new":null,"old":null}
{"run_id":"1748873866-668387000","line":4010,"new":null,"old":null}
{"run_id":"1748873866-668387000","line":4031,"new":null,"old":null}
{"run_id":"1748873866-668387000","line":3797,"new":null,"old":null}
{"run_id":"1748873866-668387000","line":4357,"new":null,"old":null}
{"run_id":"1748873866-668387000","line":4430,"new":null,"old":null}
{"run_id":"1748873866-668387000","line":3681,"new":null,"old":null}
{"run_id":"1748873866-668387000","line":4258,"new":null,"old":null}
{"run_id":"1748873866-668387000","line":4388,"new":null,"old":null}
{"run_id":"1748873866-668387000","line":4214,"new":null,"old":null}
{"run_id":"1748873866-668387000","line":4291,"new":null,"old":null}
{"run_id":"1748873866-668387000","line":3709,"new":null,"old":null}
{"run_id":"1748873866-668387000","line":4302,"new":null,"old":null}
{"run_id":"1748873866-668387000","line":1986,"new":null,"old":null}
{"run_id":"1748873866-668387000","line":1890,"new":null,"old":null}
{"run_id":"1748873866-668387000","line":1710,"new":null,"old":null}
{"run_id":"1748873866-668387000","line":1532,"new":null,"old":null}
{"run_id":"1748873866-668387000","line":1447,"new":null,"old":null}
{"run_id":"1748873866-668387000","line":3389,"new":null,"old":null}
{"run_id":"1748873866-668387000","line":2422,"new":null,"old":null}
{"run_id":"1748873866-668387000","line":3438,"new":null,"old":null}
{"run_id":"1748873866-668387000","line":931,"new":null,"old":null}
{"run_id":"1748873866-668387000","line":2479,"new":null,"old":null}
{"run_id":"1748873866-668387000","line":1830,"new":null,"old":null}
{"run_id":"1748873866-668387000","line":1574,"new":null,"old":null}
{"run_id":"1748873866-668387000","line":1587,"new":null,"old":null}
{"run_id":"1748873866-668387000","line":1674,"new":null,"old":null}
{"run_id":"1748873866-668387000","line":1470,"new":null,"old":null}
{"run_id":"1748873866-668387000","line":2538,"new":null,"old":null}
{"run_id":"1748873866-668387000","line":1603,"new":null,"old":null}
{"run_id":"1748873866-668387000","line":2364,"new":null,"old":null}
{"run_id":"1748873866-668387000","line":5157,"new":null,"old":null}
{"run_id":"1748873866-668387000","line":5179,"new":null,"old":null}
{"run_id":"1748873866-668387000","line":1846,"new":null,"old":null}
{"run_id":"1748873866-668387000","line":1745,"new":null,"old":null}
{"run_id":"1748873866-668387000","line":1758,"new":null,"old":null}
{"run_id":"1748873866-668387000","line":1493,"new":null,"old":null}
{"run_id":"1748873866-668387000","line":1774,"new":null,"old":null}
{"run_id":"1748873866-668387000","line":2793,"new":{"module_name":"core_integration__dataframe","snapshot_name":"count_wildcard_on_window","metadata":{"source":"datafusion/core/tests/dataframe/mod.rs","assertion_line":2793,"expression":"pretty_format_batches(&sql_results).unwrap()"},"snapshot":"+---------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| plan_type     | plan                                                                                                                                                                                                                                                                                                                                                                                                                                                                      |\n+---------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| logical_plan  | Projection: count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING AS count(*) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING                                                                                                                                                                                                                                                                             |\n|               |   WindowAggr: windowExpr=[[count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING]]                                                                                                                                                                                                                                                                                                                                                   |\n|               |     TableScan: t1 projection=[a]                                                                                                                                                                                                                                                                                                                                                                                                                                          |\n| physical_plan | ProjectionExec: expr=[count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING@1 as count(*) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING]                                                                                                                                                                                                                                                                |\n|               |   BoundedWindowAggExec: wdw=[count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING: Ok(Field { name: \"count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING\", data_type: Int64, nullable: false, dict_id: 0, dict_is_ordered: false, metadata: {} }), frame: WindowFrame { units: Range, start_bound: Preceding(UInt32(6)), end_bound: Following(UInt32(2)), is_causal: false }], mode=[Sorted] |\n|               |     SortExec: expr=[a@0 DESC], preserve_partitioning=[false]                                                                                                                                                                                                                                                                                                                                                                                                              |\n|               |       YieldStreamExec child=DataSourceExec                                                                                                                                                                                                                                                                                                                                                                                                                                |\n|               |         DataSourceExec: partitions=1, partition_sizes=[1]                                                                                                                                                                                                                                                                                                                                                                                                                 |\n|               |                                                                                                                                                                                                                                                                                                                                                                                                                                                                           |\n+---------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+"},"old":{"module_name":"core_integration__dataframe","metadata":{},"snapshot":"+---------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| plan_type     | plan                                                                                                                                                                                                                                                                                                                                                                                                                                                                      |\n+---------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| logical_plan  | Projection: count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING AS count(*) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING                                                                                                                                                                                                                                                                             |\n|               |   WindowAggr: windowExpr=[[count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING]]                                                                                                                                                                                                                                                                                                                                                   |\n|               |     TableScan: t1 projection=[a]                                                                                                                                                                                                                                                                                                                                                                                                                                          |\n| physical_plan | ProjectionExec: expr=[count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING@1 as count(*) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING]                                                                                                                                                                                                                                                                |\n|               |   BoundedWindowAggExec: wdw=[count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING: Ok(Field { name: \"count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING\", data_type: Int64, nullable: false, dict_id: 0, dict_is_ordered: false, metadata: {} }), frame: WindowFrame { units: Range, start_bound: Preceding(UInt32(6)), end_bound: Following(UInt32(2)), is_causal: false }], mode=[Sorted] |\n|               |     SortExec: expr=[a@0 DESC], preserve_partitioning=[false]                                                                                                                                                                                                                                                                                                                                                                                                              |\n|               |       DataSourceExec: partitions=1, partition_sizes=[1]                                                                                                                                                                                                                                                                                                                                                                                                                   |\n|               |                                                                                                                                                                                                                                                                                                                                                                                                                                                                           |\n+---------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+"}}
{"run_id":"1748873866-668387000","line":1618,"new":null,"old":null}
{"run_id":"1748873866-668387000","line":1789,"new":null,"old":null}
{"run_id":"1748874092-266512000","line":2793,"new":{"module_name":"core_integration__dataframe","snapshot_name":"count_wildcard_on_window","metadata":{"source":"datafusion/core/tests/dataframe/mod.rs","assertion_line":2793,"expression":"pretty_format_batches(&sql_results).unwrap()"},"snapshot":"+---------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| plan_type     | plan                                                                                                                                                                                                                                                                                                                                                                                                                                                                      |\n+---------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| logical_plan  | Projection: count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING AS count(*) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING                                                                                                                                                                                                                                                                             |\n|               |   WindowAggr: windowExpr=[[count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING]]                                                                                                                                                                                                                                                                                                                                                   |\n|               |     TableScan: t1 projection=[a]                                                                                                                                                                                                                                                                                                                                                                                                                                          |\n| physical_plan | ProjectionExec: expr=[count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING@1 as count(*) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING]                                                                                                                                                                                                                                                                |\n|               |   BoundedWindowAggExec: wdw=[count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING: Ok(Field { name: \"count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING\", data_type: Int64, nullable: false, dict_id: 0, dict_is_ordered: false, metadata: {} }), frame: WindowFrame { units: Range, start_bound: Preceding(UInt32(6)), end_bound: Following(UInt32(2)), is_causal: false }], mode=[Sorted] |\n|               |     SortExec: expr=[a@0 DESC], preserve_partitioning=[false]                                                                                                                                                                                                                                                                                                                                                                                                              |\n|               |       YieldStreamExec child=DataSourceExec                                                                                                                                                                                                                                                                                                                                                                                                                                |\n|               |         DataSourceExec: partitions=1, partition_sizes=[1]                                                                                                                                                                                                                                                                                                                                                                                                                 |\n|               |                                                                                                                                                                                                                                                                                                                                                                                                                                                                           |\n+---------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+"},"old":{"module_name":"core_integration__dataframe","metadata":{},"snapshot":"+---------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| plan_type     | plan                                                                                                                                                                                                                                                                                                                                                                                                                                                                            |\n+---------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| logical_plan  | Projection: count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING AS count(*) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING                                                                                                                                                                                                                                                                                     |\n|               |   WindowAggr: windowExpr=[[count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING]]                                                                                                                                                                                                                                                                                                                                                         |\n|               |     TableScan: t1 projection=[a]                                                                                                                                                                                                                                                                                                                                                                                                                                                |\n| physical_plan | ProjectionExec: expr=[count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING@1 as count(*) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING]                                                                                                                                                                                                                                                                          |\n|               |   BoundedWindowAggExec: wdw=[count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING: Ok(Field { name: \"count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING\", data_type: Int64, nullable: false, dict_id: 0, dict_is_ordered: false, metadata: {} }), frame: WindowFrame { units: Range, start_bound: Preceding(UInt32(6)), end_bound: Following(UInt32(2)), is_causal: false }], mode=[Sorted] |\n|               |     SortExec: expr=[a@0 DESC], preserve_partitioning=[false]                                                                                                                                                                                                                                                                                                                                                                                                                    |\n|               |       YieldStreamExec child=DataSourceExec                                                                                                                                                                                                                                                                                                                                                                                                                                      |\n|               |         DataSourceExec: partitions=1, partition_sizes=[1]                                                                                                                                                                                                                                                                                                                                                                                                                       |\n+---------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+"}}
{"run_id":"1748874158-473190000","line":2793,"new":{"module_name":"core_integration__dataframe","snapshot_name":"count_wildcard_on_window","metadata":{"source":"datafusion/core/tests/dataframe/mod.rs","assertion_line":2793,"expression":"pretty_format_batches(&sql_results).unwrap()"},"snapshot":"+---------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| plan_type     | plan                                                                                                                                                                                                                                                                                                                                                                                                                                                                      |\n+---------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| logical_plan  | Projection: count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING AS count(*) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING                                                                                                                                                                                                                                                                             |\n|               |   WindowAggr: windowExpr=[[count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING]]                                                                                                                                                                                                                                                                                                                                                   |\n|               |     TableScan: t1 projection=[a]                                                                                                                                                                                                                                                                                                                                                                                                                                          |\n| physical_plan | ProjectionExec: expr=[count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING@1 as count(*) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING]                                                                                                                                                                                                                                                                |\n|               |   BoundedWindowAggExec: wdw=[count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING: Ok(Field { name: \"count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING\", data_type: Int64, nullable: false, dict_id: 0, dict_is_ordered: false, metadata: {} }), frame: WindowFrame { units: Range, start_bound: Preceding(UInt32(6)), end_bound: Following(UInt32(2)), is_causal: false }], mode=[Sorted] |\n|               |     SortExec: expr=[a@0 DESC], preserve_partitioning=[false]                                                                                                                                                                                                                                                                                                                                                                                                              |\n|               |       YieldStreamExec child=DataSourceExec                                                                                                                                                                                                                                                                                                                                                                                                                                |\n|               |         DataSourceExec: partitions=1, partition_sizes=[1]                                                                                                                                                                                                                                                                                                                                                                                                                 |\n|               |                                                                                                                                                                                                                                                                                                                                                                                                                                                                           |\n+---------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+"},"old":{"module_name":"core_integration__dataframe","metadata":{},"snapshot":"+---------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| plan_type     | plan                                                                                                                                                                                                                                                                                                                                                                                                                                                                            |\n+---------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| logical_plan  | Projection: count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING AS count(*) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING                                                                                                                                                                                                                                                                                   |\n|               |   WindowAggr: windowExpr=[[count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING]]                                                                                                                                                                                                                                                                                                                                                         |\n|               |     TableScan: t1 projection=[a]                                                                                                                                                                                                                                                                                                                                                                                                                                                |\n| physical_plan | ProjectionExec: expr=[count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING@1 as count(*) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING]                                                                                                                                                                                                                                                                      |\n|               |   BoundedWindowAggExec: wdw=[count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING: Ok(Field { name: \"count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING\", data_type: Int64, nullable: false, dict_id: 0, dict_is_ordered: false, metadata: {} }), frame: WindowFrame { units: Range, start_bound: Preceding(UInt32(6)), end_bound: Following(UInt32(2)), is_causal: false }], mode=[Sorted]       |\n|               |     SortExec: expr=[a@0 DESC], preserve_partitioning=[false]                                                                                                                                                                                                                                                                                                                                                                                                                    |\n|               |       YieldStreamExec child=DataSourceExec                                                                                                                                                                                                                                                                                                                                                                                                                                      |\n|               |         DataSourceExec: partitions=1, partition_sizes=[1]                                                                                                                                                                                                                                                                                                                                                                                                                       |\n+---------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+"}}
{"run_id":"1748874308-762369000","line":2793,"new":{"module_name":"core_integration__dataframe","snapshot_name":"count_wildcard_on_window","metadata":{"source":"datafusion/core/tests/dataframe/mod.rs","assertion_line":2793,"expression":"pretty_format_batches(&sql_results).unwrap()"},"snapshot":"+---------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| plan_type     | plan                                                                                                                                                                                                                                                                                                                                                                                                                                                                      |\n+---------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| logical_plan  | Projection: count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING AS count(*) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING                                                                                                                                                                                                                                                                             |\n|               |   WindowAggr: windowExpr=[[count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING]]                                                                                                                                                                                                                                                                                                                                                   |\n|               |     TableScan: t1 projection=[a]                                                                                                                                                                                                                                                                                                                                                                                                                                          |\n| physical_plan | ProjectionExec: expr=[count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING@1 as count(*) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING]                                                                                                                                                                                                                                                                |\n|               |   BoundedWindowAggExec: wdw=[count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING: Ok(Field { name: \"count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING\", data_type: Int64, nullable: false, dict_id: 0, dict_is_ordered: false, metadata: {} }), frame: WindowFrame { units: Range, start_bound: Preceding(UInt32(6)), end_bound: Following(UInt32(2)), is_causal: false }], mode=[Sorted] |\n|               |     SortExec: expr=[a@0 DESC], preserve_partitioning=[false]                                                                                                                                                                                                                                                                                                                                                                                                              |\n|               |       YieldStreamExec child=DataSourceExec                                                                                                                                                                                                                                                                                                                                                                                                                                |\n|               |         DataSourceExec: partitions=1, partition_sizes=[1]                                                                                                                                                                                                                                                                                                                                                                                                                 |\n|               |                                                                                                                                                                                                                                                                                                                                                                                                                                                                           |\n+---------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+"},"old":{"module_name":"core_integration__dataframe","metadata":{},"snapshot":"+---------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| plan_type     | plan                                                                                                                                                                                                                                                                                                                                                                                                                                                                      |\n+---------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| logical_plan  | Projection: count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING AS count(*) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING                                                                                                                                                                                                                                                                             |\n|               |   WindowAggr: windowExpr=[[count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING]]                                                                                                                                                                                                                                                                                                                                                   |\n|               |     TableScan: t1 projection=[a]                                                                                                                                                                                                                                                                                                                                                                                                                                          |\n| physical_plan | ProjectionExec: expr=[count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING@1 as count(*) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING]                                                                                                                                                                                                                                                                |\n|               |   BoundedWindowAggExec: wdw=[count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING: Ok(Field { name: \\\"count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING\\\", data_type: Int64, nullable: false, dict_id: 0, dict_is_ordered: false, metadata: {} }), frame: WindowFrame { units: Range, start_bound: Preceding(UInt32(6)), end_bound: Following(UInt32(2)), is_causal: false }], mode=[Sorted] |\n|               |     SortExec: expr=[a@0 DESC], preserve_partitioning=[false]                                                                                                                                                                                                                                                                                                                                                                                                              |\n|               |       YieldStreamExec child=DataSourceExec                                                                                                                                                                                                                                                                                                                                                                                                                                |\n|               |         DataSourceExec: partitions=1, partition_sizes=[1]                                                                                                                                                                                                                                                                                                                                                                                                                   |\n|               |                                                                                                                                                                                                                                                                                                                                                                                                                                                                           |\n+---------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+"}}
{"run_id":"1748874553-675455000","line":2793,"new":{"module_name":"core_integration__dataframe","snapshot_name":"count_wildcard_on_window","metadata":{"source":"datafusion/core/tests/dataframe/mod.rs","assertion_line":2793,"expression":"pretty_format_batches(&sql_results).unwrap()"},"snapshot":"+---------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| plan_type     | plan                                                                                                                                                                                                                                                                                                                                                                                                                                                                      |\n+---------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| logical_plan  | Projection: count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING AS count(*) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING                                                                                                                                                                                                                                                                             |\n|               |   WindowAggr: windowExpr=[[count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING]]                                                                                                                                                                                                                                                                                                                                                   |\n|               |     TableScan: t1 projection=[a]                                                                                                                                                                                                                                                                                                                                                                                                                                          |\n| physical_plan | ProjectionExec: expr=[count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING@1 as count(*) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING]                                                                                                                                                                                                                                                                |\n|               |   BoundedWindowAggExec: wdw=[count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING: Ok(Field { name: \"count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING\", data_type: Int64, nullable: false, dict_id: 0, dict_is_ordered: false, metadata: {} }), frame: WindowFrame { units: Range, start_bound: Preceding(UInt32(6)), end_bound: Following(UInt32(2)), is_causal: false }], mode=[Sorted] |\n|               |     SortExec: expr=[a@0 DESC], preserve_partitioning=[false]                                                                                                                                                                                                                                                                                                                                                                                                              |\n|               |       YieldStreamExec child=DataSourceExec                                                                                                                                                                                                                                                                                                                                                                                                                                |\n|               |         DataSourceExec: partitions=1, partition_sizes=[1]                                                                                                                                                                                                                                                                                                                                                                                                                 |\n|               |                                                                                                                                                                                                                                                                                                                                                                                                                                                                           |\n+---------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+"},"old":{"module_name":"core_integration__dataframe","metadata":{},"snapshot":"+---------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| plan_type     | plan                                                                                                                                                                                                                                                                                                                                                                                                                                                                        |\n+---------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| logical_plan  | Projection: count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING AS count(*) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING                                                                                                                                                                                                                                                                               |\n|               |   WindowAggr: windowExpr=[[count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING]]                                                                                                                                                                                                                                                                                                                                                     |\n|               |     TableScan: t1 projection=[a]                                                                                                                                                                                                                                                                                                                                                                                                                                            |\n| physical_plan | ProjectionExec: expr=[count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING@1 as count(*) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING]                                                                                                                                                                                                                                                                  |\n|               |   BoundedWindowAggExec: wdw=[count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING: Ok(Field { name: \\\"count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING\\\", data_type: Int64, nullable: false, dict_id: 0, dict_is_ordered: false, metadata: {} }), frame: WindowFrame { units: Range, start_bound: Preceding(UInt32(6)), end_bound: Following(UInt32(2)), is_causal: false }], mode=[Sorted] |\n|               |     SortExec: expr=[a@0 DESC], preserve_partitioning=[false]                                                                                                                                                                                                                                                                                                                                                                                                                |\n|               |       YieldStreamExec child=DataSourceExec                                                                                                                                                                                                                                                                                                                                                                                                                                  |\n|               |         DataSourceExec: partitions=1, partition_sizes=[1]                                                                                                                                                                                                                                                                                                                                                                                                                   |\n|               |                                                                                                                                                                                                                                                                                                                                                                                                                                                                             |\n+---------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+"}}
{"run_id":"1748874806-77292000","line":2793,"new":{"module_name":"core_integration__dataframe","snapshot_name":"count_wildcard_on_window","metadata":{"source":"datafusion/core/tests/dataframe/mod.rs","assertion_line":2793,"expression":"pretty_format_batches(&sql_results).unwrap()"},"snapshot":"+---------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| plan_type     | plan                                                                                                                                                                                                                                                                                                                                                                                                                                                                      |\n+---------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| logical_plan  | Projection: count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING AS count(*) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING                                                                                                                                                                                                                                                                             |\n|               |   WindowAggr: windowExpr=[[count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING]]                                                                                                                                                                                                                                                                                                                                                   |\n|               |     TableScan: t1 projection=[a]                                                                                                                                                                                                                                                                                                                                                                                                                                          |\n| physical_plan | ProjectionExec: expr=[count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING@1 as count(*) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING]                                                                                                                                                                                                                                                                |\n|               |   BoundedWindowAggExec: wdw=[count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING: Ok(Field { name: \"count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING\", data_type: Int64, nullable: false, dict_id: 0, dict_is_ordered: false, metadata: {} }), frame: WindowFrame { units: Range, start_bound: Preceding(UInt32(6)), end_bound: Following(UInt32(2)), is_causal: false }], mode=[Sorted] |\n|               |     SortExec: expr=[a@0 DESC], preserve_partitioning=[false]                                                                                                                                                                                                                                                                                                                                                                                                              |\n|               |       YieldStreamExec child=DataSourceExec                                                                                                                                                                                                                                                                                                                                                                                                                                |\n|               |         DataSourceExec: partitions=1, partition_sizes=[1]                                                                                                                                                                                                                                                                                                                                                                                                                 |\n|               |                                                                                                                                                                                                                                                                                                                                                                                                                                                                           |\n+---------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+"},"old":{"module_name":"core_integration__dataframe","metadata":{},"snapshot":"+---------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| plan_type     | plan                                                                                                                                                                                                                                                                                                                                                                                                                                                                       |\n+---------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| logical_plan  | Projection: count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING AS count(*) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING                                                                                                                                                                                                                                                                              |\n|               |   WindowAggr: windowExpr=[[count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING]]                                                                                                                                                                                                                                                                                                                                                    |\n|               |     TableScan: t1 projection=[a]                                                                                                                                                                                                                                                                                                                                                                                                                                           |\n| physical_plan | ProjectionExec: expr=[count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING@1 as count(*) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING]                                                                                                                                                                                                                                                                 |\n|               |   BoundedWindowAggExec: wdw=[count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING: Ok(Field { name: \\\"count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING\\\", data_type: Int64, nullable: false, dict_id: 0, dict_is_ordered: false, metadata: {} }), frame: WindowFrame { units: Range, start_bound: Preceding(UInt32(6)), end_bound: Following(UInt32(2)), is_causal: false }], mode=[Sorted]|\n|               |     SortExec: expr=[a@0 DESC], preserve_partitioning=[false]                                                                                                                                                                                                                                                                                                                                                                                                               |\n|               |       YieldStreamExec child=DataSourceExec                                                                                                                                                                                                                                                                                                                                                                                                                                 |\n|               |         DataSourceExec: partitions=1, partition_sizes=[1]                                                                                                                                                                                                                                                                                                                                                                                                                  |\n|               |                                                                                                                                                                                                                                                                                                                                                                                                                                                                            |\n+---------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+"}}
{"run_id":"1748874842-394238000","line":2793,"new":{"module_name":"core_integration__dataframe","snapshot_name":"count_wildcard_on_window","metadata":{"source":"datafusion/core/tests/dataframe/mod.rs","assertion_line":2793,"expression":"pretty_format_batches(&sql_results).unwrap()"},"snapshot":"+---------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| plan_type     | plan                                                                                                                                                                                                                                                                                                                                                                                                                                                                      |\n+---------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| logical_plan  | Projection: count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING AS count(*) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING                                                                                                                                                                                                                                                                             |\n|               |   WindowAggr: windowExpr=[[count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING]]                                                                                                                                                                                                                                                                                                                                                   |\n|               |     TableScan: t1 projection=[a]                                                                                                                                                                                                                                                                                                                                                                                                                                          |\n| physical_plan | ProjectionExec: expr=[count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING@1 as count(*) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING]                                                                                                                                                                                                                                                                |\n|               |   BoundedWindowAggExec: wdw=[count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING: Ok(Field { name: \"count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING\", data_type: Int64, nullable: false, dict_id: 0, dict_is_ordered: false, metadata: {} }), frame: WindowFrame { units: Range, start_bound: Preceding(UInt32(6)), end_bound: Following(UInt32(2)), is_causal: false }], mode=[Sorted] |\n|               |     SortExec: expr=[a@0 DESC], preserve_partitioning=[false]                                                                                                                                                                                                                                                                                                                                                                                                              |\n|               |       YieldStreamExec child=DataSourceExec                                                                                                                                                                                                                                                                                                                                                                                                                                |\n|               |         DataSourceExec: partitions=1, partition_sizes=[1]                                                                                                                                                                                                                                                                                                                                                                                                                 |\n|               |                                                                                                                                                                                                                                                                                                                                                                                                                                                                           |\n+---------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+"},"old":{"module_name":"core_integration__dataframe","metadata":{},"snapshot":"+---------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| plan_type     | plan                                                                                                                                                                                                                                                                                                                                                                                                                                                                       |\n+---------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| logical_plan  | Projection: count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING AS count(*) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING                                                                                                                                                                                                                                                                              |\n|               |   WindowAggr: windowExpr=[[count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING]]                                                                                                                                                                                                                                                                                                                                                    |\n|               |     TableScan: t1 projection=[a]                                                                                                                                                                                                                                                                                                                                                                                                                                           |\n| physical_plan | ProjectionExec: expr=[count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING@1 as count(*) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING]                                                                                                                                                                                                                                                                 |\n|               |   BoundedWindowAggExec: wdw=[count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING: Ok(Field { name: \\\"count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING\\\", data_type: Int64, nullable: false, dict_id: 0, dict_is_ordered: false, metadata: {} }), frame: WindowFrame { units: Range, start_bound: Preceding(UInt32(6)), end_bound: Following(UInt32(2)), is_causal: false }], mode=[Sorted]|\n|               |     SortExec: expr=[a@0 DESC], preserve_partitioning=[false]                                                                                                                                                                                                                                                                                                                                                                                                               |\n|               |       YieldStreamExec child=DataSourceExec                                                                                                                                                                                                                                                                                                                                                                                                                                 |\n|               |         DataSourceExec: partitions=1, partition_sizes=[1]                                                                                                                                                                                                                                                                                                                                                                                                                  |\n|               |                                                                                                                                                                                                                                                                                                                                                                                                                                                                            |\n+---------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+"}}
{"run_id":"1748874912-217000","line":2793,"new":{"module_name":"core_integration__dataframe","snapshot_name":"count_wildcard_on_window","metadata":{"source":"datafusion/core/tests/dataframe/mod.rs","assertion_line":2793,"expression":"pretty_format_batches(&sql_results).unwrap()"},"snapshot":"+---------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| plan_type     | plan                                                                                                                                                                                                                                                                                                                                                                                                                                                                      |\n+---------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| logical_plan  | Projection: count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING AS count(*) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING                                                                                                                                                                                                                                                                             |\n|               |   WindowAggr: windowExpr=[[count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING]]                                                                                                                                                                                                                                                                                                                                                   |\n|               |     TableScan: t1 projection=[a]                                                                                                                                                                                                                                                                                                                                                                                                                                          |\n| physical_plan | ProjectionExec: expr=[count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING@1 as count(*) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING]                                                                                                                                                                                                                                                                |\n|               |   BoundedWindowAggExec: wdw=[count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING: Ok(Field { name: \"count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING\", data_type: Int64, nullable: false, dict_id: 0, dict_is_ordered: false, metadata: {} }), frame: WindowFrame { units: Range, start_bound: Preceding(UInt32(6)), end_bound: Following(UInt32(2)), is_causal: false }], mode=[Sorted] |\n|               |     SortExec: expr=[a@0 DESC], preserve_partitioning=[false]                                                                                                                                                                                                                                                                                                                                                                                                              |\n|               |       YieldStreamExec child=DataSourceExec                                                                                                                                                                                                                                                                                                                                                                                                                                |\n|               |         DataSourceExec: partitions=1, partition_sizes=[1]                                                                                                                                                                                                                                                                                                                                                                                                                 |\n|               |                                                                                                                                                                                                                                                                                                                                                                                                                                                                           |\n+---------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+"},"old":{"module_name":"core_integration__dataframe","metadata":{},"snapshot":"+---------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| plan_type     | plan                                                                                                                                                                                                                                                                                                                                                                                                                                                                       |\n+---------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| logical_plan  | Projection: count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING AS count(*) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING                                                                                                                                                                                                                                                                              |\n|               |   WindowAggr: windowExpr=[[count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING]]                                                                                                                                                                                                                                                                                                                                                    |\n|               |     TableScan: t1 projection=[a]                                                                                                                                                                                                                                                                                                                                                                                                                                           |\n| physical_plan | ProjectionExec: expr=[count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING@1 as count(*) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING]                                                                                                                                                                                                                                                                 |\n|               |   BoundedWindowAggExec: wdw=[count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING: Ok(Field { name: \\\"count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING\\\", data_type: Int64, nullable: false, dict_id: 0, dict_is_ordered: false, metadata: {} }), frame: WindowFrame { units: Range, start_bound: Preceding(UInt32(6)), end_bound: Following(UInt32(2)), is_causal: false }], mode=[Sorted]|\n|               |     SortExec: expr=[a@0 DESC], preserve_partitioning=[false]                                                                                                                                                                                                                                                                                                                                                                                                               |\n|               |       YieldStreamExec child=DataSourceExec                                                                                                                                                                                                                                                                                                                                                                                                                                 |\n|               |         DataSourceExec: partitions=1, partition_sizes=[1]                                                                                                                                                                                                                                                                                                                                                                                                                  |\n|               |                                                                                                                                                                                                                                                                                                                                                                                                                                                                            |\n+---------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+"}}
{"run_id":"1748874955-173216000","line":5503,"new":null,"old":null}
{"run_id":"1748874955-173216000","line":1920,"new":null,"old":null}
{"run_id":"1748874955-173216000","line":2022,"new":null,"old":null}
{"run_id":"1748874955-173216000","line":4570,"new":null,"old":null}
{"run_id":"1748874955-173216000","line":511,"new":null,"old":null}
{"run_id":"1748874955-173216000","line":5522,"new":null,"old":null}
{"run_id":"1748874955-173216000","line":5561,"new":null,"old":null}
{"run_id":"1748874955-173216000","line":5574,"new":null,"old":null}
{"run_id":"1748874955-173216000","line":2029,"new":null,"old":null}
{"run_id":"1748874955-173216000","line":5430,"new":null,"old":null}
{"run_id":"1748874955-173216000","line":5448,"new":null,"old":null}
{"run_id":"1748874955-173216000","line":480,"new":null,"old":null}
{"run_id":"1748874955-173216000","line":5463,"new":null,"old":null}
{"run_id":"1748874955-173216000","line":448,"new":null,"old":null}
{"run_id":"1748874955-173216000","line":3234,"new":null,"old":null}
{"run_id":"1748874955-173216000","line":3216,"new":null,"old":null}
{"run_id":"1748874955-173216000","line":3279,"new":null,"old":null}
{"run_id":"1748874955-173216000","line":1243,"new":null,"old":null}
{"run_id":"1748874955-173216000","line":1197,"new":null,"old":null}
{"run_id":"1748874955-173216000","line":1170,"new":null,"old":null}
{"run_id":"1748874955-173216000","line":1219,"new":null,"old":null}
{"run_id":"1748874955-173216000","line":1224,"new":null,"old":null}
{"run_id":"1748874955-173216000","line":3519,"new":null,"old":null}
{"run_id":"1748874955-173216000","line":3611,"new":null,"old":null}
{"run_id":"1748874955-173216000","line":3564,"new":null,"old":null}
{"run_id":"1748874955-173216000","line":3530,"new":null,"old":null}
{"run_id":"1748874955-173216000","line":2310,"new":null,"old":null}
{"run_id":"1748874955-173216000","line":3252,"new":null,"old":null}
{"run_id":"1748874955-173216000","line":3623,"new":null,"old":null}
{"run_id":"1748874955-173216000","line":3577,"new":null,"old":null}
{"run_id":"1748874955-173216000","line":342,"new":null,"old":null}
{"run_id":"1748874955-173216000","line":3198,"new":null,"old":null}
{"run_id":"1748874955-173216000","line":3180,"new":null,"old":null}
{"run_id":"1748874955-173216000","line":3315,"new":null,"old":null}
{"run_id":"1748874955-173216000","line":5347,"new":null,"old":null}
{"run_id":"1748874955-173216000","line":874,"new":null,"old":null}
{"run_id":"1748874955-173216000","line":5365,"new":null,"old":null}
{"run_id":"1748874955-173216000","line":5380,"new":null,"old":null}
{"run_id":"1748874955-173216000","line":3093,"new":null,"old":null}
{"run_id":"1748874955-173216000","line":3140,"new":null,"old":null}
{"run_id":"1748874955-173216000","line":571,"new":null,"old":null}
{"run_id":"1748874955-173216000","line":582,"new":null,"old":null}
{"run_id":"1748874955-173216000","line":5660,"new":null,"old":null}
{"run_id":"1748874955-173216000","line":663,"new":null,"old":null}
{"run_id":"1748874955-173216000","line":613,"new":null,"old":null}
{"run_id":"1748874955-173216000","line":5671,"new":null,"old":null}
{"run_id":"1748874955-173216000","line":715,"new":null,"old":null}
{"run_id":"1748874955-173216000","line":678,"new":null,"old":null}
{"run_id":"1748874955-173216000","line":5733,"new":null,"old":null}
{"run_id":"1748874955-173216000","line":628,"new":null,"old":null}
{"run_id":"1748874955-173216000","line":5738,"new":null,"old":null}
{"run_id":"1748874955-173216000","line":728,"new":null,"old":null}
{"run_id":"1748874955-173216000","line":5709,"new":null,"old":null}
{"run_id":"1748874955-173216000","line":5768,"new":null,"old":null}
{"run_id":"1748874955-173216000","line":4891,"new":null,"old":null}
{"run_id":"1748874955-173216000","line":5780,"new":null,"old":null}
{"run_id":"1748874955-173216000","line":5796,"new":null,"old":null}
{"run_id":"1748874955-173216000","line":756,"new":null,"old":null}
{"run_id":"1748874955-173216000","line":1389,"new":null,"old":null}
{"run_id":"1748874955-173216000","line":1405,"new":null,"old":null}
{"run_id":"1748874955-173216000","line":839,"new":null,"old":null}
{"run_id":"1748874955-173216000","line":2719,"new":null,"old":null}
{"run_id":"1748874955-173216000","line":2864,"new":null,"old":null}
{"run_id":"1748874955-173216000","line":4986,"new":null,"old":null}
{"run_id":"1748874955-173216000","line":2638,"new":null,"old":null}
{"run_id":"1748874955-173216000","line":4998,"new":null,"old":null}
{"run_id":"1748874955-173216000","line":5016,"new":null,"old":null}
{"run_id":"1748874955-173216000","line":5024,"new":null,"old":null}
{"run_id":"1748874955-173216000","line":2890,"new":null,"old":null}
{"run_id":"1748874955-173216000","line":5055,"new":null,"old":null}
{"run_id":"1748874955-173216000","line":4922,"new":null,"old":null}
{"run_id":"1748874955-173216000","line":2575,"new":null,"old":null}
{"run_id":"1748874955-173216000","line":2602,"new":null,"old":null}
{"run_id":"1748874955-173216000","line":4935,"new":null,"old":null}
{"run_id":"1748874955-173216000","line":4955,"new":null,"old":null}
{"run_id":"1748874955-173216000","line":5068,"new":null,"old":null}
{"run_id":"1748874955-173216000","line":5088,"new":null,"old":null}
{"run_id":"1748874955-173216000","line":4965,"new":null,"old":null}
{"run_id":"1748874955-173216000","line":2758,"new":null,"old":null}
{"run_id":"1748874955-173216000","line":2919,"new":null,"old":null}
{"run_id":"1748874955-173216000","line":5097,"new":null,"old":null}
{"run_id":"1748874955-173216000","line":2684,"new":null,"old":null}
{"run_id":"1748874955-173216000","line":1129,"new":null,"old":null}
{"run_id":"1748874955-173216000","line":1042,"new":null,"old":null}
{"run_id":"1748874955-173216000","line":5984,"new":null,"old":null}
{"run_id":"1748874955-173216000","line":5956,"new":null,"old":null}
{"run_id":"1748874955-173216000","line":2979,"new":null,"old":null}
{"run_id":"1748874955-173216000","line":6001,"new":null,"old":null}
{"run_id":"1748874955-173216000","line":6079,"new":null,"old":null}
{"run_id":"1748874955-173216000","line":1890,"new":null,"old":null}
{"run_id":"1748874955-173216000","line":4487,"new":null,"old":null}
{"run_id":"1748874955-173216000","line":3350,"new":null,"old":null}
{"run_id":"1748874955-173216000","line":4521,"new":null,"old":null}
{"run_id":"1748874955-173216000","line":1061,"new":null,"old":null}
{"run_id":"1748874955-173216000","line":1013,"new":null,"old":null}
{"run_id":"1748874955-173216000","line":5596,"new":null,"old":null}
{"run_id":"1748874955-173216000","line":4166,"new":null,"old":null}
{"run_id":"1748874955-173216000","line":4066,"new":null,"old":null}
{"run_id":"1748874955-173216000","line":3823,"new":null,"old":null}
{"run_id":"1748874955-173216000","line":3845,"new":null,"old":null}
{"run_id":"1748874955-173216000","line":1096,"new":null,"old":null}
{"run_id":"1748874955-173216000","line":3643,"new":null,"old":null}
{"run_id":"1748874955-173216000","line":3864,"new":null,"old":null}
{"run_id":"1748874955-173216000","line":4194,"new":null,"old":null}
{"run_id":"1748874955-173216000","line":4087,"new":null,"old":null}
{"run_id":"1748874955-173216000","line":3659,"new":null,"old":null}
{"run_id":"1748874955-173216000","line":3943,"new":null,"old":null}
{"run_id":"1748874955-173216000","line":5628,"new":null,"old":null}
{"run_id":"1748874955-173216000","line":3965,"new":null,"old":null}
{"run_id":"1748874955-173216000","line":4218,"new":null,"old":null}
{"run_id":"1748874955-173216000","line":3889,"new":null,"old":null}
{"run_id":"1748874955-173216000","line":4014,"new":null,"old":null}
{"run_id":"1748874955-173216000","line":3773,"new":null,"old":null}
{"run_id":"1748874955-173216000","line":3911,"new":null,"old":null}
{"run_id":"1748874955-173216000","line":803,"new":null,"old":null}
{"run_id":"1748874955-173216000","line":4361,"new":null,"old":null}
{"run_id":"1748874955-173216000","line":3801,"new":null,"old":null}
{"run_id":"1748874955-173216000","line":4035,"new":null,"old":null}
{"run_id":"1748874955-173216000","line":4392,"new":null,"old":null}
{"run_id":"1748874955-173216000","line":4434,"new":null,"old":null}
{"run_id":"1748874955-173216000","line":4262,"new":null,"old":null}
{"run_id":"1748874955-173216000","line":3685,"new":null,"old":null}
{"run_id":"1748874955-173216000","line":4295,"new":null,"old":null}
{"run_id":"1748874955-173216000","line":1986,"new":null,"old":null}
{"run_id":"1748874955-173216000","line":3713,"new":null,"old":null}
{"run_id":"1748874955-173216000","line":4306,"new":null,"old":null}
{"run_id":"1748874955-173216000","line":1710,"new":null,"old":null}
{"run_id":"1748874955-173216000","line":1532,"new":null,"old":null}
{"run_id":"1748874955-173216000","line":1447,"new":null,"old":null}
{"run_id":"1748874955-173216000","line":3442,"new":null,"old":null}
{"run_id":"1748874955-173216000","line":2422,"new":null,"old":null}
{"run_id":"1748874955-173216000","line":1830,"new":null,"old":null}
{"run_id":"1748874955-173216000","line":3393,"new":null,"old":null}
{"run_id":"1748874955-173216000","line":2479,"new":null,"old":null}
{"run_id":"1748874955-173216000","line":931,"new":null,"old":null}
{"run_id":"1748874955-173216000","line":1674,"new":null,"old":null}
{"run_id":"1748874955-173216000","line":1470,"new":null,"old":null}
{"run_id":"1748874955-173216000","line":2364,"new":null,"old":null}
{"run_id":"1748874955-173216000","line":5161,"new":null,"old":null}
{"run_id":"1748874955-173216000","line":1574,"new":null,"old":null}
{"run_id":"1748874955-173216000","line":1846,"new":null,"old":null}
{"run_id":"1748874955-173216000","line":1587,"new":null,"old":null}
{"run_id":"1748874955-173216000","line":2538,"new":null,"old":null}
{"run_id":"1748874955-173216000","line":5183,"new":null,"old":null}
{"run_id":"1748874955-173216000","line":1603,"new":null,"old":null}
{"run_id":"1748874955-173216000","line":1745,"new":null,"old":null}
{"run_id":"1748874955-173216000","line":1758,"new":null,"old":null}
{"run_id":"1748874955-173216000","line":1493,"new":null,"old":null}
{"run_id":"1748874955-173216000","line":1774,"new":null,"old":null}
{"run_id":"1748874955-173216000","line":2793,"new":{"module_name":"core_integration__dataframe","snapshot_name":"count_wildcard_on_window","metadata":{"source":"datafusion/core/tests/dataframe/mod.rs","assertion_line":2793,"expression":"pretty_format_batches(&sql_results).unwrap()"},"snapshot":"+---------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| plan_type     | plan                                                                                                                                                                                                                                                                                                                                                                                                                                                                      |\n+---------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| logical_plan  | Projection: count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING AS count(*) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING                                                                                                                                                                                                                                                                             |\n|               |   WindowAggr: windowExpr=[[count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING]]                                                                                                                                                                                                                                                                                                                                                   |\n|               |     TableScan: t1 projection=[a]                                                                                                                                                                                                                                                                                                                                                                                                                                          |\n| physical_plan | ProjectionExec: expr=[count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING@1 as count(*) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING]                                                                                                                                                                                                                                                                |\n|               |   BoundedWindowAggExec: wdw=[count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING: Ok(Field { name: \"count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING\", data_type: Int64, nullable: false, dict_id: 0, dict_is_ordered: false, metadata: {} }), frame: WindowFrame { units: Range, start_bound: Preceding(UInt32(6)), end_bound: Following(UInt32(2)), is_causal: false }], mode=[Sorted] |\n|               |     SortExec: expr=[a@0 DESC], preserve_partitioning=[false]                                                                                                                                                                                                                                                                                                                                                                                                              |\n|               |       YieldStreamExec child=DataSourceExec                                                                                                                                                                                                                                                                                                                                                                                                                                |\n|               |         DataSourceExec: partitions=1, partition_sizes=[1]                                                                                                                                                                                                                                                                                                                                                                                                                 |\n|               |                                                                                                                                                                                                                                                                                                                                                                                                                                                                           |\n+---------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+"},"old":{"module_name":"core_integration__dataframe","metadata":{},"snapshot":"+---------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| plan_type     | plan                                                                                                                                                                                                                                                                                                                                                                                                                                                                       |\n+---------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| logical_plan  | Projection: count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING AS count(*) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING                                                                                                                                                                                                                                                                              |\n|               |   WindowAggr: windowExpr=[[count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING]]                                                                                                                                                                                                                                                                                                                                                    |\n|               |     TableScan: t1 projection=[a]                                                                                                                                                                                                                                                                                                                                                                                                                                           |\n| physical_plan | ProjectionExec: expr=[count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING@1 as count(*) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING]                                                                                                                                                                                                                                                                 |\n|               |   BoundedWindowAggExec: wdw=[count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING: Ok(Field { name: \\\"count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING\\\", data_type: Int64, nullable: false, dict_id: 0, dict_is_ordered: false, metadata: {} }), frame: WindowFrame { units: Range, start_bound: Preceding(UInt32(6)), end_bound: Following(UInt32(2)), is_causal: false }], mode=[Sorted]|\n|               |     SortExec: expr=[a@0 DESC], preserve_partitioning=[false]                                                                                                                                                                                                                                                                                                                                                                                                               |\n|               |       YieldStreamExec child=DataSourceExec                                                                                                                                                                                                                                                                                                                                                                                                                                 |\n|               |         DataSourceExec: partitions=1, partition_sizes=[1]                                                                                                                                                                                                                                                                                                                                                                                                                  |\n|               |                                                                                                                                                                                                                                                                                                                                                                                                                                                                            |\n+---------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+"}}
{"run_id":"1748874955-173216000","line":1618,"new":null,"old":null}
{"run_id":"1748874955-173216000","line":1789,"new":null,"old":null}
{"run_id":"1748875050-86297000","line":2793,"new":{"module_name":"core_integration__dataframe","snapshot_name":"count_wildcard_on_window","metadata":{"source":"datafusion/core/tests/dataframe/mod.rs","assertion_line":2793,"expression":"pretty_format_batches(&sql_results).unwrap()"},"snapshot":"+---------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| plan_type     | plan                                                                                                                                                                                                                                                                                                                                                                                                                                                                      |\n+---------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| logical_plan  | Projection: count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING AS count(*) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING                                                                                                                                                                                                                                                                             |\n|               |   WindowAggr: windowExpr=[[count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING]]                                                                                                                                                                                                                                                                                                                                                   |\n|               |     TableScan: t1 projection=[a]                                                                                                                                                                                                                                                                                                                                                                                                                                          |\n| physical_plan | ProjectionExec: expr=[count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING@1 as count(*) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING]                                                                                                                                                                                                                                                                |\n|               |   BoundedWindowAggExec: wdw=[count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING: Ok(Field { name: \"count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING\", data_type: Int64, nullable: false, dict_id: 0, dict_is_ordered: false, metadata: {} }), frame: WindowFrame { units: Range, start_bound: Preceding(UInt32(6)), end_bound: Following(UInt32(2)), is_causal: false }], mode=[Sorted] |\n|               |     SortExec: expr=[a@0 DESC], preserve_partitioning=[false]                                                                                                                                                                                                                                                                                                                                                                                                              |\n|               |       YieldStreamExec child=DataSourceExec                                                                                                                                                                                                                                                                                                                                                                                                                                |\n|               |         DataSourceExec: partitions=1, partition_sizes=[1]                                                                                                                                                                                                                                                                                                                                                                                                                 |\n|               |                                                                                                                                                                                                                                                                                                                                                                                                                                                                           |\n+---------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+"},"old":{"module_name":"core_integration__dataframe","metadata":{},"snapshot":"+---------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| plan_type     | plan                                                                                                                                                                                                                                                                                                                                                                                                                                                                       |\n+---------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| logical_plan  | Projection: count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING AS count(*) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING                                                                                                                                                                                                                                                                              |\n|               |   WindowAggr: windowExpr=[[count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING]]                                                                                                                                                                                                                                                                                                                                                    |\n|               |     TableScan: t1 projection=[a]                                                                                                                                                                                                                                                                                                                                                                                                                                           |\n| physical_plan | ProjectionExec: expr=[count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING@1 as count(*) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING]                                                                                                                                                                                                                                                                 |\n|               |   BoundedWindowAggExec: wdw=[count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING: Ok(Field { name: \\\"count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING\\\", data_type: Int64, nullable: false, dict_id: 0, dict_is_ordered: false, metadata: {} }), frame: WindowFrame { units: Range, start_bound: Preceding(UInt32(6)), end_bound: Following(UInt32(2)), is_causal: false }], mode=[Sorted]|\n|               |     SortExec: expr=[a@0 DESC], preserve_partitioning=[false]                                                                                                                                                                                                                                                                                                                                                                                                               |\n|               |       YieldStreamExec child=DataSourceExec                                                                                                                                                                                                                                                                                                                                                                                                                                 |\n|               |         DataSourceExec: partitions=1, partition_sizes=[1]                                                                                                                                                                                                                                                                                                                                                                                                                  |\n|               |                                                                                                                                                                                                                                                                                                                                                                                                                                                                            |\n+---------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+"}}
{"run_id":"1748875102-610079000","line":2793,"new":{"module_name":"core_integration__dataframe","snapshot_name":"count_wildcard_on_window","metadata":{"source":"datafusion/core/tests/dataframe/mod.rs","assertion_line":2793,"expression":"pretty_format_batches(&sql_results).unwrap()"},"snapshot":"+---------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| plan_type     | plan                                                                                                                                                                                                                                                                                                                                                                                                                                                                      |\n+---------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| logical_plan  | Projection: count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING AS count(*) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING                                                                                                                                                                                                                                                                             |\n|               |   WindowAggr: windowExpr=[[count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING]]                                                                                                                                                                                                                                                                                                                                                   |\n|               |     TableScan: t1 projection=[a]                                                                                                                                                                                                                                                                                                                                                                                                                                          |\n| physical_plan | ProjectionExec: expr=[count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING@1 as count(*) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING]                                                                                                                                                                                                                                                                |\n|               |   BoundedWindowAggExec: wdw=[count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING: Ok(Field { name: \"count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING\", data_type: Int64, nullable: false, dict_id: 0, dict_is_ordered: false, metadata: {} }), frame: WindowFrame { units: Range, start_bound: Preceding(UInt32(6)), end_bound: Following(UInt32(2)), is_causal: false }], mode=[Sorted] |\n|               |     SortExec: expr=[a@0 DESC], preserve_partitioning=[false]                                                                                                                                                                                                                                                                                                                                                                                                              |\n|               |       YieldStreamExec child=DataSourceExec                                                                                                                                                                                                                                                                                                                                                                                                                                |\n|               |         DataSourceExec: partitions=1, partition_sizes=[1]                                                                                                                                                                                                                                                                                                                                                                                                                 |\n|               |                                                                                                                                                                                                                                                                                                                                                                                                                                                                           |\n+---------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+"},"old":{"module_name":"core_integration__dataframe","metadata":{},"snapshot":"+---------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| plan_type     | plan                                                                                                                                                                                                                                                                                                                                                                                                                                                                       |\n+---------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| logical_plan  | Projection: count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING AS count(*) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING                                                                                                                                                                                                                                                                              |\n|               |   WindowAggr: windowExpr=[[count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING]]                                                                                                                                                                                                                                                                                                                                                    |\n|               |     TableScan: t1 projection=[a]                                                                                                                                                                                                                                                                                                                                                                                                                                           |\n| physical_plan | ProjectionExec: expr=[count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING@1 as count(*) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING]                                                                                                                                                                                                                                                                 |\n|               |   BoundedWindowAggExec: wdw=[count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING: Ok(Field { name: \\\"count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING\\\", data_type: Int64, nullable: false, dict_id: 0, dict_is_ordered: false, metadata: {} }), frame: WindowFrame { units: Range, start_bound: Preceding(UInt32(6)), end_bound: Following(UInt32(2)), is_causal: false }], mode=[Sorted]|\n|               |     SortExec: expr=[a@0 DESC], preserve_partitioning=[false]                                                                                                                                                                                                                                                                                                                                                                                                               |\n|               |       YieldStreamExec child=DataSourceExec                                                                                                                                                                                                                                                                                                                                                                                                                                 |\n|               |         DataSourceExec: partitions=1, partition_sizes=[1]                                                                                                                                                                                                                                                                                                                                                                                                                  |\n|               |                                                                                                                                                                                                                                                                                                                                                                                                                                                                            |\n+---------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+"}}
{"run_id":"1748875163-578276000","line":2793,"new":{"module_name":"core_integration__dataframe","snapshot_name":"count_wildcard_on_window","metadata":{"source":"datafusion/core/tests/dataframe/mod.rs","assertion_line":2793,"expression":"pretty_format_batches(&sql_results).unwrap()"},"snapshot":"+---------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| plan_type     | plan                                                                                                                                                                                                                                                                                                                                                                                                                                                                      |\n+---------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| logical_plan  | Projection: count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING AS count(*) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING                                                                                                                                                                                                                                                                             |\n|               |   WindowAggr: windowExpr=[[count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING]]                                                                                                                                                                                                                                                                                                                                                   |\n|               |     TableScan: t1 projection=[a]                                                                                                                                                                                                                                                                                                                                                                                                                                          |\n| physical_plan | ProjectionExec: expr=[count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING@1 as count(*) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING]                                                                                                                                                                                                                                                                |\n|               |   BoundedWindowAggExec: wdw=[count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING: Ok(Field { name: \"count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING\", data_type: Int64, nullable: false, dict_id: 0, dict_is_ordered: false, metadata: {} }), frame: WindowFrame { units: Range, start_bound: Preceding(UInt32(6)), end_bound: Following(UInt32(2)), is_causal: false }], mode=[Sorted] |\n|               |     SortExec: expr=[a@0 DESC], preserve_partitioning=[false]                                                                                                                                                                                                                                                                                                                                                                                                              |\n|               |       YieldStreamExec child=DataSourceExec                                                                                                                                                                                                                                                                                                                                                                                                                                |\n|               |         DataSourceExec: partitions=1, partition_sizes=[1]                                                                                                                                                                                                                                                                                                                                                                                                                 |\n|               |                                                                                                                                                                                                                                                                                                                                                                                                                                                                           |\n+---------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+"},"old":{"module_name":"core_integration__dataframe","metadata":{},"snapshot":"+---------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| plan_type     | plan                                                                                                                                                                                                                                                                                                                                                                                                                                                                       |\n+---------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| logical_plan  | Projection: count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING AS count(*) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING                                                                                                                                                                                                                                                                              |\n|               |   WindowAggr: windowExpr=[[count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING]]                                                                                                                                                                                                                                                                                                                                                    |\n|               |     TableScan: t1 projection=[a]                                                                                                                                                                                                                                                                                                                                                                                                                                           |\n| physical_plan | ProjectionExec: expr=[count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING@1 as count(*) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING]                                                                                                                                                                                                                                                                 |\n|               |   BoundedWindowAggExec: wdw=[count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING: Ok(Field { name: \\\"count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING\\\", data_type: Int64, nullable: false, dict_id: 0, dict_is_ordered: false, metadata: {} }), frame: WindowFrame { units: Range, start_bound: Preceding(UInt32(6)), end_bound: Following(UInt32(2)), is_causal: false }], mode=[Sorted]|\n|               |     SortExec: expr=[a@0 DESC], preserve_partitioning=[false]                                                                                                                                                                                                                                                                                                                                                                                                               |\n|               |       YieldStreamExec child=DataSourceExec                                                                                                                                                                                                                                                                                                                                                                                                                                 |\n|               |         DataSourceExec: partitions=1, partition_sizes=[1]                                                                                                                                                                                                                                                                                                                                                                                                                  |\n|               |                                                                                                                                                                                                                                                                                                                                                                                                                                                                            |\n+---------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+"}}
{"run_id":"1748875364-204310000","line":2793,"new":{"module_name":"core_integration__dataframe","snapshot_name":"count_wildcard_on_window","metadata":{"source":"datafusion/core/tests/dataframe/mod.rs","assertion_line":2793,"expression":"pretty_format_batches(&sql_results).unwrap()"},"snapshot":"+---------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| plan_type     | plan                                                                                                                                                                                                                                                                                                                                                                                                                                                                      |\n+---------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| logical_plan  | Projection: count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING AS count(*) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING                                                                                                                                                                                                                                                                             |\n|               |   WindowAggr: windowExpr=[[count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING]]                                                                                                                                                                                                                                                                                                                                                   |\n|               |     TableScan: t1 projection=[a]                                                                                                                                                                                                                                                                                                                                                                                                                                          |\n| physical_plan | ProjectionExec: expr=[count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING@1 as count(*) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING]                                                                                                                                                                                                                                                                |\n|               |   BoundedWindowAggExec: wdw=[count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING: Ok(Field { name: \"count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING\", data_type: Int64, nullable: false, dict_id: 0, dict_is_ordered: false, metadata: {} }), frame: WindowFrame { units: Range, start_bound: Preceding(UInt32(6)), end_bound: Following(UInt32(2)), is_causal: false }], mode=[Sorted] |\n|               |     SortExec: expr=[a@0 DESC], preserve_partitioning=[false]                                                                                                                                                                                                                                                                                                                                                                                                              |\n|               |       YieldStreamExec child=DataSourceExec                                                                                                                                                                                                                                                                                                                                                                                                                                |\n|               |         DataSourceExec: partitions=1, partition_sizes=[1]                                                                                                                                                                                                                                                                                                                                                                                                                 |\n|               |                                                                                                                                                                                                                                                                                                                                                                                                                                                                           |\n+---------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+"},"old":{"module_name":"core_integration__dataframe","metadata":{},"snapshot":"+---------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| plan_type     | plan                                                                                                                                                                                                                                                                                                                                                                                                                                                                       |\n+---------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| logical_plan  | Projection: count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING AS count(*) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING                                                                                                                                                                                                                                                                              |\n|               |   WindowAggr: windowExpr=[[count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING]]                                                                                                                                                                                                                                                                                                                                                    |\n|               |     TableScan: t1 projection=[a]                                                                                                                                                                                                                                                                                                                                                                                                                                           |\n| physical_plan | ProjectionExec: expr=[count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING@1 as count(*) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING]                                                                                                                                                                                                                                                                 |\n|               |   BoundedWindowAggExec: wdw=[count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING: Ok(Field { name: \\\"count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING\\\", data_type: Int64, nullable: false, dict_id: 0, dict_is_ordered: false, metadata: {} }), frame: WindowFrame { units: Range, start_bound: Preceding(UInt32(6)), end_bound: Following(UInt32(2)), is_causal: false }], mode=[Sorted]|\n|               |     SortExec: expr=[a@0 DESC], preserve_partitioning=[false]                                                                                                                                                                                                                                                                                                                                                                                                               |\n|               |       YieldStreamExec child=DataSourceExec                                                                                                                                                                                                                                                                                                                                                                                                                                 |\n|               |         DataSourceExec: partitions=1, partition_sizes=[1]                                                                                                                                                                                                                                                                                                                                                                                                                  |\n|               |                                                                                                                                                                                                                                                                                                                                                                                                                                                                            |\n+---------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+"}}
{"run_id":"1748875457-236822000","line":2793,"new":{"module_name":"core_integration__dataframe","snapshot_name":"count_wildcard_on_window","metadata":{"source":"datafusion/core/tests/dataframe/mod.rs","assertion_line":2793,"expression":"pretty_format_batches(&sql_results).unwrap()"},"snapshot":"+---------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| plan_type     | plan                                                                                                                                                                                                                                                                                                                                                                                                                                                                      |\n+---------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| logical_plan  | Projection: count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING AS count(*) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING                                                                                                                                                                                                                                                                             |\n|               |   WindowAggr: windowExpr=[[count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING]]                                                                                                                                                                                                                                                                                                                                                   |\n|               |     TableScan: t1 projection=[a]                                                                                                                                                                                                                                                                                                                                                                                                                                          |\n| physical_plan | ProjectionExec: expr=[count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING@1 as count(*) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING]                                                                                                                                                                                                                                                                |\n|               |   BoundedWindowAggExec: wdw=[count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING: Ok(Field { name: \"count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING\", data_type: Int64, nullable: false, dict_id: 0, dict_is_ordered: false, metadata: {} }), frame: WindowFrame { units: Range, start_bound: Preceding(UInt32(6)), end_bound: Following(UInt32(2)), is_causal: false }], mode=[Sorted] |\n|               |     SortExec: expr=[a@0 DESC], preserve_partitioning=[false]                                                                                                                                                                                                                                                                                                                                                                                                              |\n|               |       YieldStreamExec child=DataSourceExec                                                                                                                                                                                                                                                                                                                                                                                                                                |\n|               |         DataSourceExec: partitions=1, partition_sizes=[1]                                                                                                                                                                                                                                                                                                                                                                                                                 |\n|               |                                                                                                                                                                                                                                                                                                                                                                                                                                                                           |\n+---------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+"},"old":{"module_name":"core_integration__dataframe","metadata":{},"snapshot":"+---------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| plan_type     | plan                                                                                                                                                                                                                                                                                                                                                                                                                                                                       |\n+---------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| logical_plan  | Projection: count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING AS count(*) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING                                                                                                                                                                                                                                                                              |\n|               |   WindowAggr: windowExpr=[[count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING]]                                                                                                                                                                                                                                                                                                                                                    |\n|               |     TableScan: t1 projection=[a]                                                                                                                                                                                                                                                                                                                                                                                                                                           |\n| physical_plan | ProjectionExec: expr=[count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING@1 as count(*) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING]                                                                                                                                                                                                                                                                 |\n|               |   BoundedWindowAggExec: wdw=[count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING: Ok(Field { name: \"count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING\", data_type: Int64, nullable: false, dict_id: 0, dict_is_ordered: false, metadata: {} }), frame: WindowFrame { units: Range, start_bound: Preceding(UInt32(6)), end_bound: Following(UInt32(2)), is_causal: false }], mode=[Sorted]  |\n|               |     SortExec: expr=[a@0 DESC], preserve_partitioning=[false]                                                                                                                                                                                                                                                                                                                                                                                                               |\n|               |       YieldStreamExec child=DataSourceExec                                                                                                                                                                                                                                                                                                                                                                                                                                 |\n|               |         DataSourceExec: partitions=1, partition_sizes=[1]                                                                                                                                                                                                                                                                                                                                                                                                                  |\n|               |                                                                                                                                                                                                                                                                                                                                                                                                                                                                            |\n+---------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+"}}
{"run_id":"1748875515-685334000","line":2795,"new":{"module_name":"core_integration__dataframe","snapshot_name":"count_wildcard_on_window","metadata":{"source":"datafusion/core/tests/dataframe/mod.rs","assertion_line":2795,"expression":"pretty_format_batches(&sql_results).unwrap()"},"snapshot":"+---------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| plan_type     | plan                                                                                                                                                                                                                                                                                                                                                                                                                                                                      |\n+---------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| logical_plan  | Projection: count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING AS count(*) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING                                                                                                                                                                                                                                                                             |\n|               |   WindowAggr: windowExpr=[[count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING]]                                                                                                                                                                                                                                                                                                                                                   |\n|               |     TableScan: t1 projection=[a]                                                                                                                                                                                                                                                                                                                                                                                                                                          |\n| physical_plan | ProjectionExec: expr=[count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING@1 as count(*) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING]                                                                                                                                                                                                                                                                |\n|               |   BoundedWindowAggExec: wdw=[count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING: Ok(Field { name: \"count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING\", data_type: Int64, nullable: false, dict_id: 0, dict_is_ordered: false, metadata: {} }), frame: WindowFrame { units: Range, start_bound: Preceding(UInt32(6)), end_bound: Following(UInt32(2)), is_causal: false }], mode=[Sorted] |\n|               |     SortExec: expr=[a@0 DESC], preserve_partitioning=[false]                                                                                                                                                                                                                                                                                                                                                                                                              |\n|               |       YieldStreamExec child=DataSourceExec                                                                                                                                                                                                                                                                                                                                                                                                                                |\n|               |         DataSourceExec: partitions=1, partition_sizes=[1]                                                                                                                                                                                                                                                                                                                                                                                                                 |\n|               |                                                                                                                                                                                                                                                                                                                                                                                                                                                                           |\n+---------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+"},"old":{"module_name":"core_integration__dataframe","metadata":{},"snapshot":"+---------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| plan_type     | plan                                                                                                                                                                                                                                                                                                                                                                                                                                                                       |\n+---------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| logical_plan  | Projection: count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING AS count(*) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING                                                                                                                                                                                                                                                                              |\n|               |   WindowAggr: windowExpr=[[count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING]]                                                                                                                                                                                                                                                                                                                                                    |\n|               |     TableScan: t1 projection=[a]                                                                                                                                                                                                                                                                                                                                                                                                                                           |\n| physical_plan | ProjectionExec: expr=[count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING@1 as count(*) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING]                                                                                                                                                                                                                                                                 |\n|               |   BoundedWindowAggExec: wdw=[count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING: Ok(Field { name: \"count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING\", data_type: Int64, nullable: false, dict_id: 0, dict_is_ordered: false, metadata: {} }), frame: WindowFrame { units: Range, start_bound: Preceding(UInt32(6)), end_bound: Following(UInt32(2)), is_causal: false }], mode=[Sorted]  |\n|               |     SortExec: expr=[a@0 DESC], preserve_partitioning=[false]                                                                                                                                                                                                                                                                                                                                                                                                               |\n|               |       YieldStreamExec child=DataSourceExec                                                                                                                                                                                                                                                                                                                                                                                                                                 |\n|               |         DataSourceExec: partitions=1, partition_sizes=[1]                                                                                                                                                                                                                                                                                                                                                                                                                  |\n|               |                                                                                                                                                                                                                                                                                                                                                                                                                                                                            |\n+---------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+"}}
{"run_id":"1748875568-55246000","line":2795,"new":null,"old":null}
{"run_id":"1748875568-55246000","line":2831,"new":{"module_name":"core_integration__dataframe","snapshot_name":"count_wildcard_on_window-2","metadata":{"source":"datafusion/core/tests/dataframe/mod.rs","assertion_line":2831,"expression":"pretty_format_batches(&df_results).unwrap()"},"snapshot":"+---------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| plan_type     | plan                                                                                                                                                                                                                                                                                                                                                                                                                                                                      |\n+---------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| logical_plan  | Projection: count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING                                                                                                                                                                                                                                                                                                                                                                    |\n|               |   WindowAggr: windowExpr=[[count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING]]                                                                                                                                                                                                                                                                                                                                                   |\n|               |     TableScan: t1 projection=[a]                                                                                                                                                                                                                                                                                                                                                                                                                                          |\n| physical_plan | ProjectionExec: expr=[count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING@1 as count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING]                                                                                                                                                                                                                                                         |\n|               |   BoundedWindowAggExec: wdw=[count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING: Ok(Field { name: \"count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING\", data_type: Int64, nullable: false, dict_id: 0, dict_is_ordered: false, metadata: {} }), frame: WindowFrame { units: Range, start_bound: Preceding(UInt32(6)), end_bound: Following(UInt32(2)), is_causal: false }], mode=[Sorted] |\n|               |     SortExec: expr=[a@0 DESC], preserve_partitioning=[false]                                                                                                                                                                                                                                                                                                                                                                                                              |\n|               |       YieldStreamExec child=DataSourceExec                                                                                                                                                                                                                                                                                                                                                                                                                                |\n|               |         DataSourceExec: partitions=1, partition_sizes=[1]                                                                                                                                                                                                                                                                                                                                                                                                                 |\n|               |                                                                                                                                                                                                                                                                                                                                                                                                                                                                           |\n+---------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+"},"old":{"module_name":"core_integration__dataframe","metadata":{},"snapshot":"+---------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| plan_type     | plan                                                                                                                                                                                                                                                                                                                                                                                                                                                                      |\n+---------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| logical_plan  | Projection: count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING                                                                                                                                                                                                                                                                                                                                                                    |\n|               |   WindowAggr: windowExpr=[[count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING]]                                                                                                                                                                                                                                                                                                                                                   |\n|               |     TableScan: t1 projection=[a]                                                                                                                                                                                                                                                                                                                                                                                                                                          |\n| physical_plan | ProjectionExec: expr=[count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING@1 as count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING]                                                                                                                                                                                                                                                         |\n|               |   BoundedWindowAggExec: wdw=[count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING: Ok(Field { name: \"count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING\", data_type: Int64, nullable: false, dict_id: 0, dict_is_ordered: false, metadata: {} }), frame: WindowFrame { units: Range, start_bound: Preceding(UInt32(6)), end_bound: Following(UInt32(2)), is_causal: false }], mode=[Sorted] |\n|               |     SortExec: expr=[a@0 DESC], preserve_partitioning=[false]                                                                                                                                                                                                                                                                                                                                                                                                              |\n|               |       YieldStreamExec                                                                                                                                                                                                                                                                                                                                                                                                                                                     |\n|               |         DataSourceExec: partitions=1, partition_sizes=[1]                                                                                                                                                                                                                                                                                                                                                                                                                 |\n|               |                                                                                                                                                                                                                                                                                                                                                                                                                                                                           |\n+---------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+"}}
{"run_id":"1748875609-922318000","line":2793,"new":null,"old":null}
{"run_id":"1748875609-922318000","line":2832,"new":{"module_name":"core_integration__dataframe","snapshot_name":"count_wildcard_on_window-2","metadata":{"source":"datafusion/core/tests/dataframe/mod.rs","assertion_line":2832,"expression":"pretty_format_batches(&df_results).unwrap()"},"snapshot":"+---------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| plan_type     | plan                                                                                                                                                                                                                                                                                                                                                                                                                                                                      |\n+---------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| logical_plan  | Projection: count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING                                                                                                                                                                                                                                                                                                                                                                    |\n|               |   WindowAggr: windowExpr=[[count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING]]                                                                                                                                                                                                                                                                                                                                                   |\n|               |     TableScan: t1 projection=[a]                                                                                                                                                                                                                                                                                                                                                                                                                                          |\n| physical_plan | ProjectionExec: expr=[count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING@1 as count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING]                                                                                                                                                                                                                                                         |\n|               |   BoundedWindowAggExec: wdw=[count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING: Ok(Field { name: \"count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING\", data_type: Int64, nullable: false, dict_id: 0, dict_is_ordered: false, metadata: {} }), frame: WindowFrame { units: Range, start_bound: Preceding(UInt32(6)), end_bound: Following(UInt32(2)), is_causal: false }], mode=[Sorted] |\n|               |     SortExec: expr=[a@0 DESC], preserve_partitioning=[false]                                                                                                                                                                                                                                                                                                                                                                                                              |\n|               |       YieldStreamExec child=DataSourceExec                                                                                                                                                                                                                                                                                                                                                                                                                                |\n|               |         DataSourceExec: partitions=1, partition_sizes=[1]                                                                                                                                                                                                                                                                                                                                                                                                                 |\n|               |                                                                                                                                                                                                                                                                                                                                                                                                                                                                           |\n+---------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+"},"old":{"module_name":"core_integration__dataframe","metadata":{},"snapshot":"+---------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| plan_type     | plan                                                                                                                                                                                                                                                                                                                                                                                                                                                                      |\n+---------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| logical_plan  | Projection: count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING                                                                                                                                                                                                                                                                                                                                                                    |\n|               |   WindowAggr: windowExpr=[[count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING]]                                                                                                                                                                                                                                                                                                                                                   |\n|               |     TableScan: t1 projection=[a]                                                                                                                                                                                                                                                                                                                                                                                                                                          |\n| physical_plan | ProjectionExec: expr=[count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING@1 as count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING]                                                                                                                                                                                                                                                         |\n|               |   BoundedWindowAggExec: wdw=[count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING: Ok(Field { name: \"count(Int64(1)) ORDER BY [t1.a DESC NULLS FIRST] RANGE BETWEEN 6 PRECEDING AND 2 FOLLOWING\", data_type: Int64, nullable: false, dict_id: 0, dict_is_ordered: false, metadata: {} }), frame: WindowFrame { units: Range, start_bound: Preceding(UInt32(6)), end_bound: Following(UInt32(2)), is_causal: false }], mode=[Sorted] |\n|               |     SortExec: expr=[a@0 DESC], preserve_partitioning=[false]                                                                                                                                                                                                                                                                                                                                                                                                              |\n|               |       YieldStreamExec                                                                                                                                                                                                                                                                                                                                                                                                                                                     |\n|               |         DataSourceExec: partitions=1, partition_sizes=[1]                                                                                                                                                                                                                                                                                                                                                                                                                 |\n|               |                                                                                                                                                                                                                                                                                                                                                                                                                                                                           |\n+---------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+"}}
{"run_id":"1748875647-407491000","line":2793,"new":null,"old":null}
{"run_id":"1748875647-407491000","line":2832,"new":null,"old":null}
{"run_id":"1748876842-95102000","line":5499,"new":null,"old":null}
{"run_id":"1748876842-95102000","line":5518,"new":null,"old":null}
{"run_id":"1748876842-95102000","line":5557,"new":null,"old":null}
{"run_id":"1748876842-95102000","line":5570,"new":null,"old":null}
{"run_id":"1748876842-95102000","line":511,"new":null,"old":null}
{"run_id":"1748876842-95102000","line":2022,"new":null,"old":null}
{"run_id":"1748876842-95102000","line":1920,"new":null,"old":null}
{"run_id":"1748876842-95102000","line":4566,"new":null,"old":null}
{"run_id":"1748876842-95102000","line":5426,"new":null,"old":null}
{"run_id":"1748876842-95102000","line":2029,"new":null,"old":null}
{"run_id":"1748876842-95102000","line":5444,"new":null,"old":null}
{"run_id":"1748876842-95102000","line":5459,"new":null,"old":null}
{"run_id":"1748876842-95102000","line":480,"new":null,"old":null}
{"run_id":"1748876842-95102000","line":448,"new":null,"old":null}
{"run_id":"1748876842-95102000","line":3230,"new":null,"old":null}
{"run_id":"1748876842-95102000","line":3212,"new":null,"old":null}
{"run_id":"1748876842-95102000","line":3275,"new":null,"old":null}
{"run_id":"1748876842-95102000","line":1243,"new":null,"old":null}
{"run_id":"1748876842-95102000","line":1197,"new":null,"old":null}
{"run_id":"1748876842-95102000","line":1219,"new":null,"old":null}
{"run_id":"1748876842-95102000","line":1224,"new":null,"old":null}
{"run_id":"1748876842-95102000","line":3515,"new":null,"old":null}
{"run_id":"1748876842-95102000","line":1170,"new":null,"old":null}
{"run_id":"1748876842-95102000","line":3526,"new":null,"old":null}
{"run_id":"1748876842-95102000","line":3607,"new":null,"old":null}
{"run_id":"1748876842-95102000","line":3560,"new":null,"old":null}
{"run_id":"1748876842-95102000","line":2310,"new":null,"old":null}
{"run_id":"1748876842-95102000","line":3619,"new":null,"old":null}
{"run_id":"1748876842-95102000","line":3248,"new":null,"old":null}
{"run_id":"1748876842-95102000","line":3573,"new":null,"old":null}
{"run_id":"1748876842-95102000","line":3311,"new":null,"old":null}
{"run_id":"1748876842-95102000","line":342,"new":null,"old":null}
{"run_id":"1748876842-95102000","line":3176,"new":null,"old":null}
{"run_id":"1748876842-95102000","line":3194,"new":null,"old":null}
{"run_id":"1748876842-95102000","line":3136,"new":null,"old":null}
{"run_id":"1748876842-95102000","line":874,"new":null,"old":null}
{"run_id":"1748876842-95102000","line":571,"new":null,"old":null}
{"run_id":"1748876842-95102000","line":5343,"new":null,"old":null}
{"run_id":"1748876842-95102000","line":582,"new":null,"old":null}
{"run_id":"1748876842-95102000","line":3089,"new":null,"old":null}
{"run_id":"1748876842-95102000","line":613,"new":null,"old":null}
{"run_id":"1748876842-95102000","line":5361,"new":null,"old":null}
{"run_id":"1748876842-95102000","line":628,"new":null,"old":null}
{"run_id":"1748876842-95102000","line":5729,"new":null,"old":null}
{"run_id":"1748876842-95102000","line":5734,"new":null,"old":null}
{"run_id":"1748876842-95102000","line":5376,"new":null,"old":null}
{"run_id":"1748876842-95102000","line":715,"new":null,"old":null}
{"run_id":"1748876842-95102000","line":5656,"new":null,"old":null}
{"run_id":"1748876842-95102000","line":5667,"new":null,"old":null}
{"run_id":"1748876842-95102000","line":663,"new":null,"old":null}
{"run_id":"1748876842-95102000","line":728,"new":null,"old":null}
{"run_id":"1748876842-95102000","line":678,"new":null,"old":null}
{"run_id":"1748876842-95102000","line":4887,"new":null,"old":null}
{"run_id":"1748876842-95102000","line":5705,"new":null,"old":null}
{"run_id":"1748876842-95102000","line":5764,"new":null,"old":null}
{"run_id":"1748876842-95102000","line":756,"new":null,"old":null}
{"run_id":"1748876842-95102000","line":5776,"new":null,"old":null}
{"run_id":"1748876842-95102000","line":5792,"new":null,"old":null}
{"run_id":"1748876842-95102000","line":1389,"new":null,"old":null}
{"run_id":"1748876842-95102000","line":1405,"new":null,"old":null}
{"run_id":"1748876842-95102000","line":2719,"new":null,"old":null}
{"run_id":"1748876842-95102000","line":2575,"new":null,"old":null}
{"run_id":"1748876842-95102000","line":2602,"new":null,"old":null}
{"run_id":"1748876842-95102000","line":839,"new":null,"old":null}
{"run_id":"1748876842-95102000","line":2862,"new":null,"old":null}
{"run_id":"1748876842-95102000","line":2758,"new":null,"old":null}
{"run_id":"1748876842-95102000","line":2638,"new":null,"old":null}
{"run_id":"1748876842-95102000","line":2888,"new":null,"old":null}
{"run_id":"1748876842-95102000","line":4982,"new":null,"old":null}
{"run_id":"1748876842-95102000","line":4994,"new":null,"old":null}
{"run_id":"1748876842-95102000","line":5012,"new":null,"old":null}
{"run_id":"1748876842-95102000","line":4918,"new":null,"old":null}
{"run_id":"1748876842-95102000","line":5051,"new":null,"old":null}
{"run_id":"1748876842-95102000","line":5020,"new":null,"old":null}
{"run_id":"1748876842-95102000","line":2793,"new":null,"old":null}
{"run_id":"1748876842-95102000","line":4931,"new":null,"old":null}
{"run_id":"1748876842-95102000","line":4951,"new":null,"old":null}
{"run_id":"1748876842-95102000","line":5064,"new":null,"old":null}
{"run_id":"1748876842-95102000","line":5084,"new":null,"old":null}
{"run_id":"1748876842-95102000","line":4961,"new":null,"old":null}
{"run_id":"1748876842-95102000","line":2828,"new":null,"old":null}
{"run_id":"1748876842-95102000","line":2684,"new":null,"old":null}
{"run_id":"1748876842-95102000","line":5093,"new":null,"old":null}
{"run_id":"1748876842-95102000","line":1129,"new":null,"old":null}
{"run_id":"1748876842-95102000","line":1042,"new":null,"old":null}
{"run_id":"1748876842-95102000","line":5952,"new":null,"old":null}
{"run_id":"1748876842-95102000","line":2917,"new":null,"old":null}
{"run_id":"1748876842-95102000","line":5980,"new":null,"old":null}
{"run_id":"1748876842-95102000","line":5997,"new":null,"old":null}
{"run_id":"1748876842-95102000","line":3346,"new":null,"old":null}
{"run_id":"1748876842-95102000","line":6075,"new":null,"old":null}
{"run_id":"1748876842-95102000","line":1096,"new":null,"old":null}
{"run_id":"1748876842-95102000","line":1061,"new":null,"old":null}
{"run_id":"1748876842-95102000","line":2976,"new":null,"old":null}
{"run_id":"1748876842-95102000","line":4483,"new":null,"old":null}
{"run_id":"1748876842-95102000","line":4517,"new":null,"old":null}
{"run_id":"1748876842-95102000","line":1013,"new":null,"old":null}
{"run_id":"1748876842-95102000","line":4062,"new":null,"old":null}
{"run_id":"1748876842-95102000","line":5592,"new":null,"old":null}
{"run_id":"1748876842-95102000","line":4083,"new":null,"old":null}
{"run_id":"1748876842-95102000","line":4162,"new":null,"old":null}
{"run_id":"1748876842-95102000","line":5624,"new":null,"old":null}
{"run_id":"1748876842-95102000","line":1890,"new":null,"old":null}
{"run_id":"1748876842-95102000","line":3639,"new":null,"old":null}
{"run_id":"1748876842-95102000","line":4190,"new":null,"old":null}
{"run_id":"1748876842-95102000","line":3819,"new":null,"old":null}
{"run_id":"1748876842-95102000","line":3769,"new":null,"old":null}
{"run_id":"1748876842-95102000","line":3885,"new":null,"old":null}
{"run_id":"1748876842-95102000","line":3841,"new":null,"old":null}
{"run_id":"1748876842-95102000","line":3907,"new":null,"old":null}
{"run_id":"1748876842-95102000","line":3860,"new":null,"old":null}
{"run_id":"1748876842-95102000","line":3655,"new":null,"old":null}
{"run_id":"1748876842-95102000","line":3797,"new":null,"old":null}
{"run_id":"1748876842-95102000","line":4214,"new":null,"old":null}
{"run_id":"1748876842-95102000","line":3939,"new":null,"old":null}
{"run_id":"1748876842-95102000","line":4010,"new":null,"old":null}
{"run_id":"1748876842-95102000","line":4357,"new":null,"old":null}
{"run_id":"1748876842-95102000","line":3961,"new":null,"old":null}
{"run_id":"1748876842-95102000","line":4031,"new":null,"old":null}
{"run_id":"1748876842-95102000","line":3681,"new":null,"old":null}
{"run_id":"1748876842-95102000","line":4388,"new":null,"old":null}
{"run_id":"1748876842-95102000","line":4430,"new":null,"old":null}
{"run_id":"1748876842-95102000","line":4258,"new":null,"old":null}
{"run_id":"1748876842-95102000","line":4291,"new":null,"old":null}
{"run_id":"1748876842-95102000","line":3709,"new":null,"old":null}
{"run_id":"1748876842-95102000","line":803,"new":null,"old":null}
{"run_id":"1748876842-95102000","line":4302,"new":null,"old":null}
{"run_id":"1748876842-95102000","line":1710,"new":null,"old":null}
{"run_id":"1748876842-95102000","line":1986,"new":null,"old":null}
{"run_id":"1748876842-95102000","line":1447,"new":null,"old":null}
{"run_id":"1748876842-95102000","line":2422,"new":null,"old":null}
{"run_id":"1748876842-95102000","line":1532,"new":null,"old":null}
{"run_id":"1748876842-95102000","line":2479,"new":null,"old":null}
{"run_id":"1748876842-95102000","line":3389,"new":null,"old":null}
{"run_id":"1748876842-95102000","line":1674,"new":null,"old":null}
{"run_id":"1748876842-95102000","line":1830,"new":null,"old":null}
{"run_id":"1748876842-95102000","line":1574,"new":null,"old":null}
{"run_id":"1748876842-95102000","line":1587,"new":null,"old":null}
{"run_id":"1748876842-95102000","line":931,"new":null,"old":null}
{"run_id":"1748876842-95102000","line":1603,"new":null,"old":null}
{"run_id":"1748876842-95102000","line":3438,"new":null,"old":null}
{"run_id":"1748876842-95102000","line":1470,"new":null,"old":null}
{"run_id":"1748876842-95102000","line":2364,"new":null,"old":null}
{"run_id":"1748876842-95102000","line":2538,"new":null,"old":null}
{"run_id":"1748876842-95102000","line":5157,"new":null,"old":null}
{"run_id":"1748876842-95102000","line":1745,"new":null,"old":null}
{"run_id":"1748876842-95102000","line":1758,"new":null,"old":null}
{"run_id":"1748876842-95102000","line":1846,"new":null,"old":null}
{"run_id":"1748876842-95102000","line":5179,"new":null,"old":null}
{"run_id":"1748876842-95102000","line":1774,"new":null,"old":null}
{"run_id":"1748876842-95102000","line":1493,"new":null,"old":null}
{"run_id":"1748876842-95102000","line":1618,"new":null,"old":null}
{"run_id":"1748876842-95102000","line":1789,"new":null,"old":null}
