# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at

#   http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

# create test data
statement ok
create table foo (a int, b int) as values (1, 2), (3, 4), (5, 6), (null, null), (6, null), (null, 7);

# CASE WHEN with condition
query T
SELECT CASE a WHEN 1 THEN 'one' WHEN 3 THEN 'three' ELSE '?' END FROM foo
----
one
three
?
?
?
?

# CASE WHEN with no condition
query I
SELECT CASE WHEN a > 2 THEN a ELSE b END FROM foo
----
2
3
5
NULL
6
7

# column or explicit null
query I
SELECT CASE WHEN a > 2 THEN b ELSE null END FROM foo
----
NULL
4
6
NULL
NULL
NULL

# column or implicit null
query I
SELECT CASE WHEN a > 2 THEN b END FROM foo
----
NULL
4
6
NULL
NULL
NULL

# column or implicit null (no nulls)
query I
SELECT CASE WHEN NULLIF(NVL(a, 0) >= 0, FALSE) THEN b END FROM foo
----
2
4
6
NULL
NULL
7

# column or implicit null (all nulls)
query I
SELECT CASE WHEN NULLIF(NVL(a, 0) >= 0, TRUE) THEN b END FROM foo
----
NULL
NULL
NULL
NULL
NULL
NULL

# scalar or scalar (string)
query T
SELECT CASE WHEN a > 2 THEN 'even' ELSE 'odd' END FROM foo
----
odd
even
even
odd
even
odd

# scalar or scalar (int)
query I
SELECT CASE WHEN a > 2 THEN 1 ELSE 0 END FROM foo
----
0
1
1
0
1
0

# predicate binary expression with scalars (does not make much sense because the expression in
# this case is always false, so this expression could be rewritten as a literal 0 during planning
query I
SELECT CASE WHEN 1 > 2 THEN 1 ELSE 0 END FROM foo
----
0
0
0
0
0
0

# predicate using boolean literal (does not make much sense because the expression in
# this case is always false, so this expression could be rewritten as a literal 0 during planning
query I
SELECT CASE WHEN false THEN 1 ELSE 0 END FROM foo
----
0
0
0
0
0
0

# test then value type coercion
# List(Utf8) will be casted to List(Int64)
query ?
SELECT CASE 1 WHEN 1 THEN ['1', '2', '3'] WHEN 2 THEN [1, 2, 3] ELSE null END;
----
[1, 2, 3]

query ?
SELECT CASE 1 WHEN 1 THEN [[1,2], [2,4]] WHEN 2 THEN [['1','2'], ['2','4']] ELSE null END;
----
[[1, 2], [2, 4]]

query ?
SELECT CASE 1 WHEN 1 THEN [1,2,3] WHEN 2 THEN arrow_cast([1,2,3], 'LargeList(Int64)') WHEN 3 THEN arrow_cast([1,2,3], 'FixedSizeList(3, Int32)') ELSE null END;
----
[1, 2, 3]

query ?
SELECT CASE 1 WHEN 1 THEN [[1,2], [2,4]] WHEN 2 THEN arrow_cast([[1,2], [2,4]], 'LargeList(LargeList(Int64))') WHEN 3 THEN arrow_cast([[1,2], [2,4]], 'FixedSizeList(2, FixedSizeList(2, Int32))') ELSE null END;
----
[[1, 2], [2, 4]]

query ?
SELECT CASE 1 WHEN 1 THEN [1,2,3] WHEN 2 THEN arrow_cast(['1','2','3'], 'LargeList(Utf8)') WHEN 3 THEN arrow_cast(['1','2','3'], 'FixedSizeList(3, Utf8)') ELSE null END;
----
[1, 2, 3]

query ?
SELECT CASE 1 WHEN 1 THEN [[1,2], [2,4]] WHEN 2 THEN arrow_cast([['1','2'], ['2','4']], 'LargeList(LargeList(Utf8))') WHEN 3 THEN arrow_cast([['1','2'], ['2','4']], 'FixedSizeList(2, FixedSizeList(2, Utf8))') ELSE null END;
----
[[1, 2], [2, 4]]

query ?
SELECT CASE 1 WHEN 1 THEN arrow_cast([1,2,3], 'LargeList(Int64)') WHEN 2 THEN arrow_cast(['1','2','3'], 'LargeList(Utf8)') ELSE null END;
----
[1, 2, 3]

query ?
SELECT CASE 1 WHEN 1 THEN arrow_cast([1, 2], 'FixedSizeList(2, Int64)') WHEN 2 THEN arrow_cast(['1', '2', '3'], 'FixedSizeList(3, Utf8)') ELSE null END;
----
[1, 2]

query error DataFusion error: type_coercion
SELECT CASE 1 WHEN 1 THEN [1,2,3] WHEN 2 THEN 'test' ELSE null END;

# test case when type coercion
query I
SELECT CASE [1,2,3] WHEN arrow_cast([1,2,3], 'LargeList(Int64)') THEN 1 ELSE 0 END;
----
1

query I
SELECT CASE [1,2,3] WHEN arrow_cast(['1','2','3'], 'LargeList(Int64)') THEN 1 ELSE 0 END;
----
1

query I
SELECT CASE arrow_cast([1,2,3], 'LargeList(Int64)') WHEN [1,2,3] THEN 1 ELSE 0 END;
----
1

query I
SELECT CASE [[1,2],[2,4]] WHEN arrow_cast([[1,2],[2,4]], 'LargeList(LargeList(Int64))') THEN 1 ELSE 0 END;
----
1

query I
SELECT CASE arrow_cast([1,2,3], 'FixedSizeList(3, Int64)') WHEN [1,2,3] THEN 1 ELSE 0 END;
----
1

query error DataFusion error: type_coercion
SELECT CASE [1,2,3] WHEN 'test' THEN 1 ELSE 0 END;

query I
SELECT CASE arrow_cast([1,2], 'FixedSizeList(2, Int64)') WHEN arrow_cast([1,2,3], 'FixedSizeList(3, Int64)') THEN 1 ELSE 0 END;
----
0

query I
SELECT CASE arrow_cast([1,2], 'FixedSizeList(2, Int64)') WHEN arrow_cast(['1','2','3'], 'FixedSizeList(3, Utf8)') THEN 1 ELSE 0 END;
----
0

query I
SELECT CASE arrow_cast(['1','2'], 'FixedSizeList(2, Utf8)') WHEN arrow_cast([1,2,3], 'FixedSizeList(3, Int64)') THEN 1 ELSE 0 END;
----
0

query I
SELECT CASE arrow_cast([1,2,3], 'FixedSizeList(3, Int64)') WHEN arrow_cast([1,2,3], 'FixedSizeList(3, Int64)') THEN 1 ELSE 0 END;
----
1

# CASE WHEN with single predicate and two non-trivial branches (expr or expr usage)
query I
SELECT CASE WHEN a < 5 THEN a + b ELSE b - NVL(a, 0) END FROM foo
----
3
7
1
NULL
NULL
7

# Reproducer for
# https://github.com/apache/datafusion/issues/14099
query I
SELECT - 79 * + 91 * - COUNT ( * ) * + - 2 * + - NULLIF ( - 49, - COALESCE ( - + 69, - COALESCE ( + COALESCE ( - 20, ( - 18 ) * + COUNT ( * ) + - 93, - CASE 51 WHEN + COUNT ( * ) + 28 THEN 0 ELSE + 29 * + CASE ( 50 ) WHEN - ( - ( CASE WHEN NOT + 37 IS NULL THEN + COUNT ( * ) END ) ) THEN NULL WHEN - 46 + 87 * - 28 THEN 85 WHEN - COUNT ( * ) THEN NULL END END ), COUNT ( * ) - 39 ) * + 22 ) / - COUNT ( * ) )
----
-704522


query B
select case when true then false end from foo;
----
false
false
false
false
false
false

query I
select case when true then a end from foo;
----
1
3
5
NULL
6
NULL

query I
select case when false then a end from foo;
----
NULL
NULL
NULL
NULL
NULL
NULL

query I
select case when null then a end from foo;
----
NULL
NULL
NULL
NULL
NULL
NULL


query B
select case when a=1 then false end from foo;
----
false
NULL
NULL
NULL
NULL
NULL

query IBB
SELECT c,
    CASE WHEN c > 0 THEN true END AS c1,
    CASE WHEN c > 0 THEN true ELSE false END AS c2
FROM (VALUES (1), (0), (-1), (NULL)) AS t(c)
----
1 true true
0 NULL false
-1 NULL false
NULL NULL false

statement ok
drop table foo


# Test coercion of inner struct field names
# Reproducer for https://github.com/apache/datafusion/issues/14383
statement ok
create table t as values
(
 100,                                       -- column1 int (so the case isn't constant folded)
 { 'foo': 'bar' },                          -- column2 has List of Struct w/ Utf8
 { 'foo': arrow_cast('baz', 'Utf8View') },  -- column3 has List of Struct w/ Utf8View
 { 'foo': arrow_cast('blarg', 'Utf8View') } -- column4 has List of Struct w/ Utf8View
);


# Note field name is foo
query ???
SELECT column2, column3, column4  FROM t;
----
{foo: bar} {foo: baz} {foo: blarg}

# Coerce fields, expect the field name to be the name of the first arg to case
# the field should not be named 'c0'
query ?
SELECT
  case
    when column1 > 0 then column2
    when column1 < 0 then column3
    else column4
  end
FROM t;
----
{foo: bar}

query ?
SELECT
  case
    when column1 > 0 then column3 -- different arg order shouldn't affect name
    when column1 < 0 then column4
    else column2
  end
FROM t;
----
{foo: baz}

query ?
SELECT
  case
    when column1 > 0 then column4 -- different arg order shouldn't affect name
    when column1 < 0 then column2
    else column3
  end
FROM t;
----
{foo: blarg}

statement ok
drop table t


# Test coercion of inner struct field names with different orders / missing fields
statement ok
create table t as values
(
 100,                        -- column1 int (so the case isn't constant folded)
 { 'foo': 'a', 'xxx': 'b' }, -- column2: Struct with fields foo, xxx
 { 'xxx': 'c', 'foo': 'd' }, -- column3: Struct with fields xxx, foo
 { 'xxx': 'e'             }  -- column4: Struct with field xxx (no second field)
);

# Note field names are in different orders
query ???
SELECT column2, column3, column4  FROM t;
----
{foo: a, xxx: b} {xxx: c, foo: d} {xxx: e}

# coerce structs with different field orders,
# (note the *value*s are from column2 but the field name is 'xxx', as the coerced
# type takes the field name from the last argument (column3)
query ?
SELECT
  case
    when column1 > 0 then column2 -- always true
    else column3
  end
FROM t;
----
{xxx: a, foo: b}

# coerce structs with different field orders
query ?
SELECT
  case
    when column1 < 0 then column2 -- always false
    else column3
  end
FROM t;
----
{xxx: c, foo: d}

# coerce structs with subset of fields
query error Failed to coerce then
SELECT
  case
    when column1 > 0 then column3
    else column4
  end
FROM t;

statement ok
drop table t
