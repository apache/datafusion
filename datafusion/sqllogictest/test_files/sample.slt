# SAMPLE function tests with REPEATABLE seed for stability

# Test basic SAMPLE with REPEATABLE seed
statement ok
CREATE TABLE sample_test (id INT) AS SELECT * FROM generate_series(1, 40);

query TT
EXPLAIN SELECT * FROM sample_test SAMPLE (50 PERCENT) REPEATABLE (42);
----
logical_plan
01)Sample: lower_bound=0, upper_bound=0.5, with_replacement=false, seed=42
02)--TableScan: sample_test projection=[id]
physical_plan
01)SampleExec: lower_bound=0, upper_bound=0.5, with_replacement=false, seed=42
02)--DataSourceExec: partitions=4, partition_sizes=[1, 0, 0, 0]

query TT
EXPLAIN SELECT * FROM sample_test SAMPLE (10 ROWS);
----
logical_plan
01)Limit: skip=0, fetch=10
02)--TableScan: sample_test projection=[id], fetch=10
physical_plan
01)CoalescePartitionsExec: fetch=10
02)--DataSourceExec: partitions=4, partition_sizes=[1, 0, 0, 0], fetch=10

query TT
EXPLAIN SELECT * FROM sample_test SAMPLE 0.5 REPEATABLE (42);
----
logical_plan
01)Sample: lower_bound=0, upper_bound=0.5, with_replacement=false, seed=42
02)--TableScan: sample_test projection=[id]
physical_plan
01)SampleExec: lower_bound=0, upper_bound=0.5, with_replacement=false, seed=42
02)--DataSourceExec: partitions=4, partition_sizes=[1, 0, 0, 0]

query TT
EXPLAIN SELECT * FROM sample_test SAMPLE 10;
----
logical_plan
01)Limit: skip=0, fetch=10
02)--TableScan: sample_test projection=[id], fetch=10
physical_plan
01)CoalescePartitionsExec: fetch=10
02)--DataSourceExec: partitions=4, partition_sizes=[1, 0, 0, 0], fetch=10


# Test SAMPLE with 20% ratio and REPEATABLE seed
query I
SELECT * FROM sample_test SAMPLE (20 PERCENT) REPEATABLE (42);
----
5
9
10
14
17
19
24
39

query I
SELECT COUNT(DISTINCT id) FROM (SELECT id FROM sample_test SAMPLE (100 PERCENT));
----
40

# Test SAMPLE with 0% ratio and REPEATABLE seed (should return no rows)
query I
SELECT COUNT(DISTINCT id) FROM (SELECT id FROM sample_test SAMPLE (0 PERCENT));
----
0

# Clean up
statement ok
DROP TABLE sample_test
