# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at

#   http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

# make sure to a batch size smaller than row number of the table.
statement ok
set datafusion.execution.batch_size = 2;

#############
## Subquery Tests
#############


#############
## Setup test data table
#############
# there tables for subquery


statement ok
CREATE TABLE t1(t1_id INT, t1_name TEXT, t1_int INT) AS VALUES
(11, 'a', 1),
(22, 'a', 1),
(33, 'a', 1),
(33, 'a', 1),
(33, 'a', 1),
(33, 'a', 1),
(44, 'a', 1),
(44, 'a', 1),
(55, 'a', 1),
(44, 'a', 1),
(44, 'a', 1),
(44, 'a', 1),
(55, 'a', 1),
(55, 'a', 1),
(55, 'a', 1),
(55, 'a', 1),
(66, 'a', 1),
(66, 'a', 1),
(66, 'a', 1),
(66, 'a', 1),
(66, 'a', 1),
(33, 'a', 1),
(33, 'a', 1);

statement ok
CREATE TABLE t2 AS VALUES
(11, 'z', struct(1,'hello',3)),
(22, 'y',NULL),
(11, 'x', struct(1,'hola',6)),
(22, 'w', NULL);

# Prepare settings to skip partial aggregation from the beginning
statement ok
set datafusion.execution.skip_partial_aggregation_probe_rows_threshold = 0;

statement ok
set datafusion.execution.skip_partial_aggregation_probe_ratio_threshold = 0.0;

statement ok
set datafusion.execution.target_partitions = 2;

statement ok
CREATE EXTERNAL TABLE aggregate_test_100 (
  c1  VARCHAR NOT NULL,
  c2  TINYINT NOT NULL,
  c3  SMALLINT NOT NULL,
  c4  SMALLINT,
  c5  INT,
  c6  BIGINT NOT NULL,
  c7  SMALLINT NOT NULL,
  c8  INT NOT NULL,
  c9  INT UNSIGNED NOT NULL,
  c10 BIGINT UNSIGNED NOT NULL,
  c11 FLOAT NOT NULL,
  c12 DOUBLE NOT NULL,
  c13 VARCHAR NOT NULL
)
STORED AS CSV
LOCATION '../../testing/data/csv/aggregate_test_100.csv'
OPTIONS ('format.has_header' 'true');





statement ok
set datafusion.sql_parser.dialect = 'Postgres';

statement ok
set datafusion.execution.skip_partial_aggregation_probe_rows_threshold = 10;

statement ok
set datafusion.execution.skip_partial_aggregation_probe_ratio_threshold = 0.0;

statement ok
set datafusion.execution.target_partitions = 2;

statement ok
set datafusion.execution.batch_size = 2;

# query IIR
# SELECT c2, approx_median(c5), approx_median(c11) FROM aggregate_test_100 GROUP BY c2 ORDER BY c2;
# ----
# 1 191655437 0.59926736
# 2 -587831330 0.43230486
# 3 240273900 0.40199697
# 4 762932956 0.48515016
# 5 593204320 0.5156586

query I?
SELECT t1_id, array_agg(t1_id) FROM t1 GROUP BY t1_id ORDER BY t1_id;
----
1 191655437
2 -587831330
3 240273900
4 762932956
5 593204320





# query TT
# explain select t1.t1_int from t1 left join (
#     select * from t1 left join (
#         select count(*) cnt ,t1_int from t1 left join t2 
#             on t2.t2_int is not distinct from t1_int group by t1_int 
#     ) temp on t1.t1_int is not distinct from temp.t1_int
# ) a on t1.t1_int=a.t1_int where a.cnt=0
# ---


