# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at

#   http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

##########
## Join Tests
##########

# Regression test: https://github.com/apache/arrow-datafusion/issues/4844
statement ok
CREATE TABLE IF NOT EXISTS students(name TEXT, mark INT) AS VALUES
('Stuart', 28),
('Amina', 89),
('Christen', 50),
('Salma', 77),
('Samantha', 21);

statement ok
CREATE TABLE IF NOT EXISTS grades(grade INT, min INT, max INT) AS VALUES
(1, 0, 14),
(2, 15, 35),
(3, 36, 55),
(4, 56, 79),
(5, 80, 100);

query TII
SELECT s.*, g.grade FROM students s join grades g on s.mark between g.min and g.max WHERE grade > 2 ORDER BY s.mark DESC
----
Amina 89 5
Salma 77 4
Christen 50 3

statement ok
drop table IF EXISTS students;

statement ok
drop table IF EXISTS grades;

# issue: https://github.com/apache/arrow-datafusion/issues/5382
statement ok
CREATE TABLE IF NOT EXISTS test1(a int, b int) as select 1 as a, 2 as b;

statement ok
CREATE TABLE IF NOT EXISTS test2(a int, b int) as select 1 as a, 2 as b;

query IIII rowsort
SELECT * FROM test2 FULL JOIN test1 ON true;
----
1 2 1 2

statement ok
drop table IF EXISTS test1;

statement ok
drop table IF EXISTS test2;

# tables for join
statement ok
CREATE TABLE IF NOT EXISTS t1(t1_id INT, t1_name TEXT, t1_int INT) AS VALUES
(11, 'a', 1),
(22, 'b', 2),
(33, 'c', 3),
(44, 'd', 4);

statement ok
CREATE TABLE IF NOT EXISTS t2(t2_id INT, t2_name TEXT, t2_int INT) AS VALUES
(11, 'z', 3),
(22, 'y', 1),
(44, 'x', 3),
(55, 'w', 3);

statement ok
CREATE TABLE IF NOT EXISTS t3(t3_id INT, t3_name TEXT, t3_int INT) AS VALUES
(11, 'z', 3),
(22, ' ', 6),
(33, 'x', 7),
(55, 'w', 4);

# batch size
statement ok
set datafusion.execution.batch_size = 4096;

# left semi with wrong where clause
query error DataFusion error: Schema error: No field named t2\.t2_id\. Valid fields are t1\.t1_id, t1\.t1_name, t1\.t1_int\.
SELECT t1.t1_id, t1.t1_name, t1.t1_int
FROM t1
	LEFT SEMI JOIN t2 ON t1.t1_id = t2.t2_id
WHERE t2.t2_id > 1

# left semi join with on-filter
query ITI rowsort
SELECT t1.t1_id, t1.t1_name, t1.t1_int
FROM t1
	LEFT SEMI JOIN t2
	ON t1.t1_id = t2.t2_id
		AND t2.t2_int > 1
----
11 a 1
44 d 4

# equijoin
query ITT rowsort
SELECT t1_id, t1_name, t2_name FROM t1 JOIN t2 ON t1_id = t2_id
----
11 a z
22 b y
44 d x

query ITT rowsort
SELECT t1_id, t1_name, t2_name FROM t1 JOIN t2 ON t2_id = t1_id
----
11 a z
22 b y
44 d x

# equijoin_multiple_condition_ordering
query ITT rowsort
SELECT t1_id, t1_name, t2_name FROM t1 JOIN t2 ON t1_id = t2_id AND t1_name <> t2_name
----
11 a z
22 b y
44 d x

query ITT rowsort
SELECT t1_id, t1_name, t2_name FROM t1 JOIN t2 ON t1_id = t2_id AND t2_name <> t1_name
----
11 a z
22 b y
44 d x

query ITT rowsort
SELECT t1_id, t1_name, t2_name FROM t1 JOIN t2 ON t2_id = t1_id AND t1_name <> t2_name
----
11 a z
22 b y
44 d x

query ITT rowsort
SELECT t1_id, t1_name, t2_name FROM t1 JOIN t2 ON t2_id = t1_id AND t2_name <> t1_name
----
11 a z
22 b y
44 d x

# equijoin_and_other_condition
query ITT rowsort
SELECT t1_id, t1_name, t2_name FROM t1 JOIN t2 ON t1_id = t2_id AND t2_name >= 'y'
----
11 a z
22 b y

# equijoin_left_and_condition_from_right
query ITT rowsort
SELECT t1_id, t1_name, t2_name FROM t1 LEFT JOIN t2 ON t1_id = t2_id AND t2_name >= 'y'
----
11 a z
22 b y
33 c NULL
44 d NULL

# equijoin_left_and_not_null_condition_from_right
query ITT rowsort
SELECT t1_id, t1_name, t2_name FROM t1 LEFT JOIN t2 ON t1_id = t2_id AND t2_name is not null
----
11 a z
22 b y
33 c NULL
44 d x

# full_join_sub_query
query ITT rowsort
SELECT t1_id, t1_name, t2_name 
FROM (
	SELECT * 
	FROM (t1) AS t1
) 
    FULL JOIN (
		SELECT * 
		FROM (t2) AS t2
	) 
	ON t1_id = t2_id AND t2_name >= 'y'		
----
11 a z
22 b y
33 c NULL
44 d NULL
NULL NULL w
NULL NULL x

# equijoin_right_and_condition_from_left
query ITT rowsort
SELECT t1_id, t1_name, t2_name FROM t1 RIGHT JOIN t2 ON t1_id = t2_id AND t1_id >= 22
----
22 b y
44 d x
NULL NULL w
NULL NULL z

# equijoin_left_and_condition_from_left
query ITT rowsort
SELECT t1_id, t1_name, t2_name FROM t1 LEFT JOIN t2 ON t1_id = t2_id AND t1_id >= 44
----
11 a NULL
22 b NULL
33 c NULL
44 d x

# equijoin_left_and_condition_from_both
query III rowsort
SELECT t1_id, t1_int, t2_int FROM t1 LEFT JOIN t2 ON t1_id = t2_id AND t1_int >= t2_int
----
11 1 NULL
22 2 1
33 3 NULL
44 4 3

# equijoin_right_and_condition_from_right
query ITT rowsort
SELECT t1_id, t1_name, t2_name FROM t1 RIGHT JOIN t2 ON t1_id = t2_id AND t2_id >= 22
----
22 b y
44 d x
NULL NULL w
NULL NULL z

# equijoin_right_and_condition_from_both
query III rowsort
SELECT t1_int, t2_int, t2_id FROM t1 RIGHT JOIN t2 ON t1_id = t2_id AND t2_int <= t1_int
----
2 1 22
4 3 44
NULL 3 11
NULL 3 55

# equijoin_full
query ITIITI rowsort
SELECT * FROM t1 FULL JOIN t2 ON t1_id = t2_id
----
11 a 1 11 z 3
22 b 2 22 y 1
33 c 3 NULL NULL NULL
44 d 4 44 x 3
NULL NULL NULL 55 w 3

# equijoin_full_and_condition_from_both
query ITIITI rowsort
SELECT * FROM t1 FULL JOIN t2 ON t1_id = t2_id AND t2_int <= t1_int
----
11 a 1 NULL NULL NULL
22 b 2 22 y 1
33 c 3 NULL NULL NULL
44 d 4 44 x 3
NULL NULL NULL 11 z 3
NULL NULL NULL 55 w 3

# left_join
query ITT rowsort
SELECT t1_id, t1_name, t2_name FROM t1 LEFT JOIN t2 ON t1_id = t2_id
----
11 a z
22 b y
33 c NULL
44 d x

query ITT rowsort
SELECT t1_id, t1_name, t2_name FROM t1 LEFT JOIN t2 ON t2_id = t1_id
----
11 a z
22 b y
33 c NULL
44 d x

# right_join
query ITT rowsort
SELECT t1_id, t1_name, t2_name FROM t1 RIGHT JOIN t2 ON t1_id = t2_id
----
11 a z
22 b y
44 d x
NULL NULL w

query ITT rowsort
SELECT t1_id, t1_name, t2_name FROM t1 RIGHT JOIN t2 ON t2_id = t1_id
----
11 a z
22 b y
44 d x
NULL NULL w

# full_join
query ITT rowsort
SELECT t1_id, t1_name, t2_name FROM t1 FULL JOIN t2 ON t1_id = t2_id
----
11 a z
22 b y
33 c NULL
44 d x
NULL NULL w

query ITT rowsort
SELECT t1_id, t1_name, t2_name FROM t1 FULL JOIN t2 ON t2_id = t1_id
----
11 a z
22 b y
33 c NULL
44 d x
NULL NULL w

# equijoin_implicit_syntax
query ITT rowsort
SELECT t1_id, t1_name, t2_name FROM t1, t2 WHERE t1_id = t2_id
----
11 a z
22 b y
44 d x

query ITT rowsort
SELECT t1_id, t1_name, t2_name FROM t1, t2 WHERE t2_id = t1_id
----
11 a z
22 b y
44 d x

# equijoin_implicit_syntax_with_filter
query ITT rowsort
SELECT t1_id, t1_name, t2_name FROM t1, t2 WHERE t1_id > 0 AND t1_id = t2_id AND t2_id < 99
----
11 a z
22 b y
44 d x

# equijoin_implicit_syntax_reversed
query ITT rowsort
SELECT t1_id, t1_name, t2_name FROM t1, t2 WHERE t2_id = t1_id
----
11 a z
22 b y
44 d x

# reduce_left_join_1
query ITIITI rowsort
SELECT t1_id, t1_name, t1_int, t2_id, t2_name, t2_int
FROM t1
	LEFT JOIN t2 ON t1.t1_id = t2.t2_id
WHERE t2.t2_id < 100
----
11 a 1 11 z 3
22 b 2 22 y 1
44 d 4 44 x 3

# reduce_left_join_2
# filter expr:  `t2.t2_int < 10 or (t1.t1_int > 2 and t2.t2_name != 'w')`
# could be write to: `(t1.t1_int > 2 or t2.t2_int < 10) and (t2.t2_name != 'w' or t2.t2_int < 10)`
# the right part `(t2.t2_name != 'w' or t2.t2_int < 10)` could be push down left join side and remove in filter.
query ITIITI rowsort
SELECT t1_id, t1_name, t1_int, t2_id, t2_name, t2_int
FROM t1
	LEFT JOIN t2 ON t1.t1_id = t2.t2_id
WHERE t2.t2_int < 10
	OR (t1.t1_int > 2
		AND t2.t2_name != 'w')
----
11 a 1 11 z 3
22 b 2 22 y 1
44 d 4 44 x 3

# reduce_left_join_3
query ITIITI
SELECT *
FROM (
	SELECT t1.*
	FROM t1
		LEFT JOIN t2 ON t1.t1_id = t2.t2_id
	WHERE t2.t2_int < 3
) t3
	LEFT JOIN t2 ON t3.t1_int = t2.t2_int
WHERE t3.t1_id < 100
----
22 b 2 NULL NULL NULL

# reduce_right_join_1
query ITIITI rowsort
SELECT t1_id, t1_name, t1_int, t2_id, t2_name, t2_int
FROM t1
	RIGHT JOIN t2 ON t1.t1_id = t2.t2_id
WHERE t1.t1_int IS NOT NULL
----
11 a 1 11 z 3
22 b 2 22 y 1
44 d 4 44 x 3

# reduce_right_join_2
query ITIITI rowsort
SELECT *
FROM t1
	RIGHT JOIN t2 ON t1.t1_id = t2.t2_id
WHERE NOT t1.t1_int = t2.t2_int
----
11 a 1 11 z 3
22 b 2 22 y 1
44 d 4 44 x 3

# reduce_full_join_to_right_join
query ITIITI rowsort
SELECT *
FROM t1
	FULL JOIN t2 ON t1.t1_id = t2.t2_id
WHERE t2.t2_name IS NOT NULL
----
11 a 1 11 z 3
22 b 2 22 y 1
44 d 4 44 x 3
NULL NULL NULL 55 w 3

# reduce_full_join_to_left_join
query ITIITI rowsort
SELECT *
FROM t1
	FULL JOIN t2 ON t1.t1_id = t2.t2_id
WHERE t1.t1_name != 'b'
----
11 a 1 11 z 3
33 c 3 NULL NULL NULL
44 d 4 44 x 3

# reduce_full_join_to_inner_join
query ITIITI rowsort
SELECT *
FROM t1
	FULL JOIN t2 ON t1.t1_id = t2.t2_id
WHERE t1.t1_name != 'b'
	AND t2.t2_name = 'x'
----
44 d 4 44 x 3

# left_join_with_nonequal_condition
query ITT rowsort
SELECT t1_id, t1_name, t2_name
FROM t1
	LEFT JOIN t2
	ON t1_id != t2_id
		AND t2_id >= 100
----
11 a NULL
22 b NULL
33 c NULL
44 d NULL

# reduce_cross_join_with_expr_join_key_all
query ITIITI rowsort
SELECT *
FROM t1
	CROSS JOIN t2
WHERE t1.t1_id + 12 = t2.t2_id + 1
----
11 a 1 22 y 1
33 c 3 44 x 3
44 d 4 55 w 3

# reduce_cross_join_with_cast_expr_join_key
query IIT rowsort
SELECT t1.t1_id, t2.t2_id, t1.t1_name
FROM t1
	CROSS JOIN t2
WHERE t1.t1_id + 11 = CAST(t2.t2_id AS BIGINT)
----
11 22 a
33 44 c
44 55 d

# reduce_cross_join_with_wildcard_and_expr
query ITIITII rowsort
SELECT *, t1.t1_id + 11
FROM t1, t2
WHERE t1.t1_id + 11 = t2.t2_id
----
11 a 1 22 y 1 22
33 c 3 44 x 3 44
44 d 4 55 w 3 55

# both_side_expr_key_inner_join
query IIT rowsort
SELECT t1.t1_id, t2.t2_id, t1.t1_name 
FROM t1 
    INNER JOIN t2 ON 
    t1.t1_id + cast(12 as INT UNSIGNED) = t2.t2_id + cast(1 as INT UNSIGNED)
----
11 22 a
33 44 c
44 55 d

# left_side_expr_key_inner_join
query IIT rowsort
SELECT t1_id, t2_id, t1_name 
FROM t1 
    INNER JOIN t2 ON 
    t1.t1_id + cast(11 as INT UNSIGNED) = t2.t2_id
----
11 22 a
33 44 c
44 55 d

# right_side_expr_key_inner_join
query IIT rowsort
SELECT t1.t1_id, t2.t2_id, t1.t1_name 
FROM t1 
    INNER JOIN t2 ON 
    t1.t1_id + cast(11 as INT UNSIGNED) = t2.t2_id
----
11 22 a
33 44 c
44 55 d

# select_wildcard_with_expr_key_inner_join
query ITIITI rowsort
SELECT * FROM t1 INNER JOIN t2 ON t1.t1_id = t2.t2_id - cast(11 as INT UNSIGNED)
----
11 a 1 22 y 1
33 c 3 44 x 3
44 d 4 55 w 3

# join_with_type_coercion_for_equi_expr
query ITI rowsort
SELECT t1.t1_id, t1.t1_name, t2.t2_id
FROM t1
	INNER JOIN t2 ON t1.t1_id + 11 = t2.t2_id
----
11 a 22
33 c 44
44 d 55

# join_only_with_filter
query ITI rowsort
select t1.t1_id, t1.t1_name, t2.t2_id from t1 inner join t2 on t1.t1_id * 4 < t2.t2_id
----
11 a 55

# type_coercion_join_with_filter_and_equi_expr
query ITI rowsort
SELECT t1.t1_id, t1.t1_name, t2.t2_id
FROM t1
	INNER JOIN t2
	ON t1.t1_id * 5 = t2.t2_id
		AND t1.t1_id * 4 < t2.t2_id
----
11 a 55

# inner join multiple tables to one
query III rowsort
SELECT t1.t1_id, t2.t2_id, t3.t3_id
FROM t1
	INNER JOIN t2 ON t1.t1_id = t2.t2_id
	INNER JOIN t3 ON t1.t1_id = t3.t3_id
----
11 11 11
22 22 22

# inner join multiple tables to one with WHERE filter
query III rowsort
SELECT t1.t1_id, t2.t2_id, t3.t3_id
FROM t1
	INNER JOIN t2 ON t1.t1_id = t2.t2_id
	INNER JOIN t3 ON t1.t1_id = t3.t3_id
WHERE t3.t3_int = 6
----
22 22 22

# inner join multiple tables to one with JOIN filter
query III rowsort
SELECT t1.t1_id, t2.t2_id, t3.t3_id
FROM t1
	INNER JOIN t2 ON t1.t1_id = t2.t2_id
	INNER JOIN t3 ON t1.t1_id = t3.t3_id AND t3.t3_int < 6
----
11 11 11

# subsequent inner join
query III rowsort
SELECT t1.t1_id, t2.t2_id, t3.t3_id
FROM t1
	INNER JOIN t2 ON t1.t1_id = t2.t2_id
	INNER JOIN t3 ON t2.t2_int = t3.t3_int
----
11 11 11
44 44 11

# subsequent inner join with filter
query III rowsort
SELECT t1.t1_id, t2.t2_id, t3.t3_id
FROM t1
	INNER JOIN t2 ON t1.t1_id = t2.t2_id
	INNER JOIN t3 ON t2.t2_id = t3.t3_id
WHERE t3.t3_int = 6
----
22 22 22

# subsequent inner join with join filter
query III rowsort
SELECT t1.t1_id, t2.t2_id, t3.t3_id
FROM t1
	INNER JOIN t2 ON t1.t1_id = t2.t2_id
	INNER JOIN t3 ON t2.t2_id = t3.t3_id AND t3.t3_int < 6
----
11 11 11

# multiple inner joins with mixed ON clause
query III rowsort
SELECT t1.t1_id, t2.t2_id, t3.t3_id
FROM t1
	INNER JOIN t2 ON t1.t1_id = t2.t2_id
	INNER JOIN t3 ON t1.t1_id = t3.t3_id AND t2.t2_int = t3.t3_int
----
11 11 11

# multiple inner joins with mixed ON clause and filter
query III rowsort
SELECT t1.t1_id, t2.t2_id, t3.t3_id
FROM t1
	INNER JOIN t2 ON t1.t1_id = t2.t2_id
	INNER JOIN t3 ON t1.t1_id = t3.t3_id AND t2.t2_int = t3.t3_int
WHERE t3.t3_name = 'no such name'
----

# test create table from query with LEFT join
statement ok
create table left_join_test as 
with t1 as (select 1 as col1, 'asd' as col2), 
     t2 as (select 1 as col3, 'sdf' as col4)
select col2, col4 from t1 left join t2 on col1 = col3

# test create table from query with RIGHT join
statement ok
create table right_join_test as 
with t1 as (select 1 as col1, 'asd' as col2), 
     t2 as (select 1 as col3, 'sdf' as col4)
select col2, col4 from t1 right join t2 on col1 = col3

# test create table from query with FULL OUTER join
statement ok
create table full_join_test as 
with t1 as (select 1 as col1, 'asd' as col2), 
     t2 as (select 1 as col3, 'sdf' as col4)
select col2, col4 from t1 full outer join t2 on col1 = col3

# test eliminate join when condition is false
query TT
explain select * from t1 join t2 on false;
----
logical_plan EmptyRelation
physical_plan EmptyExec

# Make batch size smaller than table row number. to introduce parallelism to the plan.
statement ok
set datafusion.execution.batch_size = 1;

# test covert inner join to cross join when condition is true
query TT
explain select * from t1 inner join t2 on true;
----
logical_plan
CrossJoin:
--TableScan: t1 projection=[t1_id, t1_name, t1_int]
--TableScan: t2 projection=[t2_id, t2_name, t2_int]
physical_plan
CrossJoinExec
--MemoryExec: partitions=1, partition_sizes=[1]
--RepartitionExec: partitioning=RoundRobinBatch(4), input_partitions=1
----MemoryExec: partitions=1, partition_sizes=[1]

statement ok
drop table IF EXISTS t1;

statement ok
drop table IF EXISTS t2;

statement ok
drop table IF EXISTS t3;

statement ok
drop table IF EXISTS left_join_test;

statement ok
drop table IF EXISTS right_join_test;

statement ok
drop table IF EXISTS full_join_test;

# batch size
statement ok
set datafusion.execution.batch_size = 8192;

# related to: https://github.com/apache/arrow-datafusion/issues/8374
statement ok
CREATE TABLE t1(a text, b int) AS VALUES ('Alice', 50), ('Alice', 100);

statement ok
CREATE TABLE t2(a text, b int) AS VALUES ('Alice', 2), ('Alice', 1);

# test 'ORDER BY' joined result with same column name
query TI
SELECT t1.a, t1.b FROM t1 JOIN t2 ON t1.a = t2.a ORDER BY t1.a, t1.b;
----
Alice 50
Alice 50
Alice 100
Alice 100

query TI
SELECT t1.a, t1.b FROM t1 JOIN t2 ON t1.a = t2.a ORDER BY t1.a, t2.b;
----
Alice 50
Alice 100
Alice 50
Alice 100

query TITI
SELECT t1.a, t1.b, t2.a, t2.b FROM t1 JOIN t2 ON t1.a = t2.a ORDER BY t1.a, t2.b;
----
Alice 50 Alice 1
Alice 100 Alice 1
Alice 50 Alice 2
Alice 100 Alice 2

statement ok
set datafusion.execution.target_partitions = 1;

statement ok
set datafusion.optimizer.repartition_joins = true;

# make sure when target partition is 1, hash repartition is not added
# to the final plan.
query TT
EXPLAIN SELECT *
FROM t1,
t1 as t2
WHERE t1.a=t2.a;
----
logical_plan
Inner Join: t1.a = t2.a
--TableScan: t1 projection=[a, b]
--SubqueryAlias: t2
----TableScan: t1 projection=[a, b]
physical_plan
CoalesceBatchesExec: target_batch_size=8192
--HashJoinExec: mode=CollectLeft, join_type=Inner, on=[(a@0, a@0)]
----MemoryExec: partitions=1, partition_sizes=[1]
----MemoryExec: partitions=1, partition_sizes=[1]

# Reset the configs to old values
statement ok
set datafusion.execution.target_partitions = 4;

statement ok
set datafusion.optimizer.repartition_joins = false;

statement ok
DROP TABLE t1;

statement ok
DROP TABLE t2;

# sort by company name and then by lead name
statement ok
CREATE TABLE companies(name VARCHAR, employees INT) AS VALUES ('Jeyork', 150),('Shalk', 350),('ShuttlP', 75)

statement ok
CREATE TABLE leads(name VARCHAR, company VARCHAR) AS VALUES ('Alex F', 'Jeyork'),('John B', 'Shalk'),('Samanta J', 'ShuttlP'),('Trevor R', 'Jeyork'),('Alice B', 'ShuttlP')

query TT
SELECT l.* FROM leads l LEFT JOIN companies c ON c."name" = l."company" ORDER BY c."name", l."name"
----
Alex F Jeyork
Trevor R Jeyork
John B Shalk
Alice B ShuttlP
Samanta J ShuttlP

statement ok
DROP TABLE companies

statement ok
DROP TABLE leads
