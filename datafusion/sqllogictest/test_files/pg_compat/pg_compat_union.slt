# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at

# http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.


onlyif postgres
statement ok
CREATE TABLE aggregate_test_100_by_sql
(
    c1  character varying NOT NULL,
    c2  smallint          NOT NULL,
    c3  smallint          NOT NULL,
    c4  smallint,
    c5  integer,
    c6  bigint            NOT NULL,
    c7  smallint          NOT NULL,
    c8  integer           NOT NULL,
    c9  bigint            NOT NULL,
    c10 character varying NOT NULL,
    c11 real              NOT NULL,
    c12 double precision  NOT NULL,
    c13 character varying NOT NULL
);

# Copy the data
onlyif postgres
statement ok
COPY aggregate_test_100_by_sql
    FROM '../../testing/data/csv/aggregate_test_100.csv'
    DELIMITER ','
    CSV HEADER;

###
## Setup test for datafusion
###
onlyif DataFusion
statement ok
CREATE EXTERNAL TABLE aggregate_test_100_by_sql (
  c1  VARCHAR NOT NULL,
  c2  TINYINT NOT NULL,
  c3  SMALLINT NOT NULL,
  c4  SMALLINT,
  c5  INT,
  c6  BIGINT NOT NULL,
  c7  SMALLINT NOT NULL,
  c8  INT NOT NULL,
  c9  BIGINT UNSIGNED NOT NULL,
  c10 VARCHAR NOT NULL,
  c11 FLOAT NOT NULL,
  c12 DOUBLE NOT NULL,
  c13 VARCHAR NOT NULL
)
STORED AS CSV
WITH HEADER ROW
LOCATION '../../testing/data/csv/aggregate_test_100.csv'

query I rowsort
SELECT * FROM (
    SELECT c2
    FROM aggregate_test_100_by_sql t1
    EXCEPT
    SELECT c2
    FROM aggregate_test_100_by_sql t2
    WHERE c2 IN (3, 4)
) s
----
1
2
5

query I rowsort
SELECT * FROM (
    SELECT c2
    FROM aggregate_test_100_by_sql t1
    EXCEPT ALL
    SELECT c2
    FROM aggregate_test_100_by_sql t2
    WHERE c2 IN (3, 4)
) s
----
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
5
5
5
5
5
5
5
5
5
5
5
5
5
5


query I rowsort
SELECT * FROM (
    SELECT c2
    FROM aggregate_test_100_by_sql t1
    INTERSECT
    SELECT c2
    FROM aggregate_test_100_by_sql t2
    WHERE c2 IN (3, 4)
) s
----
3
4


query I rowsort
SELECT * FROM (
    SELECT c2
    FROM aggregate_test_100_by_sql t1
    INTERSECT ALL
    SELECT c2
    FROM aggregate_test_100_by_sql t2
    WHERE c2 IN (3, 4)
) s
----
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
4
4
4
4
4
4
4
4
4
4
4
4
4
4
4
4
4
4
4
4
4
4
4


query I
SELECT 1 num UNION ALL SELECT 2 num ORDER BY num;
----
1
2

########
# Clean up after the test
########
statement ok
DROP TABLE aggregate_test_100_by_sql
