# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at

#   http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

# TESTS FOR SORTED PARQUET FILES

# Set 2 partitions for deterministic output plans
statement ok
set datafusion.execution.target_partitions = 2;

# Collect statistics -- used for sorting files
statement ok
set datafusion.execution.collect_statistics = true;

# Enable split_file_groups_by_statistics since it's currently disabled by default
statement ok
set datafusion.execution.split_file_groups_by_statistics = true;

# Create a table as a data source
statement ok
CREATE TABLE src_table (
  int_col INT,
  descending_col INT,
  string_col TEXT,
  bigint_col BIGINT,
  date_col DATE,
  overlapping_col INT,
  constant_col INT
) AS VALUES
-- first file
(1, 3, 'aaa', 100, 1, 0, 0),
(2, 2, 'bbb', 200, 2, 1, 0),
(3, 1, 'ccc', 300, 3, 2, 0),
-- second file
(4, 6, 'ddd', 400, 4, 0, 0),
(5, 5, 'eee', 500, 5, 1, 0),
(6, 4, 'fff', 600, 6, 2, 0),
-- third file
(7, 9, 'ggg', 700, 7, 3, 0),
(8, 8, 'hhh', 800, 8, 4, 0),
(9, 7, 'iii', 900, 9, 5, 0);

# Setup 3 files, in particular more files than there are partitions

# File 1:
query IITIDII
COPY (SELECT * FROM src_table ORDER BY int_col LIMIT 3)
TO 'test_files/scratch/parquet_sorted_statistics/test_table/partition_col=A/0.parquet'
STORED AS PARQUET;
----
3

# File 2:
query IITIDII
COPY (SELECT * FROM src_table WHERE int_col > 3 ORDER BY int_col LIMIT 3)
TO 'test_files/scratch/parquet_sorted_statistics/test_table/partition_col=B/1.parquet'
STORED AS PARQUET;
----
3

# Add another file to the directory underlying test_table
query IITIDII
COPY (SELECT * FROM src_table WHERE int_col > 6 ORDER BY int_col LIMIT 3)
TO 'test_files/scratch/parquet_sorted_statistics/test_table/partition_col=C/2.parquet'
STORED AS PARQUET;
----
3


# Create a table from generated parquet files:
statement ok
CREATE EXTERNAL TABLE test_table (
  partition_col TEXT NOT NULL,
  int_col INT NOT NULL,
  descending_col INT NOT NULL,
  string_col TEXT NOT NULL,
  bigint_col BIGINT NOT NULL,
  date_col DATE NOT NULL,
  overlapping_col INT NOT NULL,
  constant_col INT NOT NULL
)
STORED AS PARQUET
PARTITIONED BY (partition_col)
WITH ORDER (int_col ASC NULLS LAST, bigint_col ASC NULLS LAST)
LOCATION 'test_files/scratch/parquet_sorted_statistics/test_table';

# Order by numeric columns
# This is to exercise file group sorting, which uses file-level statistics
# DataFusion doesn't currently support string column statistics
# This should not require a sort.
query TT
EXPLAIN SELECT int_col, bigint_col
FROM test_table
ORDER BY int_col, bigint_col;
----
logical_plan
01)Sort: test_table.int_col ASC NULLS LAST, test_table.bigint_col ASC NULLS LAST
02)--TableScan: test_table projection=[int_col, bigint_col]
physical_plan ParquetExec: file_groups={1 group: [[WORKSPACE_ROOT/datafusion/sqllogictest/test_files/scratch/parquet_sorted_statistics/test_table/partition_col=A/0.parquet, WORKSPACE_ROOT/datafusion/sqllogictest/test_files/scratch/parquet_sorted_statistics/test_table/partition_col=B/1.parquet, WORKSPACE_ROOT/datafusion/sqllogictest/test_files/scratch/parquet_sorted_statistics/test_table/partition_col=C/2.parquet]]}, projection=[int_col, bigint_col], output_ordering=[int_col@0 ASC NULLS LAST, bigint_col@1 ASC NULLS LAST]

# Another planning test, but project on a column with unsupported statistics
# We should be able to ignore this and look at only the relevant statistics
query TT
EXPLAIN SELECT string_col
FROM test_table
ORDER BY int_col, bigint_col;
----
logical_plan
01)Projection: test_table.string_col
02)--Sort: test_table.int_col ASC NULLS LAST, test_table.bigint_col ASC NULLS LAST
03)----Projection: test_table.string_col, test_table.int_col, test_table.bigint_col
04)------TableScan: test_table projection=[int_col, string_col, bigint_col]
physical_plan
01)ProjectionExec: expr=[string_col@1 as string_col]
02)--ParquetExec: file_groups={1 group: [[WORKSPACE_ROOT/datafusion/sqllogictest/test_files/scratch/parquet_sorted_statistics/test_table/partition_col=A/0.parquet, WORKSPACE_ROOT/datafusion/sqllogictest/test_files/scratch/parquet_sorted_statistics/test_table/partition_col=B/1.parquet, WORKSPACE_ROOT/datafusion/sqllogictest/test_files/scratch/parquet_sorted_statistics/test_table/partition_col=C/2.parquet]]}, projection=[int_col, string_col, bigint_col], output_ordering=[int_col@0 ASC NULLS LAST, bigint_col@2 ASC NULLS LAST]

# Clean up & recreate but sort on descending column
statement ok
DROP TABLE test_table;

statement ok
CREATE EXTERNAL TABLE test_table (
  partition_col TEXT NOT NULL,
  int_col INT NOT NULL,
  descending_col INT NOT NULL,
  string_col TEXT NOT NULL,
  bigint_col BIGINT NOT NULL,
  date_col DATE NOT NULL,
  overlapping_col INT NOT NULL,
  constant_col INT NOT NULL
)
STORED AS PARQUET
PARTITIONED BY (partition_col)
WITH ORDER (descending_col DESC NULLS LAST, bigint_col ASC NULLS LAST)
LOCATION 'test_files/scratch/parquet_sorted_statistics/test_table';

# Query order by descending_col
# This should order the files like [C, B, A]
query TT
EXPLAIN SELECT descending_col, bigint_col
FROM test_table
ORDER BY descending_col DESC NULLS LAST, bigint_col ASC NULLS LAST;
----
logical_plan
01)Sort: test_table.descending_col DESC NULLS LAST, test_table.bigint_col ASC NULLS LAST
02)--TableScan: test_table projection=[descending_col, bigint_col]
physical_plan ParquetExec: file_groups={1 group: [[WORKSPACE_ROOT/datafusion/sqllogictest/test_files/scratch/parquet_sorted_statistics/test_table/partition_col=C/2.parquet, WORKSPACE_ROOT/datafusion/sqllogictest/test_files/scratch/parquet_sorted_statistics/test_table/partition_col=B/1.parquet, WORKSPACE_ROOT/datafusion/sqllogictest/test_files/scratch/parquet_sorted_statistics/test_table/partition_col=A/0.parquet]]}, projection=[descending_col, bigint_col], output_ordering=[descending_col@0 DESC NULLS LAST, bigint_col@1 ASC NULLS LAST]

# Clean up & re-create with partition columns in sort order
statement ok
DROP TABLE test_table;

statement ok
CREATE EXTERNAL TABLE test_table (
  partition_col TEXT NOT NULL,
  int_col INT NOT NULL,
  descending_col INT NOT NULL,
  string_col TEXT NOT NULL,
  bigint_col BIGINT NOT NULL,
  date_col DATE NOT NULL,
  overlapping_col INT NOT NULL,
  constant_col INT NOT NULL
)
STORED AS PARQUET
PARTITIONED BY (partition_col)
WITH ORDER (partition_col ASC NULLS LAST, int_col ASC NULLS LAST, bigint_col ASC NULLS LAST)
LOCATION 'test_files/scratch/parquet_sorted_statistics/test_table';

# Order with partition column first
# In particular, the partition column is a string
# Even though statistics for string columns are not supported,
# string partition columns are common and we do support sorting file groups on them
query TT
EXPLAIN SELECT int_col, bigint_col, partition_col
FROM test_table
ORDER BY partition_col, int_col, bigint_col;
----
logical_plan
01)Sort: test_table.partition_col ASC NULLS LAST, test_table.int_col ASC NULLS LAST, test_table.bigint_col ASC NULLS LAST
02)--TableScan: test_table projection=[int_col, bigint_col, partition_col]
physical_plan ParquetExec: file_groups={1 group: [[WORKSPACE_ROOT/datafusion/sqllogictest/test_files/scratch/parquet_sorted_statistics/test_table/partition_col=A/0.parquet, WORKSPACE_ROOT/datafusion/sqllogictest/test_files/scratch/parquet_sorted_statistics/test_table/partition_col=B/1.parquet, WORKSPACE_ROOT/datafusion/sqllogictest/test_files/scratch/parquet_sorted_statistics/test_table/partition_col=C/2.parquet]]}, projection=[int_col, bigint_col, partition_col], output_ordering=[partition_col@2 ASC NULLS LAST, int_col@0 ASC NULLS LAST, bigint_col@1 ASC NULLS LAST]

# Clean up & re-create with overlapping column in sort order
# This will test the ability to sort files with overlapping statistics
statement ok
DROP TABLE test_table;

statement ok
CREATE EXTERNAL TABLE test_table (
  partition_col TEXT NOT NULL,
  int_col INT NOT NULL,
  descending_col INT NOT NULL,
  string_col TEXT NOT NULL,
  bigint_col BIGINT NOT NULL,
  date_col DATE NOT NULL,
  overlapping_col INT NOT NULL,
  constant_col INT NOT NULL
)
STORED AS PARQUET
PARTITIONED BY (partition_col)
WITH ORDER (overlapping_col ASC NULLS LAST)
LOCATION 'test_files/scratch/parquet_sorted_statistics/test_table';

query TT
EXPLAIN SELECT int_col, bigint_col, overlapping_col
FROM test_table
ORDER BY overlapping_col;
----
logical_plan
01)Sort: test_table.overlapping_col ASC NULLS LAST
02)--TableScan: test_table projection=[int_col, bigint_col, overlapping_col]
physical_plan
01)SortPreservingMergeExec: [overlapping_col@2 ASC NULLS LAST]
02)--ParquetExec: file_groups={2 groups: [[WORKSPACE_ROOT/datafusion/sqllogictest/test_files/scratch/parquet_sorted_statistics/test_table/partition_col=A/0.parquet, WORKSPACE_ROOT/datafusion/sqllogictest/test_files/scratch/parquet_sorted_statistics/test_table/partition_col=C/2.parquet], [WORKSPACE_ROOT/datafusion/sqllogictest/test_files/scratch/parquet_sorted_statistics/test_table/partition_col=B/1.parquet]]}, projection=[int_col, bigint_col, overlapping_col], output_ordering=[overlapping_col@2 ASC NULLS LAST]

# Clean up & re-create with constant column in sort order
# This will require a sort because the # of required file groups (3)
# exceeds the # of target partitions (2)
statement ok
DROP TABLE test_table;

statement ok
CREATE EXTERNAL TABLE test_table (
  partition_col TEXT NOT NULL,
  int_col INT NOT NULL,
  descending_col INT NOT NULL,
  string_col TEXT NOT NULL,
  bigint_col BIGINT NOT NULL,
  date_col DATE NOT NULL,
  overlapping_col INT NOT NULL,
  constant_col INT NOT NULL
)
STORED AS PARQUET
PARTITIONED BY (partition_col)
WITH ORDER (constant_col ASC NULLS LAST)
LOCATION 'test_files/scratch/parquet_sorted_statistics/test_table';

query TT
EXPLAIN SELECT constant_col
FROM test_table
ORDER BY constant_col;
----
logical_plan
01)Sort: test_table.constant_col ASC NULLS LAST
02)--TableScan: test_table projection=[constant_col]
physical_plan
01)SortPreservingMergeExec: [constant_col@0 ASC NULLS LAST]
02)--SortExec: expr=[constant_col@0 ASC NULLS LAST], preserve_partitioning=[true]
03)----ParquetExec: file_groups={2 groups: [[WORKSPACE_ROOT/datafusion/sqllogictest/test_files/scratch/parquet_sorted_statistics/test_table/partition_col=A/0.parquet, WORKSPACE_ROOT/datafusion/sqllogictest/test_files/scratch/parquet_sorted_statistics/test_table/partition_col=B/1.parquet], [WORKSPACE_ROOT/datafusion/sqllogictest/test_files/scratch/parquet_sorted_statistics/test_table/partition_col=C/2.parquet]]}, projection=[constant_col]
