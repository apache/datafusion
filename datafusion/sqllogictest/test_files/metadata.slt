# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at

#   http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

##########
## Tests for tables that has both metadata on each field as well as metadata on
## the schema itself.
##########

## Note that table_with_metadata is defined using Rust code
## in the test harness as there is no way to define schema
## with metadata in SQL.

query IT
select id, name from table_with_metadata;
----
1 NULL
NULL bar
3 baz

query I rowsort
SELECT (
  SELECT id FROM table_with_metadata
  ) UNION (
  SELECT id FROM table_with_metadata
  );
----
1
3
NULL

query I rowsort
SELECT "data"."id"
FROM
  (
    (SELECT "id" FROM "table_with_metadata")
      UNION
    (SELECT "id" FROM "table_with_metadata")
  ) as "data",
  (
    SELECT "id" FROM "table_with_metadata"
  ) as "samples"
WHERE "data"."id" = "samples"."id";
----
1
3



# Regression test: prevent field metadata loss per https://github.com/apache/datafusion/issues/12687
query I
select count(distinct name) from table_with_metadata;
----
2

# Regression test: prevent field metadata loss per https://github.com/apache/datafusion/issues/12687
query I
select approx_median(distinct id) from table_with_metadata;
----
2

# Regression test: prevent field metadata loss per https://github.com/apache/datafusion/issues/12687
statement ok
select array_agg(distinct id) from table_with_metadata;

query I
select distinct id from table_with_metadata order by id;
----
1
3
NULL

query I
select count(id) from table_with_metadata;
----
2

query I
select count(id) cnt from table_with_metadata group by name order by cnt;
----
0
1
1



# Regression test: missing schema metadata, when aggregate on cross join
query I
SELECT count("data"."id")
FROM
  (
   SELECT "id" FROM "table_with_metadata"
  ) as "data",
  (
    SELECT "id" FROM "table_with_metadata"
  ) as "samples";
----
6

# Regression test: missing field metadata, from the NULL field on the left side of the union
query ITT
(SELECT id, NULL::string as name, l_name FROM "table_with_metadata")
  UNION
(SELECT id, name, NULL::string as l_name FROM "table_with_metadata")
ORDER BY id, name, l_name;
----
1 NULL NULL
3 baz NULL
3 NULL l_baz
NULL bar NULL
NULL NULL l_bar

# Regression test: missing field metadata from left side of the union when right side is chosen
query T
select name from (
  SELECT nonnull_name as name FROM "table_with_metadata"
  UNION ALL
  SELECT NULL::string as name
) group by name order by name;
----
no_bar
no_baz
no_foo
NULL

# Regression test: missing schema metadata from union when schema with metadata isn't the first one
# and also ensure it works fine with multiple unions
query T
select name from (
  SELECT NULL::string as name
  UNION ALL
  SELECT nonnull_name as name FROM "table_with_metadata"
  UNION ALL
  SELECT NULL::string as name
) group by name order by name;
----
no_bar
no_baz
no_foo
NULL

query P rowsort
SELECT ts
FROM ((
    SELECT now() AS ts
    FROM table_with_metadata
) UNION ALL (
        SELECT ts
    FROM table_with_metadata
))
GROUP BY ts
ORDER BY ts
LIMIT 1;
----
2020-09-08T13:42:29.190855123Z



# distinct (aggregate) alone
query P
SELECT
    DISTINCT ts as dist
FROM table_with_metadata;
----
2020-09-08T13:42:29.190855123

# cast alone
query D
SELECT
    ts::DATE as casted
FROM table_with_metadata;
----
2020-09-08
2020-09-08
2020-09-08

# Regression test: distinct with cast
query D
SELECT DISTINCT (ts::DATE) AS dist
    FROM table_with_metadata;
----
2020-09-08



# count distinct with group by
query II
SELECT
    id AS grp,
    COUNT(DISTINCT nonnull_name) as dist
FROM table_with_metadata
GROUP BY grp
order by 1 asc nulls last;
----
1 1
3 1
NULL 1

# count (not distinct) & cast, with group by
query TI
SELECT
    CAST(id AS TEXT) AS grp,
    COUNT(nonnull_name) as dist
FROM table_with_metadata
GROUP BY grp
order by 1 asc nulls last;
----
1 1
3 1
NULL 1

# Regression test: count distinct & cast, with group by
query TI
SELECT
    CAST(id AS TEXT) AS grp,
    COUNT(DISTINCT nonnull_name) as dist
FROM table_with_metadata
GROUP BY grp
order by 1 asc nulls last;
----
1 1
3 1
NULL 1



statement ok
drop table table_with_metadata;
