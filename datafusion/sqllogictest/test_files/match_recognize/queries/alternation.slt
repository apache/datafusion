# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

# Import common test data
include ../init_data.slt.part

# Test 1: Basic alternation pattern (A | B)
query TDI
SELECT * FROM stock_price
MATCH_RECOGNIZE (
    PARTITION BY company
    ORDER BY price_date
    ALL ROWS PER MATCH
    PATTERN (A | B)
    DEFINE
        A AS price < 130,
        B AS price > 140
)
WHERE company = 'DDOG'
----
DDOG 2024-01-01 125
DDOG 2024-01-02 128
DDOG 2024-01-04 129
DDOG 2024-01-09 141
DDOG 2024-01-11 143
DDOG 2024-01-12 147

# Test 2: Three-way alternation (A | B | C)
query TDI
SELECT * FROM stock_price
MATCH_RECOGNIZE (
    PARTITION BY company
    ORDER BY price_date
    ALL ROWS PER MATCH
    PATTERN (A | B | C)
    DEFINE
        A AS price < 130,
        B AS price BETWEEN 140 AND 145,
        C AS price == 147
)
WHERE company = 'DDOG'
----
DDOG 2024-01-01 125
DDOG 2024-01-02 128
DDOG 2024-01-04 129
DDOG 2024-01-09 141
DDOG 2024-01-11 143
DDOG 2024-01-12 147

# Test 3: Alternation with repetition branch ((A A) | B)
query TDI
SELECT * FROM stock_price
MATCH_RECOGNIZE (
    PARTITION BY company
    ORDER BY price_date
    ALL ROWS PER MATCH
    PATTERN ((A A) | B)
    DEFINE
        A AS price < 130,
        B AS price > 140
)
WHERE company = 'DDOG'
----
DDOG 2024-01-01 125
DDOG 2024-01-02 128
DDOG 2024-01-09 141
DDOG 2024-01-11 143
DDOG 2024-01-12 147

# Test 4: Alternation with start anchor (^ | A)
query TDI
SELECT * FROM stock_price
MATCH_RECOGNIZE (
    PARTITION BY company
    ORDER BY price_date
    ALL ROWS PER MATCH
    PATTERN ((^ | A) ANY)
    DEFINE
        A AS price > 500
)
ORDER BY company, price_date
----
AAPL 2024-01-01 185
AMZN 2024-01-01 150
CRM 2024-01-01 245
DDOG 2024-01-01 125
GOOGL 2024-01-01 140
META 2024-01-01 335
MSFT 2024-01-01 375
NFLX 2024-01-01 485
NFLX 2024-01-09 501
NFLX 2024-01-10 499
NFLX 2024-01-11 503
NFLX 2024-01-12 506
NVDA 2024-01-01 485
NVDA 2024-01-05 502
NVDA 2024-01-08 508
NVDA 2024-01-09 515
NVDA 2024-01-10 512
NVDA 2024-01-11 518
NVDA 2024-01-12 525
TSLA 2024-01-01 248

# Test 5: Alternation with complex conditions (A | B)
query TDI
SELECT * FROM stock_price
MATCH_RECOGNIZE (
    ALL ROWS PER MATCH
    PATTERN (A | B)
    DEFINE
        A AS company = 'DDOG' AND price > 130,
        B AS company = 'AAPL' AND price > 190
)
ORDER BY company, price_date
----
AAPL 2024-01-05 191
AAPL 2024-01-08 193
AAPL 2024-01-09 195
AAPL 2024-01-10 192
AAPL 2024-01-11 197
AAPL 2024-01-12 199
DDOG 2024-01-03 132
DDOG 2024-01-05 135
DDOG 2024-01-08 138
DDOG 2024-01-09 141
DDOG 2024-01-10 139
DDOG 2024-01-11 143
DDOG 2024-01-12 147

# Test 6: Alternation with left-most precedence
# Verify that left-most branch A wins over greedy A+
query TDIII
SELECT * FROM stock_price
MATCH_RECOGNIZE (
    PARTITION BY company
    ORDER BY price_date
    MEASURES
        match_number() AS match_no,
        match_sequence_number() AS seq_no
    ALL ROWS PER MATCH
    PATTERN (A | A+)
    DEFINE
        A AS price > 502
)
ORDER BY company, price_date
----
NFLX 2024-01-11 503 1 1
NFLX 2024-01-12 506 2 1
NVDA 2024-01-08 508 1 1
NVDA 2024-01-09 515 2 1
NVDA 2024-01-10 512 3 1
NVDA 2024-01-11 518 4 1
NVDA 2024-01-12 525 5 1

# Test 7: Alternation with greedy branch left‐most
# With PATTERN (A+ | A) the left‐most branch (A+) should match the longest
# sequence of A rows, producing a single match per company partition.
query TDIII
SELECT * FROM stock_price
MATCH_RECOGNIZE (
    PARTITION BY company
    ORDER BY price_date
    MEASURES
        match_number() AS match_no,
        match_sequence_number() AS seq_no
    ALL ROWS PER MATCH
    PATTERN (A+ | A)
    DEFINE
        A AS price > 502
)
ORDER BY company, price_date
----
NFLX 2024-01-11 503 1 1
NFLX 2024-01-12 506 1 2
NVDA 2024-01-08 508 1 1
NVDA 2024-01-09 515 1 2
NVDA 2024-01-10 512 1 3
NVDA 2024-01-11 518 1 4
NVDA 2024-01-12 525 1 5

# Nested group precedence: ( (A B) | A )
query TDIIIT
SELECT * FROM stock_price
MATCH_RECOGNIZE (
    PARTITION BY company
    ORDER BY price_date
    MEASURES
        match_number() AS match_no,
        match_sequence_number() AS seq_no,
        classifier()   AS cls
    ALL ROWS PER MATCH
    PATTERN ( (A B) | A )
    DEFINE
        A AS price < 130,
        B AS price > 130
)
WHERE company = 'DDOG'
ORDER BY price_date
----
DDOG 2024-01-01 125 1 1 A
DDOG 2024-01-02 128 2 1 A
DDOG 2024-01-03 132 2 2 B
DDOG 2024-01-04 129 3 1 A
DDOG 2024-01-05 135 3 2 B

# Nested group precedence: ( A | (A B) )
query TDIIIT
SELECT * FROM stock_price
MATCH_RECOGNIZE (
    PARTITION BY company
    ORDER BY price_date
    MEASURES
        match_number() AS match_no,
        match_sequence_number() AS seq_no,
        classifier()   AS cls
    ALL ROWS PER MATCH
    PATTERN ( A | (A B) )
    DEFINE
        A AS price < 130,
        B AS price > 130
)
WHERE company = 'DDOG'
ORDER BY price_date
----
DDOG 2024-01-01 125 1 1 A
DDOG 2024-01-02 128 2 1 A
DDOG 2024-01-04 129 3 1 A

# Nested alternations with anchor: ( (^ | A ) | (B | C) )
query TDIIIT
SELECT *
FROM stock_price
MATCH_RECOGNIZE (
    PARTITION BY company
    ORDER BY price_date
    MEASURES
        match_number() AS match_no,
        match_sequence_number() AS seq_no,
        classifier()   AS cls
    ALL ROWS PER MATCH
    PATTERN ( ( ^ | A ) | ( B | C ) )
    DEFINE
        A AS price < 130,
        B AS price BETWEEN 130 AND 140,
        C AS price > 140
)
WHERE company IN ('AAPL','DDOG')
ORDER BY company, price_date
----
AAPL 2024-01-01 185 1 1 C
AAPL 2024-01-02 187 2 1 C
AAPL 2024-01-03 189 3 1 C
AAPL 2024-01-04 186 4 1 C
AAPL 2024-01-05 191 5 1 C
AAPL 2024-01-08 193 6 1 C
AAPL 2024-01-09 195 7 1 C
AAPL 2024-01-10 192 8 1 C
AAPL 2024-01-11 197 9 1 C
AAPL 2024-01-12 199 10 1 C
DDOG 2024-01-01 125 1 1 A
DDOG 2024-01-02 128 2 1 A
DDOG 2024-01-03 132 3 1 B
DDOG 2024-01-04 129 4 1 A
DDOG 2024-01-05 135 5 1 B
DDOG 2024-01-08 138 6 1 B
DDOG 2024-01-09 141 7 1 C
DDOG 2024-01-10 139 8 1 B
DDOG 2024-01-11 143 9 1 C
DDOG 2024-01-12 147 10 1 C

# Alternation containing repetition vs repetition branch: ( (A|B)+ | A+ )
query TDIIIT
SELECT * FROM stock_price
MATCH_RECOGNIZE (
    PARTITION BY company
    ORDER BY price_date
    MEASURES
        match_number() AS match_no,
        match_sequence_number() AS seq_no,
        classifier()   AS cls
    ALL ROWS PER MATCH
    PATTERN ( (A | B)+ | A+ )
    DEFINE
        A AS price > 500,
        B AS price BETWEEN 480 AND 500
)
WHERE company = 'NFLX'
ORDER BY price_date
----
NFLX 2024-01-01 485 1 1 B
NFLX 2024-01-02 488 1 2 B
NFLX 2024-01-03 492 1 3 B
NFLX 2024-01-04 489 1 4 B
NFLX 2024-01-05 495 1 5 B
NFLX 2024-01-08 498 1 6 B
NFLX 2024-01-09 501 1 7 A
NFLX 2024-01-10 499 1 8 B
NFLX 2024-01-11 503 1 9 A
NFLX 2024-01-12 506 1 10 A
