# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

# Test generate_series table function
query I
SELECT * FROM generate_series(6)
----
0
1
2
3
4
5
6



query I rowsort
SELECT * FROM generate_series(1, 5)
----
1
2
3
4
5

query I rowsort
SELECT * FROM generate_series(1, 1)
----
1

query I rowsort
SELECT * FROM generate_series(3, 6)
----
3
4
5
6

# #generated_data > batch_size
query I
SELECT count(v1) FROM generate_series(-66666,66666) t1(v1)
----
133333




query I rowsort
SELECT SUM(v1) FROM generate_series(1, 5) t1(v1)
----
15

query I
SELECT * FROM generate_series(6, -1, -2)
----
6
4
2
0

query I
SELECT * FROM generate_series(6, 66, 666)
----
6



# Test generate_series with WHERE clause
query I rowsort
SELECT * FROM generate_series(1, 10) t1(v1) WHERE v1 % 2 = 0
----
10
2
4
6
8

# Test generate_series with ORDER BY
query I
SELECT * FROM generate_series(1, 5) t1(v1) ORDER BY v1 DESC
----
5
4
3
2
1

# Test generate_series with LIMIT
query I rowsort
SELECT * FROM generate_series(1, 100) t1(v1) LIMIT 5
----
1
2
3
4
5

# Test generate_series in subquery
query I rowsort
SELECT v1 + 10 FROM (SELECT * FROM generate_series(1, 3) t1(v1))
----
11
12
13

# Test generate_series with JOIN
query II rowsort
SELECT a.v1, b.v1
FROM generate_series(1, 3) a(v1)
JOIN generate_series(2, 4) b(v1)
ON a.v1 = b.v1 - 1
----
1 2
2 3
3 4

#
# Test generate_series with null arguments
#

query I
SELECT * FROM generate_series(NULL, 5)
----

query I
SELECT * FROM generate_series(1, NULL)
----

query I
SELECT * FROM generate_series(NULL, NULL)
----

query I
SELECT * FROM generate_series(1, 5, NULL)
----


query TT
EXPLAIN SELECT * FROM generate_series(1, 5)
----
logical_plan TableScan: generate_series() projection=[value]
physical_plan LazyMemoryExec: partitions=1, batch_generators=[generate_series: start=1, end=5, batch_size=8192]

#
# Test generate_series with invalid arguments
#

query error DataFusion error: Error during planning: Start is bigger than end, but increment is positive: Cannot generate infinite series
SELECT * FROM generate_series(5, 1)

query error DataFusion error: Error during planning: Start is smaller than end, but increment is negative: Cannot generate infinite series
SELECT * FROM generate_series(-6, 6, -1)

query error DataFusion error: Error during planning: Step cannot be zero
SELECT * FROM generate_series(-6, 6, 0)

query error DataFusion error: Error during planning: Start is bigger than end, but increment is positive: Cannot generate infinite series
SELECT * FROM generate_series(6, -6, 1)


statement error DataFusion error: Error during planning: generate_series function requires 1 to 3 arguments
SELECT * FROM generate_series(1, 2, 3, 4)


statement error DataFusion error: Error during planning: Argument \#1 must be an INTEGER, TIMESTAMP, DATE or NULL, got Utf8
SELECT * FROM generate_series('foo', 'bar')

# UDF and UDTF `generate_series` can be used simultaneously
query ? rowsort
SELECT generate_series(1, t1.end) FROM generate_series(3, 5) as t1(end)
----
[1, 2, 3, 4, 5]
[1, 2, 3, 4]
[1, 2, 3]

# Test range table function
query I
SELECT * FROM range(6)
----
0
1
2
3
4
5



query I rowsort
SELECT * FROM range(1, 5)
----
1
2
3
4

query I rowsort
SELECT * FROM range(1, 1)
----

query I rowsort
SELECT * FROM range(3, 6)
----
3
4
5

query I rowsort
SELECT * FROM range(1, 1+2)
----
1
2

# #generated_data > batch_size
query I
SELECT count(v1) FROM range(-66666,66666) t1(v1)
----
133332

query I rowsort
SELECT SUM(v1) FROM range(1, 5) t1(v1)
----
10

query I
SELECT * FROM range(6, -1, -2)
----
6
4
2
0

query I
SELECT * FROM range(6, 66, 666)
----
6



#
# Test range with null arguments
#

query I
SELECT * FROM range(NULL, 5)
----

query I
SELECT * FROM range(1, NULL)
----

query I
SELECT * FROM range(NULL, NULL)
----

query I
SELECT * FROM range(1, 5, NULL)
----


query TT
EXPLAIN SELECT * FROM range(1, 5)
----
logical_plan TableScan: range() projection=[value]
physical_plan LazyMemoryExec: partitions=1, batch_generators=[range: start=1, end=5, batch_size=8192]

#
# Test range with invalid arguments
#

query error DataFusion error: Error during planning: Start is bigger than end, but increment is positive: Cannot generate infinite series
SELECT * FROM range(5, 1)

query error DataFusion error: Error during planning: Start is smaller than end, but increment is negative: Cannot generate infinite series
SELECT * FROM range(-6, 6, -1)

query error DataFusion error: Error during planning: Step cannot be zero
SELECT * FROM range(-6, 6, 0)

query error DataFusion error: Error during planning: Start is bigger than end, but increment is positive: Cannot generate infinite series
SELECT * FROM range(6, -6, 1)


statement error DataFusion error: Error during planning: range function requires 1 to 3 arguments
SELECT * FROM range(1, 2, 3, 4)


statement error DataFusion error: Error during planning: Argument \#1 must be an INTEGER, TIMESTAMP, DATE or NULL, got Utf8
SELECT * FROM range('foo', 'bar')

statement error DataFusion error: Error during planning: Argument #2 must be an INTEGER or NULL, got Literal\(Utf8\("bar"\), None\)
SELECT * FROM range(1, 'bar')

# UDF and UDTF `range` can be used simultaneously
query ? rowsort
SELECT range(1, t1.end) FROM range(3, 5) as t1(end)
----
[1, 2, 3]
[1, 2]

#
# Test timestamp ranges
#

# Basic timestamp range with 1 day interval
query P rowsort
SELECT * FROM range(TIMESTAMP '2023-01-01T00:00:00', TIMESTAMP '2023-01-04T00:00:00', INTERVAL '1' DAY)
----
2023-01-01T00:00:00
2023-01-02T00:00:00
2023-01-03T00:00:00

# Timestamp range with hour interval
query P rowsort
SELECT * FROM range(TIMESTAMP '2023-01-01T00:00:00', TIMESTAMP '2023-01-01T03:00:00', INTERVAL '1' HOUR)
----
2023-01-01T00:00:00
2023-01-01T01:00:00
2023-01-01T02:00:00

# Timestamp range with month interval
query P rowsort
SELECT * FROM range(TIMESTAMP '2023-01-01T00:00:00', TIMESTAMP '2023-04-01T00:00:00', INTERVAL '1' MONTH)
----
2023-01-01T00:00:00
2023-02-01T00:00:00
2023-03-01T00:00:00

# Timestamp generate_series (includes end)
query P rowsort
SELECT * FROM generate_series(TIMESTAMP '2023-01-01T00:00:00', TIMESTAMP '2023-01-03T00:00:00', INTERVAL '1' DAY)
----
2023-01-01T00:00:00
2023-01-02T00:00:00
2023-01-03T00:00:00

# Timestamp range with timezone
query P
SELECT * FROM range(TIMESTAMP '2023-01-01T00:00:00+00:00', TIMESTAMP '2023-01-03T00:00:00+00:00', INTERVAL '1' DAY)
----
2023-01-01T00:00:00
2023-01-02T00:00:00

# Negative timestamp range (going backwards)
query P
SELECT * FROM range(TIMESTAMP '2023-01-03T00:00:00', TIMESTAMP '2023-01-01T00:00:00', INTERVAL '-1' DAY)
----
2023-01-03T00:00:00
2023-01-02T00:00:00

query error DataFusion error: Error during planning: Start is bigger than end, but increment is positive: Cannot generate infinite series
SELECT * FROM range(TIMESTAMP '2023-01-03T00:00:00', TIMESTAMP '2023-01-01T00:00:00', INTERVAL '1' DAY)

query error DataFusion error: Error during planning: Start is smaller than end, but increment is negative: Cannot generate infinite series
SELECT * FROM range(TIMESTAMP '2023-01-01T00:00:00', TIMESTAMP '2023-01-02T00:00:00', INTERVAL '-1' DAY)

query error DataFusion error: Error during planning: range function with timestamps requires exactly 3 arguments
SELECT * FROM range(TIMESTAMP '2023-01-03T00:00:00', TIMESTAMP '2023-01-01T00:00:00')

# Single timestamp (start == end)
query P
SELECT * FROM range(TIMESTAMP '2023-01-01T00:00:00', TIMESTAMP '2023-01-01T00:00:00', INTERVAL '1' DAY)  
----

# Timestamp range with NULL values
query P
SELECT * FROM range(NULL::TIMESTAMP, TIMESTAMP '2023-01-03T00:00:00', INTERVAL '1' DAY)
----

query P
SELECT * FROM range(TIMESTAMP '2023-01-01T00:00:00', NULL::TIMESTAMP, INTERVAL '1' DAY)
----

# No interval gives no rows
query P
SELECT * FROM range(TIMESTAMP '2023-01-01T00:00:00', TIMESTAMP '2023-01-03T00:00:00', NULL::INTERVAL)
----

# Zero-length interval gives error
query error DataFusion error: Error during planning: Step interval cannot be zero
SELECT * FROM range(TIMESTAMP '2023-01-01T00:00:00', TIMESTAMP '2023-01-03T00:00:00', INTERVAL '0' DAY)

# Timezone-aware
query P
SELECT * FROM range(TIMESTAMPTZ '2023-02-01T00:00:00-07:00', TIMESTAMPTZ '2023-02-01T09:00:00+01:00', INTERVAL '1' HOUR);
----
2023-02-01T07:00:00Z

# Basic date range with hour interval
query P
SELECT * FROM range(DATE '1992-01-01', DATE '1992-01-03', INTERVAL '6' HOUR);
----
1992-01-01T00:00:00
1992-01-01T06:00:00
1992-01-01T12:00:00
1992-01-01T18:00:00
1992-01-02T00:00:00
1992-01-02T06:00:00
1992-01-02T12:00:00
1992-01-02T18:00:00

# Date range with day interval
query P
SELECT * FROM range(DATE '1992-09-01', DATE '1992-09-05', INTERVAL '1' DAY);
----
1992-09-01T00:00:00
1992-09-02T00:00:00
1992-09-03T00:00:00
1992-09-04T00:00:00

# Date range with month interval
query P
SELECT * FROM range(DATE '1992-09-01', DATE '1993-01-01', INTERVAL '1' MONTH);
----
1992-09-01T00:00:00
1992-10-01T00:00:00
1992-11-01T00:00:00
1992-12-01T00:00:00

# Date range generate_series includes end
query P
SELECT * FROM generate_series(DATE '1992-09-01', DATE '1992-09-03', INTERVAL '1' DAY);
----
1992-09-01T00:00:00
1992-09-02T00:00:00
1992-09-03T00:00:00

query TT
EXPLAIN SELECT * FROM generate_series(DATE '1992-09-01', DATE '1992-09-03', INTERVAL '1' DAY);
----
logical_plan TableScan: generate_series() projection=[value]
physical_plan LazyMemoryExec: partitions=1, batch_generators=[generate_series: start=715305600000000000, end=715478400000000000, batch_size=8192]

# Backwards date range
query P
SELECT * FROM range(DATE '1992-09-05', DATE '1992-09-01', INTERVAL '-1' DAY);
----
1992-09-05T00:00:00
1992-09-04T00:00:00
1992-09-03T00:00:00
1992-09-02T00:00:00

# NULL handling for dates
query P
SELECT * FROM range(DATE '1992-09-01', NULL::DATE, INTERVAL '1' MONTH)
----

query TT
EXPLAIN SELECT * FROM range(DATE '1992-09-01', NULL::DATE, INTERVAL '1' MONTH)
----
logical_plan TableScan: range() projection=[value]
physical_plan LazyMemoryExec: partitions=1, batch_generators=[range: empty]

query P
SELECT * FROM range(NULL::DATE, DATE '1992-09-01', INTERVAL '1' MONTH)
----

query P
SELECT * FROM range(DATE '1992-09-01', DATE '1992-10-01', NULL::INTERVAL)
----

query error DataFusion error: Error during planning: Start is bigger than end, but increment is positive: Cannot generate infinite series
SELECT * FROM range(DATE '2023-01-03', DATE '2023-01-01', INTERVAL '1' DAY)

query error DataFusion error: Error during planning: Start is smaller than end, but increment is negative: Cannot generate infinite series
SELECT * FROM range(DATE '2023-01-01', DATE '2023-01-02', INTERVAL '-1' DAY)

query error DataFusion error: Error during planning: range function with dates requires exactly 3 arguments
SELECT * FROM range(DATE '2023-01-01', DATE '2023-01-03')

# Table function as relation
statement ok
CREATE OR REPLACE TABLE json_table (c INT) AS VALUES (1), (2);

query II
SELECT c, f.*  FROM json_table, LATERAL generate_series(1,2) f;
----
1 1
1 2
2 1
2 2
