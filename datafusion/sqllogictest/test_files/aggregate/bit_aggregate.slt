# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at

#   http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

statement ok
create table bit_aggregate_functions (
  c1 SMALLINT NOT NULL,
  c2 SMALLINT NOT NULL,
  c3 SMALLINT,
  tag varchar
)
as values
  (5,  10, 11,   'A'),
  (33, 11, null, 'B'),
  (9,  12, null, 'A');

# query_bit_and, query_bit_or, query_bit_xor
query IIIIIIIII
SELECT
  bit_and(c1),
  bit_and(c2),
  bit_and(c3),
  bit_or(c1),
  bit_or(c2),
  bit_or(c3),
  bit_xor(c1),
  bit_xor(c2),
  bit_xor(c3)
FROM bit_aggregate_functions
----
1 8 11 45 15 11 45 13 11

# query_bit_and, query_bit_or, query_bit_xor, with group
query IIIIIIIIIT
SELECT
  bit_and(c1),
  bit_and(c2),
  bit_and(c3),
  bit_or(c1),
  bit_or(c2),
  bit_or(c3),
  bit_xor(c1),
  bit_xor(c2),
  bit_xor(c3),
  tag
FROM bit_aggregate_functions
GROUP BY tag
ORDER BY tag
----
1 8 11 13 14 11 12 6 11 A
33 11 NULL 33 11 NULL 33 11 NULL B


# bit_and_i32
statement ok
create table t (c int) as values (4), (7), (15);

query IT
Select bit_and(c), arrow_typeof(bit_and(c))  from t;
----
4 Int32

statement ok
drop table t;

# bit_and_i32_with_nulls
statement ok
create table t (c int) as values (1), (NULL), (3), (5);

query IT
Select bit_and(c), arrow_typeof(bit_and(c)) from t;
----
1 Int32

statement ok
drop table t;

# bit_and_i32_all_nulls
statement ok
create table t (c int) as values (NULL), (NULL);

query IT
Select bit_and(c), arrow_typeof(bit_and(c)) from t;
----
NULL Int32

statement ok
drop table t;

# bit_and_u32
statement ok
create table t (c int unsigned) as values (4), (7), (15);

query IT
Select bit_and(c), arrow_typeof(bit_and(c)) from t;
----
4 UInt32

statement ok
drop table t;

# bit_or_i32
statement ok
create table t (c int) as values (4), (7), (15);

query IT
Select bit_or(c), arrow_typeof(bit_or(c))  from t;
----
15 Int32

statement ok
drop table t;

# bit_or_i32_with_nulls
statement ok
create table t (c int) as values (1), (NULL), (3), (5);

query IT
Select bit_or(c), arrow_typeof(bit_or(c))  from t;
----
7 Int32

statement ok
drop table t;

#bit_or_i32_all_nulls
statement ok
create table t (c int) as values (NULL), (NULL);

query IT
Select bit_or(c), arrow_typeof(bit_or(c))  from t;
----
NULL Int32

statement ok
drop table t;


#bit_or_u32
statement ok
create table t (c int unsigned) as values (4), (7), (15);

query IT
Select bit_or(c), arrow_typeof(bit_or(c))  from t;
----
15 UInt32

statement ok
drop table t;

#bit_xor_i32
statement ok
create table t (c int) as values (4), (7), (4), (7), (15);

query IT
Select bit_xor(c), arrow_typeof(bit_xor(c))  from t;
----
15 Int32

statement ok
drop table t;

# bit_xor_i32_with_nulls
statement ok
create table t (c int) as values (1), (1), (NULL), (3), (5);

query IT
Select bit_xor(c), arrow_typeof(bit_xor(c))  from t;
----
6 Int32

statement ok
drop table t;

# bit_xor_i32_all_nulls
statement ok
create table t (c int) as values (NULL), (NULL);

query IT
Select bit_xor(c), arrow_typeof(bit_xor(c))  from t;
----
NULL Int32

statement ok
drop table t;

# bit_xor_u32
statement ok
create table t (c int unsigned) as values (4), (7), (4), (7), (15);

query IT
Select bit_xor(c), arrow_typeof(bit_xor(c))  from t;
----
15 UInt32

statement ok
drop table t;

# bit_xor_distinct_i32
statement ok
create table t (c int) as values (4), (7), (4), (7), (15);

query IT
Select bit_xor(DISTINCT c), arrow_typeof(bit_xor(DISTINCT c))  from t;
----
12 Int32

statement ok
drop table t;

# bit_xor_distinct_i32_with_nulls
statement ok
create table t (c int) as values (1), (1), (NULL), (3), (5);

query IT
Select bit_xor(DISTINCT c), arrow_typeof(bit_xor(DISTINCT c))  from t;
----
7 Int32


statement ok
drop table t;

# bit_xor_distinct_i32_all_nulls
statement ok
create table t (c int ) as values (NULL), (NULL);

query IT
Select bit_xor(DISTINCT c), arrow_typeof(bit_xor(DISTINCT c))  from t;
----
NULL Int32


statement ok
drop table t;

# bit_xor_distinct_u32
statement ok
create table t (c int unsigned) as values (4), (7), (4), (7), (15);

query IT
Select bit_xor(DISTINCT c), arrow_typeof(bit_xor(DISTINCT c))  from t;
----
12 UInt32

statement ok
drop table t;
