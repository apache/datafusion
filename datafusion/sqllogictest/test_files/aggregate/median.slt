# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at

#   http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

include ./init.slt.part

# csv_query_approx_median_1
query I
SELECT approx_median(c2) FROM aggregate_test_100
----
3

# csv_query_approx_median_2
query I
SELECT approx_median(c6) FROM aggregate_test_100
----
1146409980542786560

# csv_query_approx_median_3
query R
SELECT approx_median(c12) FROM aggregate_test_100
----
0.555006541052

# csv_query_approx_median_4
# test with string, approx median only supports numeric
statement error
SELECT approx_median(c1) FROM aggregate_test_100

# csv_query_median_1
query I
SELECT median(c2) FROM aggregate_test_100
----
3

# csv_query_median_2
query I
SELECT median(c6) FROM aggregate_test_100
----
1125553990140691277

# csv_query_median_3
query R
SELECT median(c12) FROM aggregate_test_100
----
0.551390054439

# median_i8
query I
SELECT median(col_i8) FROM median_table
----
-14

# distinct_median_i8
query I
SELECT median(distinct col_i8) FROM median_table
----
100

query II
SELECT median(col_i8), median(distinct col_i8) FROM median_table
----
-14 100

# approx_distinct_median_i8
query I
SELECT approx_median(distinct col_i8) FROM median_table
----
100

statement error DataFusion error: This feature is not implemented: APPROX_MEDIAN\(DISTINCT\) aggregations are not available
SELECT approx_median(col_i8), approx_median(distinct col_i8) FROM median_table

# median_i16
query I
SELECT median(col_i16) FROM median_table
----
-16334

# median_i32
query I
SELECT median(col_i32) FROM median_table
----
-1073741774

# median_i64
query I
SELECT median(col_i64) FROM median_table
----
-4611686018427387854

# median_u8
query I
SELECT median(col_u8) FROM median_table
----
50

# median_u16
query I
SELECT median(col_u16) FROM median_table
----
50

# median_u32
query I
SELECT median(col_u32) FROM median_table
----
50

# median_u64
query I
SELECT median(col_u64) FROM median_table
----
50

# median_f32
query R
SELECT median(col_f32) FROM median_table
----
2.75

# median_f64
query R
SELECT median(col_f64) FROM median_table
----
2.75

# median_f64_nan
query R
SELECT median(col_f64_nan) FROM median_table
----
NaN

# approx_median_f64_nan
query R
SELECT approx_median(col_f64_nan) FROM median_table
----
NaN

# median decimal
statement ok
create table t(c decimal(10, 4)) as values (0.0001), (0.0002), (0.0003), (0.0004), (0.0005), (0.0006);

query RT
select median(c), arrow_typeof(median(c)) from t;
----
0.0003 Decimal128(10, 4)

query RT
select approx_median(c), arrow_typeof(approx_median(c)) from t;
----
0.00035 Float64

statement ok
drop table t;

# median decimal with nulls
statement ok
create table t(c decimal(10, 4)) as values (0.0001), (null), (0.0003), (0.0004), (0.0005);

query RT
select median(c), arrow_typeof(median(c)) from t;
----
0.0003 Decimal128(10, 4)

statement ok
drop table t;

# median decimal with all nulls
statement ok
create table t(c decimal(10, 4)) as values (null), (null), (null);

query RT
select median(c), arrow_typeof(median(c)) from t;
----
NULL Decimal128(10, 4)

statement ok
drop table t;

# median odd
statement ok
create table t(c int) as values (1), (2), (3), (4), (5);

query I
select median(c) from t;
----
3

statement ok
drop table t;

# median even
statement ok
create table t(c int) as values (1), (2), (3), (4), (5), (6);

query I
select median(c) from t;
----
3

statement ok
drop table t;

# median with nulls
statement ok
create table t(c int) as values (1), (null), (3), (4), (5);

query I
select median(c) from t;
----
3

statement ok
drop table t;

# median with all nulls
statement ok
create table t(c int) as values (null), (null), (null);

query I
select median(c) from t;
----
NULL

statement ok
drop table t;

# median u32
statement ok
create table t(c int unsigned) as values (1), (2), (3), (4), (5);

query I
select median(c) from t;
----
3

statement ok
drop table t;

# median f32
statement ok
create table t(c float) as values (1.1), (2.2), (3.3), (4.4), (5.5);

query R
select median(c) from t;
----
3.3

statement ok
drop table t;

# median distinct decimal
statement ok
create table t(c decimal(10, 4)) as values (0.0001), (0.0001), (0.0001), (0.0001), (0.0002), (0.0002), (0.0003), (0.0003);

query R
select median(distinct c) from t;
----
0.0002

statement ok
drop table t;

# median distinct decimal with nulls
statement ok
create table t(c decimal(10, 4)) as values (0.0001), (0.0001), (0.0001), (null), (null), (0.0002), (0.0003), (0.0003);

query R
select median(distinct c) from t;
----
0.0002

statement ok
drop table t;

# distinct median i32 odd
statement ok
create table t(c int) as values (2), (1), (1), (2), (1), (3);

query I
select median(distinct c) from t;
----
2

statement ok
drop table t;

# distinct median i32 even
statement ok
create table t(c int) as values (1), (1), (3), (1), (1);

query I
select median(distinct c) from t;
----
2

statement ok
drop table t;

# distinct median i32 with nulls
statement ok
create table t(c int) as values (1), (null), (1), (1), (3);

query I
select median(distinct c) from t;
----
2

statement ok
drop table t;

# distinct median u32 odd
statement ok
create table t(c int unsigned) as values (1), (1), (2), (1), (3);

query I
select median(distinct c) from t;
----
2

statement ok
drop table t;

# distinct median u32 even
statement ok
create table t(c int unsigned) as values (1), (1), (1), (1), (3), (3);

query I
select median(distinct c) from t;
----
2

statement ok
drop table t;

# distinct median f32 odd
statement ok
create table t(c float) as values (3), (2), (1), (1), (1);

query R
select median(distinct c) from t;
----
2

statement ok
drop table t;

# distinct median f32 even
statement ok
create table t(c float) as values (1), (1), (1), (1), (2);

query R
select median(distinct c) from t;
----
1.5

statement ok
drop table t;

# distinct median f64 odd
statement ok
create table t(c double) as values (1), (1), (1), (2), (3);

query R
select median(distinct c) from t;
----
2

statement ok
drop table t;

# distinct median f64 even
statement ok
create table t(c double) as values (1), (1), (1), (1), (2);

query R
select median(distinct c) from t;
----
1.5

statement ok
drop table t;

# distinct median i32
statement ok
create table t(c int) as values (1), (1), (1), (1), (2), (2), (3), (3);

query I
select median(distinct c) from t;
----
2

statement ok
drop table t;

# optimize distinct median to group by
statement ok
create table t(c int) as values (1), (1), (1), (1), (2), (2), (3), (3);

query TT
explain select median(distinct c) from t;
----
logical_plan
01)Projection: median(alias1) AS median(DISTINCT t.c)
02)--Aggregate: groupBy=[[]], aggr=[[median(alias1)]]
03)----Aggregate: groupBy=[[t.c AS alias1]], aggr=[[]]
04)------TableScan: t projection=[c]
physical_plan
01)ProjectionExec: expr=[median(alias1)@0 as median(DISTINCT t.c)]
02)--AggregateExec: mode=Final, gby=[], aggr=[median(alias1)]
03)----CoalescePartitionsExec
04)------AggregateExec: mode=Partial, gby=[], aggr=[median(alias1)]
05)--------AggregateExec: mode=FinalPartitioned, gby=[alias1@0 as alias1], aggr=[]
06)----------CoalesceBatchesExec: target_batch_size=8192
07)------------RepartitionExec: partitioning=Hash([alias1@0], 4), input_partitions=4
08)--------------RepartitionExec: partitioning=RoundRobinBatch(4), input_partitions=1
09)----------------AggregateExec: mode=Partial, gby=[c@0 as alias1], aggr=[]
10)------------------MemoryExec: partitions=1, partition_sizes=[1]

statement ok
drop table t;

# median_multi
# test case for https://github.com/apache/datafusion/issues/3105
# has an intermediate grouping
statement ok
create table cpu (host string, usage float) as select * from (values
('host0', 90.1),
('host1', 90.2),
('host1', 90.4)
);

query TR rowsort
select host, median(usage) from cpu group by host;
----
host0 90.1
host1 90.3

statement ok
drop table cpu;

# this test is to show create table as and select into works in the same way
statement ok
SELECT * INTO cpu
FROM (VALUES
    ('host0', 90.1),
    ('host1', 90.2),
    ('host1', 90.4)
  ) AS cpu (host, usage);

query TR rowsort
select host, median(usage) from cpu group by host;
----
host0 90.1
host1 90.3

query R
select median(usage) from cpu;
----
90.2

statement ok
drop table cpu;

# median_multi_odd

# data is not sorted and has an odd number of values per group
statement ok
create table cpu (host string, usage float) as select * from (values
  ('host0', 90.2),
  ('host1', 90.1),
  ('host1', 90.5),
  ('host0', 90.5),
  ('host1', 90.0),
  ('host1', 90.3),
  ('host0', 87.9),
  ('host1', 89.3)
);

query TR rowsort
select host, median(usage) from cpu group by host;
----
host0 90.2
host1 90.1


statement ok
drop table cpu;

# median_multi_even
# data is not sorted and has an odd number of values per group
statement ok
create table cpu (host string, usage float) as select * from (values ('host0', 90.2), ('host1', 90.1), ('host1', 90.5), ('host0', 90.5), ('host1', 90.0), ('host1', 90.3), ('host1', 90.2), ('host1', 90.3));

query TR rowsort
select host, median(usage) from cpu group by host;
----
host0 90.35
host1 90.25

statement ok
drop table cpu
