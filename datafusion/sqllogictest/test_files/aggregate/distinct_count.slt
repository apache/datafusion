# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at

#   http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

# Distinct Count for string
# (test for the specialized implementation of distinct count for strings)

# UTF8 string matters for string to &[u8] conversion, add it to prevent regression
statement ok
create table distinct_count_string_table as values 
    (1, 'a', 'longstringtest_a', '台灣'),
    (2, 'b', 'longstringtest_b1', '日本'),
    (2, 'b', 'longstringtest_b2', '中國'),
    (3, 'c', 'longstringtest_c1', '美國'),
    (3, 'c', 'longstringtest_c2', '歐洲'),
    (3, 'c', 'longstringtest_c3', '韓國')
;

# run through update_batch
query IIII
select count(distinct column1), count(distinct column2), count(distinct column3), count(distinct column4) from distinct_count_string_table;
----
3 3 6 6

# run through merge_batch
query IIII rowsort
select count(distinct column1), count(distinct column2), count(distinct column3), count(distinct column4) from distinct_count_string_table group by column1;
----
1 1 1 1
1 1 2 2
1 1 3 3


# test with long strings as well
statement ok
create table distinct_count_long_string_table as
SELECT column1,
  arrow_cast(column2, 'LargeUtf8') as column2,
  arrow_cast(column3, 'LargeUtf8') as column3,
  arrow_cast(column4, 'LargeUtf8') as column4
FROM distinct_count_string_table;

# run through update_batch
query IIII
select count(distinct column1), count(distinct column2), count(distinct column3), count(distinct column4) from distinct_count_long_string_table;
----
3 3 6 6

# run through merge_batch
query IIII rowsort
select count(distinct column1), count(distinct column2), count(distinct column3), count(distinct column4) from distinct_count_long_string_table group by column1;
----
1 1 1 1
1 1 2 2
1 1 3 3

statement ok
drop table distinct_count_long_string_table;


# test with binary strings as well
statement ok
create table distinct_count_binary_table as
SELECT column1,
  arrow_cast(column2, 'Binary') as column2,
  arrow_cast(column3, 'Binary') as column3,
  arrow_cast(column4, 'Binary') as column4
FROM distinct_count_string_table;

# run through update_batch
query IIII
select count(distinct column1), count(distinct column2), count(distinct column3), count(distinct column4) from distinct_count_binary_table;
----
3 3 6 6

# run through merge_batch
query IIII rowsort
select count(distinct column1), count(distinct column2), count(distinct column3), count(distinct column4) from distinct_count_binary_table group by column1;
----
1 1 1 1
1 1 2 2
1 1 3 3

statement ok
drop table distinct_count_binary_table;


# test with large binary strings as well
statement ok
create table distinct_count_large_binary_table as
SELECT column1,
  arrow_cast(column2, 'LargeBinary') as column2,
  arrow_cast(column3, 'LargeBinary') as column3,
  arrow_cast(column4, 'LargeBinary') as column4
FROM distinct_count_string_table;

# run through update_batch
query IIII
select count(distinct column1), count(distinct column2), count(distinct column3), count(distinct column4) from distinct_count_large_binary_table;
----
3 3 6 6

# run through merge_batch
query IIII rowsort
select count(distinct column1), count(distinct column2), count(distinct column3), count(distinct column4) from distinct_count_large_binary_table group by column1;
----
1 1 1 1
1 1 2 2
1 1 3 3

statement ok
drop table distinct_count_large_binary_table;



## Cleanup from distinct count tests
statement ok
drop table distinct_count_string_table;
