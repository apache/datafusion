statement ok
CREATE TABLE students(
    id int,
    name varchar,
    major varchar,
    year timestamp
)
AS VALUES
    (1,'A','math','2014-01-01T00:00:00'::timestamp),
    (2,'B','math','2015-01-01T00:00:00'::timestamp),
    (3,'C','math','2016-01-01T00:00:00'::timestamp)
;

statement ok
CREATE TABLE exams(
    sid int,
    curriculum varchar,
    grade int,
    date timestamp
)
AS VALUES
    (1, 'math', 10, '2014-01-01T00:00:00'::timestamp),
    (2, 'math', 9, '2015-01-01T00:00:00'::timestamp),
    (3, 'math', 4, '2016-01-01T00:00:00'::timestamp)
;

## Multi-level correlated subquery
##query TT
##explain select * from exams e1 where grade > (select avg(grade) from exams as e2 where e1.sid = e2.sid
##and e2.curriculum=(select max(grade) from exams e3 group by curriculum))
##----

# query TT
#explain select * from exams e1 where grade > (select avg(grade) from exams as e2 where e1.sid = e2.sid
# and e2.sid='some fixed value 1'
# or e2.sid='some fixed value 2'
#)
# ----


## select * from exams e1, (
##     select avg(score) as avg_score, e2.sid, e2.year,e2.subject from exams e2 group by e2.sid,e2.year,e2.subject 
## ) as pulled_up where e1.score > pulled_up.avg_score

query TT
explain select s.name, (
    select count(e2.grade) as c from exams e2
    having c > 10
) from students s
----

## query TT
## explain select s.name, e.curriculum from students s, exams e where s.id=e.sid
## and s.major='math' and 0 < (
##     select count(e2.grade) from exams e2 where s.id=e2.sid and e2.grade>0
##     having count(e2.grade) < 10
## -- or (s.year<e2.date and e2.curriculum=s.major) -- all exams taken by the elder students in the same major
## -- or e2.sid='some fixed value' # maybe rewritten into a full outer join
## )
## ----

