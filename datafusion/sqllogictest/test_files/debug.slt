statement ok
CREATE TABLE students(
    id int,
    name varchar,
    major varchar,
    year timestamp
)
AS VALUES
    (1,'A','math','2014-01-01T00:00:00'::timestamp),
    (2,'B','math','2015-01-01T00:00:00'::timestamp),
    (3,'C','math','2016-01-01T00:00:00'::timestamp)
;

statement ok
CREATE TABLE exams(
    sid int,
    curriculum varchar,
    grade int,
    date timestamp
)
AS VALUES
    (1, 'math', 10, '2014-01-01T00:00:00'::timestamp),
    (2, 'math', 9, '2015-01-01T00:00:00'::timestamp),
    (3, 'math', 4, '2016-01-01T00:00:00'::timestamp)
;

## Multi-level correlated subquery
##query TT
##explain select * from exams e1 where grade > (select avg(grade) from exams as e2 where e1.sid = e2.sid
##and e2.curriculum=(select max(grade) from exams e3 group by curriculum))
##----

query TT
explain select * from exams e1 where grade > (select avg(grade) from exams as e2 where e1.sid = e2.sid)
----


## select * from exams e1, (
##     select avg(score) as avg_score, e2.sid, e2.year,e2.subject from exams e2 group by e2.sid,e2.year,e2.subject 
## ) as pulled_up where e1.score > pulled_up.avg_score


## query TT
## explain select s.name, e.curriculum from students s, exams e where s.id=e.sid
## and (s.major='math') and e.grade < (
##     select avg(e2.grade) from exams e2 where s.id=e2.sid or (
##         s.year<e2.date and e2.curriculum=s.major -- all exams taken by the elder students in the same major
##     )
## )
## ----
## logical_plan
## 01)Projection: s.name, e.curriculum
## 02)--Inner Join: s.id = e.sid
## 03)----SubqueryAlias: s
## 04)------Projection: students.id, students.name
## 05)--------Filter: students.major = Utf8("math")
## 06)----------TableScan: students projection=[id, name, major]
## 07)----SubqueryAlias: e
## 08)------Projection: exams.sid, exams.curriculum
## 09)--------Filter: CAST(exams.grade AS Float64) < (<subquery>)
## 10)----------Subquery:
## 11)------------Projection: avg(e2.grade)
## 12)--------------Aggregate: groupBy=[[]], aggr=[[avg(CAST(e2.grade AS Float64))]]
## 13)----------------SubqueryAlias: e2
## 14)------------------Filter: outer_ref(s.id) = exams.sid OR outer_ref(s.year) < exams.date AND exams.curriculum = outer_ref(s.major)
## 15)--------------------TableScan: exams
## 16)----------TableScan: exams projection=[sid, curriculum, grade]