statement ok
set datafusion.optimizer.prefer_hash_join = false;

statement ok
set datafusion.execution.batch_size = 1;

query TT
explain select * from (
with t as (
    select id_a id_a_1, id_a % 5 id_a_2 from (select unnest(range(0,10)) id_a)
), t1 as (
    select id_b % 10 id_b_1, id_b + 2 id_b_2 from (select unnest(range(0,10)) id_b)
)
select * from t full join t1 on t.id_a_2 = t1.id_b_1 and t.id_a_1 > t1.id_b_2
) order by 1, 2, 3, 4
---
----
logical_plan
01)Sort: t.id_a_1 ASC NULLS LAST, t.id_a_2 ASC NULLS LAST, t1.id_b_1 ASC NULLS LAST, t1.id_b_2 ASC NULLS LAST
02)--Full Join: t.id_a_2 = t1.id_b_1 Filter: t.id_a_1 > t1.id_b_2
03)----SubqueryAlias: t
04)------Projection: id_a AS id_a_1, id_a % Int64(5) AS id_a_2
05)--------Projection: UNNEST(range(Int64(0),Int64(10))) AS id_a
06)----------Unnest: lists[UNNEST(range(Int64(0),Int64(10)))] structs[]
07)------------Projection: List([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) AS UNNEST(range(Int64(0),Int64(10)))
08)--------------EmptyRelation
09)----SubqueryAlias: t1
10)------Projection: id_b % Int64(10) AS id_b_1, id_b + Int64(2) AS id_b_2
11)--------Projection: UNNEST(range(Int64(0),Int64(10))) AS id_b
12)----------Unnest: lists[UNNEST(range(Int64(0),Int64(10)))] structs[]
13)------------Projection: List([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) AS UNNEST(range(Int64(0),Int64(10)))
14)--------------EmptyRelation
physical_plan
01)SortPreservingMergeExec: [id_a_1@0 ASC NULLS LAST,id_a_2@1 ASC NULLS LAST,id_b_1@2 ASC NULLS LAST,id_b_2@3 ASC NULLS LAST]
02)--SortExec: expr=[id_a_1@0 ASC NULLS LAST,id_a_2@1 ASC NULLS LAST,id_b_1@2 ASC NULLS LAST,id_b_2@3 ASC NULLS LAST], preserve_partitioning=[true]
03)----SortMergeJoin: join_type=Full, on=[(id_a_2@1, id_b_1@0)], filter=id_a_1@0 > id_b_2@1
04)------SortExec: expr=[id_a_2@1 ASC], preserve_partitioning=[true]
05)--------CoalesceBatchesExec: target_batch_size=1
06)----------RepartitionExec: partitioning=Hash([id_a_2@1], 4), input_partitions=4
07)------------ProjectionExec: expr=[id_a@0 as id_a_1, id_a@0 % 5 as id_a_2]
08)--------------RepartitionExec: partitioning=RoundRobinBatch(4), input_partitions=1
09)----------------ProjectionExec: expr=[UNNEST(range(Int64(0),Int64(10)))@0 as id_a]
10)------------------UnnestExec
11)--------------------ProjectionExec: expr=[[0, 1, 2, 3, 4, 5, 6, 7, 8, 9] as UNNEST(range(Int64(0),Int64(10)))]
12)----------------------PlaceholderRowExec
13)------SortExec: expr=[id_b_1@0 ASC], preserve_partitioning=[true]
14)--------CoalesceBatchesExec: target_batch_size=1
15)----------RepartitionExec: partitioning=Hash([id_b_1@0], 4), input_partitions=4
16)------------ProjectionExec: expr=[id_b@0 % 10 as id_b_1, id_b@0 + 2 as id_b_2]
17)--------------RepartitionExec: partitioning=RoundRobinBatch(4), input_partitions=1
18)----------------ProjectionExec: expr=[UNNEST(range(Int64(0),Int64(10)))@0 as id_b]
19)------------------UnnestExec
20)--------------------ProjectionExec: expr=[[0, 1, 2, 3, 4, 5, 6, 7, 8, 9] as UNNEST(range(Int64(0),Int64(10)))]
21)----------------------PlaceholderRowExec

query IIII
select * from (
with t as (
    select id_a id_a_1, id_a % 5 id_a_2 from (select unnest(make_array(5, 6, 7, 8, 9, 0, 1, 2, 3, 4)) id_a)
), t1 as (
    select id_b % 10 id_b_1, id_b + 2 id_b_2 from (select unnest(make_array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) id_b)
)
select * from t full join t1 on t.id_a_2 = t1.id_b_1 and t.id_a_1 > t1.id_b_2
) order by 1, 2, 3, 4
----
0 0 NULL NULL
1 1 NULL NULL
2 2 NULL NULL
3 3 NULL NULL
4 4 NULL NULL
5 0 0 2
6 1 1 3
7 2 2 4
8 3 3 5
9 4 4 6
NULL NULL 5 7
NULL NULL 6 8
NULL NULL 7 9
NULL NULL 8 10
NULL NULL 9 11
