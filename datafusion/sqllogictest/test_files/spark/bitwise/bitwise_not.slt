# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at

#   http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

# This file was originally created by a porting script from:
#   https://github.com/lakehq/sail/tree/43b6ed8221de5c4c4adbedbb267ae1351158b43c/crates/sail-spark-connect/tests/gold_data/function
# This file is part of the implementation of the datafusion-spark function library.
# For more information, please see:
#   https://github.com/apache/datafusion/issues/15914

## Original Query: SELECT bitwise_not(0);
## PySpark 3.5.5 Result: {'bitwise_not(0)': -1, 'typeof(bitwise_not(0))': 'int', 'typeof(0)': 'int'}

# Basic tests with different integer types
query I
SELECT bitwise_not(0::int);
----
-1

query I
SELECT bitwise_not(1::int);
----
-2

query I
SELECT bitwise_not(7::int);
----
-8

query I
SELECT bitwise_not(15::int);
----
-16

query I
SELECT bitwise_not(255::int);
----
-256

query I
SELECT bitwise_not(1023::int);
----
-1024

# Tests with negative numbers (two's complement)
query I
SELECT bitwise_not(-1::int);
----
0

query I
SELECT bitwise_not(-2::int);
----
1

query I
SELECT bitwise_not(-3::int);
----
2

# Tests with different integer types
query I
SELECT bitwise_not(arrow_cast(0, 'Int8'));
----
-1

query I
SELECT bitwise_not(arrow_cast(15, 'Int8'));
----
-16

query I
SELECT bitwise_not(arrow_cast(-1, 'Int8'));
----
0

query I
SELECT bitwise_not(arrow_cast(0, 'Int16'));
----
-1

query I
SELECT bitwise_not(arrow_cast(255, 'Int16'));
----
-256

query I
SELECT bitwise_not(arrow_cast(-1, 'Int16'));
----
0

query I
SELECT bitwise_not(arrow_cast(0, 'Int32'));
----
-1

query I
SELECT bitwise_not(arrow_cast(255, 'Int32'));
----
-256

query I
SELECT bitwise_not(arrow_cast(-1, 'Int32'));
----
0

query I
SELECT bitwise_not(arrow_cast(0, 'Int64'));
----
-1

query I
SELECT bitwise_not(arrow_cast(255, 'Int64'));
----
-256

query I
SELECT bitwise_not(arrow_cast(-1, 'Int64'));
----
0

# Tests with NULL values
query I
SELECT bitwise_not(arrow_cast(NULL, 'Int32'));
----
NULL

query I
SELECT bitwise_not(arrow_cast(NULL, 'Int8'));
----
NULL

query I
SELECT bitwise_not(arrow_cast(NULL, 'Int64'));
----
NULL

# Tests with edge cases
query I
SELECT bitwise_not(arrow_cast(0, 'Int32')) as zero_not;
----
-1

query I
SELECT bitwise_not(arrow_cast(1, 'Int32')) as one_not;
----
-2

query I
SELECT bitwise_not(arrow_cast(2, 'Int32')) as two_not;
----
-3

query I
SELECT bitwise_not(arrow_cast(3, 'Int32')) as three_not;
----
-4

query I
SELECT bitwise_not(arrow_cast(4, 'Int32')) as four_not;
----
-5

query I
SELECT bitwise_not(arrow_cast(5, 'Int32')) as five_not;
----
-6

# Tests with large numbers
query I
SELECT bitwise_not(arrow_cast(2147483647, 'Int32'));
----
-2147483648

query I
SELECT bitwise_not(arrow_cast(-2147483648, 'Int32'));
----
2147483647

query I
SELECT bitwise_not(arrow_cast(9223372036854775807, 'Int64'));
----
-9223372036854775808

query I
SELECT bitwise_not(arrow_cast(-9223372036854775808, 'Int64'));
----
9223372036854775807
