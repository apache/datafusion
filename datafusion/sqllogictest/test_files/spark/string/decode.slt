## Original Query: SELECT decode(2, 1, 'Southlake', 2, 'San Francisco', 3, 'New Jersey', 4, 'Seattle', 'Non domestic');
## PySpark 3.5.5 Result: {'typeof(2)': 'int', 'typeof(1)': 'int', 'typeof(southlake)': 'string', 'typeof(san francisco)': 'string', 'typeof(3)': 'int', 'typeof(new jersey)': 'string', 'typeof(4)': 'int', 'typeof(seattle)': 'string', 'typeof(non domestic)': 'string'}
#query
#SELECT decode(2::int, 1::int, 'southlake'::string, 'san francisco'::string, 3::int, 'new jersey'::string, 4::int, 'seattle'::string, 'non domestic'::string);

## Original Query: SELECT decode(6, 1, 'Southlake', 2, 'San Francisco', 3, 'New Jersey', 4, 'Seattle');
## PySpark 3.5.5 Result: {'typeof(6)': 'int', 'typeof(1)': 'int', 'typeof(southlake)': 'string', 'typeof(2)': 'int', 'typeof(san francisco)': 'string', 'typeof(3)': 'int', 'typeof(new jersey)': 'string', 'typeof(4)': 'int', 'typeof(seattle)': 'string'}
#query
#SELECT decode(6::int, 1::int, 'southlake'::string, 2::int, 'san francisco'::string, 3::int, 'new jersey'::string, 4::int, 'seattle'::string);

## Original Query: SELECT decode(6, 1, 'Southlake', 2, 'San Francisco', 3, 'New Jersey', 4, 'Seattle', 'Non domestic');
## PySpark 3.5.5 Result: {'typeof(6)': 'int', 'typeof(1)': 'int', 'typeof(southlake)': 'string', 'typeof(2)': 'int', 'typeof(san francisco)': 'string', 'typeof(3)': 'int', 'typeof(new jersey)': 'string', 'typeof(4)': 'int', 'typeof(seattle)': 'string', 'typeof(non domestic)': 'string'}
#query
#SELECT decode(6::int, 1::int, 'southlake'::string, 2::int, 'san francisco'::string, 3::int, 'new jersey'::string, 4::int, 'seattle'::string, 'non domestic'::string);

## Original Query: SELECT decode(null, 6, 'Spark', NULL, 'SQL', 4, 'rocks');
## PySpark 3.5.5 Result: {'typeof(null)': 'void', 'typeof(6)': 'int', 'typeof(spark)': 'string', 'typeof(sql)': 'string', 'typeof(4)': 'int', 'typeof(rocks)': 'string'}
#query
#SELECT decode(null::void, 6::int, 'spark'::string, 'sql'::string, 4::int, 'rocks'::string);

