# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at

#   http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

# This file was originally created by a porting script from:
#   https://github.com/lakehq/sail/tree/43b6ed8221de5c4c4adbedbb267ae1351158b43c/crates/sail-spark-connect/tests/gold_data/function
# This file is part of the implementation of the datafusion-spark function library.
# For more information, please see:
#   https://github.com/apache/datafusion/issues/15914

# Basic PMOD tests with positive integers
query I
SELECT pmod(10::int, 3::int) as pmod_1;
----
1

query I
SELECT pmod(7::int, 2::int) as pmod_2;
----
1

query I
SELECT pmod(15::int, 4::int) as pmod_3;
----
3

# PMOD tests with negative integers (should return positive remainder)
query I
SELECT pmod(-10::int, 3::int) as pmod_negative_1;
----
2

query I
SELECT pmod(-7::int, 3::int) as pmod_negative_2;
----
2

query I
SELECT pmod(-15::int, 4::int) as pmod_negative_3;
----
1

query I
SELECT pmod(-5::int, 5::int) as pmod_negative_4;
----
0

# PMOD tests with zero
query I
SELECT pmod(0::int, 5::int) as pmod_zero_1;
----
0

statement error DataFusion error: Arrow error: Divide by zero error
SELECT pmod(10::int, 0::int) as pmod_zero_2;

# PMOD tests with NULL values
query I
SELECT pmod(NULL::int, 3::int) as pmod_null_1;
----
NULL

query I
SELECT pmod(10::int, NULL::int) as pmod_null_2;
----
NULL

query I
SELECT pmod(NULL::int, NULL::int) as pmod_null_3;
----
NULL

# PMOD tests with large integers
query I
SELECT pmod(100::int, 30::int) as pmod_large_1;
----
10

query I
SELECT pmod(-100::int, 30::int) as pmod_large_2;
----
20

query I
SELECT pmod(200::int, 60::int) as pmod_large_3;
----
20

query I
SELECT pmod(-200::int, 60::int) as pmod_large_4;
----
40

# PMOD tests with edge cases
query I
SELECT pmod(-1::int, 5::int) as pmod_edge_1;
----
4

query I
SELECT pmod(1::int, 5::int) as pmod_edge_2;
----
1

query I
SELECT pmod(-5::int, 5::int) as pmod_edge_3;
----
0

query I
SELECT pmod(5::int, 5::int) as pmod_edge_4;
----
0

query I
SELECT pmod(-6::int, 5::int) as pmod_edge_5;
----
4

query I
SELECT pmod(6::int, 5::int) as pmod_edge_6;
----
1

# PMOD tests with negative divisors
query I
SELECT pmod(10::int, -3::int) as pmod_neg_div_1;
----
1

query I
SELECT pmod(-7::int, -3::int) as pmod_neg_div_2;
----
-1

query I
SELECT pmod(15::int, -4::int) as pmod_neg_div_3;
----
3

# PMOD tests with floating point numbers
query R
SELECT pmod(10.5::float8, 3.0::float8) as pmod_float_1;
----
1.5

query R
SELECT pmod(-7.2::float8, 3.0::float8) as pmod_float_2;
----
1.8

query R
SELECT pmod(15.8::float8, 4.2::float8) as pmod_float_3;
----
3.2

query R
SELECT pmod(-15.8::float8, 4.2::float8) as pmod_float_4;
----
1

query R
SELECT pmod(5.0::float8, 2.5::float8) as pmod_float_5;
----
0

query R
SELECT pmod(-5.0::float8, 2.5::float8) as pmod_float_6;
----
0

# PMOD tests with float32
query R
SELECT pmod(10.5::float4, 3.0::float4) as pmod_float32_1;
----
1.5

query R
SELECT CAST(pmod(CAST(-7.2 AS float4), CAST(3.0 AS float4)) AS DECIMAL(3,1)) as pmod_float32_2;
----
1.8

query R
SELECT CAST(pmod(15.8::float4, 4.2::float4) AS DECIMAL(3,1)) as pmod_float32_3;
----
3.2

query R
SELECT CAST(pmod(-15.8::float4, 4.2::float4) AS DECIMAL(3,1)) as pmod_float32_4;
----
1

# PMOD tests with special float values
query R
SELECT pmod('NaN'::float8, 2.0::float8) as pmod_nan_1;
----
NaN

query R
SELECT pmod(5.0::float8, 'NaN'::float8) as pmod_nan_2;
----
NaN

query R
SELECT pmod('Infinity'::float8, 2.0::float8) as pmod_inf_1;
----
NaN

query R
SELECT pmod(5.0::float8, 'Infinity'::float8) as pmod_inf_2;
----
5

query R
SELECT pmod(-5.0::float8, 'Infinity'::float8) as pmod_inf_3;
----
NaN

query R
SELECT pmod('NaN'::float8, 'Infinity'::float8) as pmod_nan_inf_1;
----
NaN

query R
SELECT pmod('Infinity'::float8, 'NaN'::float8) as pmod_inf_nan_1;
----
NaN

# PMOD tests with decimal types
query R
SELECT pmod(2.5::decimal(3,1), 1.2::decimal(2,1)) as pmod_decimal_1;
----
0.1

query R
SELECT pmod(-2.5::decimal(3,1), 1.2::decimal(2,1)) as pmod_decimal_2;
----
1.1

query R
SELECT pmod(10.0::decimal(3,1), 3.0::decimal(2,1)) as pmod_decimal_3;
----
1

query R
SELECT pmod(-10.0::decimal(3,1), 3.0::decimal(2,1)) as pmod_decimal_4;
----
2

# PMOD tests with different integer types
query I
SELECT pmod(10::int8, 3::int8) as pmod_int8_1;
----
1

query I
SELECT pmod(-10::int8, 3::int8) as pmod_int8_2;
----
2

query I
SELECT pmod(arrow_cast(10, 'Int16'), arrow_cast(3, 'Int16')) as pmod_int16_1;
----
1

query I
SELECT pmod(arrow_cast(-10, 'Int16'), arrow_cast(3, 'Int16')) as pmod_int16_2;
----
2

query I
SELECT pmod(arrow_cast(10, 'Int64'), arrow_cast(3, 'Int64')) as pmod_int64_1;
----
1

query I
SELECT pmod(arrow_cast(-10, 'Int64'), arrow_cast(3, 'Int64')) as pmod_int64_2;
----
2

# PMOD tests with unsigned integers
query I
SELECT pmod(arrow_cast(10, 'UInt8'), arrow_cast(3, 'UInt8')) as pmod_uint8_1;
----
1

query I
SELECT pmod(arrow_cast(10, 'UInt16'), arrow_cast(3, 'UInt16')) as pmod_uint16_1;
----
1

query I
SELECT pmod(arrow_cast(10, 'UInt32'), arrow_cast(3, 'UInt32')) as pmod_uint32_1;
----
1

query I
SELECT pmod(arrow_cast(10, 'UInt64'), arrow_cast(3, 'UInt64')) as pmod_uint64_1;
----
1

# PMOD tests with scalar values
query I
SELECT pmod(10, 3) as pmod_scalar_1;
----
1

query I
SELECT pmod(-10, 3) as pmod_scalar_2;
----
2

query R
SELECT pmod(10.5, 3.0) as pmod_scalar_3;
----
1.5

query R
SELECT pmod(-7.2, 3.0) as pmod_scalar_4;
----
1.8
