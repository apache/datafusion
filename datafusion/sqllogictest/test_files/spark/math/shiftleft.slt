# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at

#   http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

# This file was originally created by a porting script from:
#   https://github.com/lakehq/sail/tree/43b6ed8221de5c4c4adbedbb267ae1351158b43c/crates/sail-spark-connect/tests/gold_data/function
# This file is part of the implementation of the datafusion-spark function library.
# For more information, please see:
#   https://github.com/apache/datafusion/issues/15914

## Original Query: SELECT shiftleft(2, 1);
## PySpark 3.5.5 Result: {'shiftleft(2, 1)': 4, 'typeof(shiftleft(2, 1))': 'int', 'typeof(2)': 'int', 'typeof(1)': 'int'}

# Basic shiftleft tests
query I
SELECT shiftleft(2::int, 1::int);
----
4

query I
SELECT shiftleft(1::int, 2::int);
----
4

query I
SELECT shiftleft(3::int, 3::int);
----
24

# Different data types
query I
SELECT shiftleft(2::bigint, 1::int);
----
4

query I
SELECT shiftleft(1::bigint, 2::int);
----
4

query I
SELECT shiftleft(2::int, 1::bigint);
----
4

# Large shifts (should handle modulo correctly)
query I
SELECT shiftleft(1::int, 32::int);
----
1

query I
SELECT shiftleft(2::int, 33::int);
----
4

query I
SELECT shiftleft(3::int, 64::int);
----
3

# Negative shifts
query I
SELECT shiftleft(4::int, -1::int);
----
0

query I
SELECT shiftleft(8::int, -2::int);
----
0

query I
SELECT shiftleft(16::int, -3::int);
----
0

# Zero shifts
query I
SELECT shiftleft(5::int, 0::int);
----
5

query I
SELECT shiftleft(0::int, 5::int);
----
0

# Edge cases
query I
SELECT shiftleft(2147483647::int, 1::int);
----
-2

query I
SELECT shiftleft(-1::int, 1::int);
----
-2

# Multiple values in a table
query I
SELECT shiftleft(value, shift) FROM (VALUES (1, 1), (2, 2), (3, 3), (4, 4)) AS t(value, shift);
----
2
8
24
64

# Null handling
query I
SELECT shiftleft(NULL::int, 1::int);
----
NULL

query I
SELECT shiftleft(1::int, NULL::int);
----
NULL

query I
SELECT shiftleft(NULL::int, NULL::int);
----
NULL

query I
select shiftleft(3::int,-31);
----
6

query I
select shiftleft(3::int,-32);
----
3
