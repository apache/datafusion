# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at

#   http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

# This file was originally created by a porting script from:
#   https://github.com/lakehq/sail/tree/43b6ed8221de5c4c4adbedbb267ae1351158b43c/crates/sail-spark-connect/tests/gold_data/function
# This file is part of the implementation of the datafusion-spark function library.
# For more information, please see:
#   https://github.com/apache/datafusion/issues/15914

## Original Query: SELECT MOD(2, 1.8);
## PySpark 3.5.5 Result: {'mod(2, 1.8)': Decimal('0.2'), 'typeof(mod(2, 1.8))': 'decimal(2,1)', 'typeof(2)': 'int', 'typeof(1.8)': 'decimal(2,1)'}
query R
SELECT MOD(2::int, 1.8::decimal(2,1));
----
0.2

# Basic integer modulo operations
query I
SELECT MOD(10::int, 3::int) as mod_1;
----
1

query I
SELECT MOD(7::int, 2::int) as mod_2;
----
1

query I
SELECT MOD(15::int, 4::int) as mod_3;
----
3

query I
SELECT MOD(100::int, 30::int) as mod_4;
----
10

query I
SELECT MOD(50::int, 25::int) as mod_5;
----
0

query I
SELECT MOD(200::int, 60::int) as mod_6;
----
20

# Float modulo operations
query R
SELECT MOD(10.5::float8, 3.0::float8) as mod_float_1;
----
1.5

query R
SELECT MOD(7.2::float8, 2.5::float8) as mod_float_2;
----
2.2

query R
SELECT MOD(15.8::float8, 4.2::float8) as mod_float_3;
----
3.2

# Mixed type operations
query R
SELECT MOD(10::int, 3.0::float8) as mod_mixed_1;
----
1

query R
SELECT MOD(10.5::float8, 3::int) as mod_mixed_2;
----
1.5

# NULL value handling
query I
SELECT MOD(NULL::int, 3::int) as mod_null_1;
----
NULL

query I
SELECT MOD(10::int, NULL::int) as mod_null_2;
----
NULL

query I
SELECT MOD(NULL::int, NULL::int) as mod_null_3;
----
NULL

# Special values: NaN and Infinity
query R
SELECT MOD(5.0::float8, 'NaN'::float8) as mod_nan_1;
----
NaN

query R
SELECT MOD('NaN'::float8, 2.0::float8) as mod_nan_2;
----
NaN

query R
SELECT MOD('NaN'::float8, 'Infinity'::float8) as mod_nan_3;
----
NaN

query R
SELECT MOD('Infinity'::float8, 'NaN'::float8) as mod_nan_4;
----
NaN

query R
SELECT MOD(5.0::float8, 'Infinity'::float8) as mod_inf_1;
----
5

query R
SELECT MOD('Infinity'::float8, 2.0::float8) as mod_inf_2;
----
NaN

# Decimal operations
query R
SELECT MOD(2.5::decimal(3,1), 1.2::decimal(2,1)) as mod_decimal_1;
----
0.1

query R
SELECT MOD(10.0::decimal(3,1), 3.0::decimal(2,1)) as mod_decimal_2;
----
1

# Edge cases
query I
SELECT MOD(0::int, 5::int) as mod_zero_1;
----
0

query I
SELECT MOD(5::int, 1::int) as mod_zero_2;
----
0

query I
SELECT MOD(-10::int, 3::int) as mod_negative_1;
----
-1

query I
SELECT MOD(10::int, -3::int) as mod_negative_2;
----
1

query I
SELECT MOD(-10::int, -3::int) as mod_negative_3;
----
-1

# Multiple MOD operations
query I
SELECT MOD(MOD(100::int, 30::int), 5::int) as mod_nested_1;
----
0

query I
SELECT MOD(10::int, MOD(7::int, 3::int)) as mod_nested_2;
----
0

# MOD with different data types
query I
SELECT MOD(10::int8, 3::int8) as mod_int8;
----
1

query I
SELECT MOD(arrow_cast(10, 'Int16'), arrow_cast(3, 'Int16')) as mod_int16;
----
1

query I
SELECT MOD(arrow_cast(10, 'Int32'), arrow_cast(3, 'Int32')) as mod_int32;
----
1

query I
SELECT MOD(arrow_cast(10, 'Int64'), arrow_cast(3, 'Int64')) as mod_int64;
----
1

query I
SELECT MOD(arrow_cast(10, 'UInt16'), arrow_cast(3, 'UInt16')) as mod_int16;
----
1

query I
SELECT MOD(arrow_cast(10, 'UInt32'), arrow_cast(3, 'UInt32')) as mod_int32;
----
1

query I
SELECT MOD(arrow_cast(10, 'UInt64'), arrow_cast(3, 'UInt64')) as mod_int64;
----
1

query R
SELECT MOD(10::float4, 3::float4) as mod_float4;
----
1

query R
SELECT MOD(10::float8, 3::float8) as mod_float8;
----
1

# MOD in expressions
query I
SELECT MOD(10::int + 5::int, 3::int) as mod_expr_1;
----
0

query I
SELECT MOD(10::int, 2::int + 1::int) as mod_expr_2;
----
1

query I
SELECT MOD(10::int * 2::int, 5::int) as mod_expr_3;
----
0
