# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at

#   http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

# Spark doctests
query ?
SELECT map_from_entries(array[struct(1, 'a'), struct(2, 'b')]);
----
{1: a, 2: b}

query ?
SELECT map_from_entries(array[struct(1, cast(null as string)), struct(2, 'b')]);
----
{1: NULL, 2: b}

query ?
SELECT map_from_entries(data) 
from values 
    (array[struct(1, 'a'), struct(2, 'b')]), 
    (array[struct(3, 'c')]) 
as tab(data);
----
{1: a, 2: b}
{3: c}

# Tests with NULL and empty input structarrays
query ?
SELECT map_from_entries(data) 
from values 
    (cast(array[] as array<struct<int, string>>)), 
    (cast(NULL as array<struct<int, string>>)) 
as tab(data);
----
{}
NULL

# Test with NULL key, should fail
query error DataFusion error: Arrow error: Invalid argument error: Found unmasked nulls for non-nullable StructArray field "key"
SELECT map_from_entries(array[struct(NULL, 1)]);

# Tests with NULL and array of Null type, should fail
query error DataFusion error: Execution error: map_from_entries: expected array<struct<key, value>>, got Null
SELECT map_from_entries(NULL);

query error DataFusion error: Execution error: map_from_entries: expected array<struct<key, value>>, got Null
SELECT map_from_entries(array[NULL]);

# Test with NULL array and NULL entries in arrays
# output is NULL if any entry is NULL
query ?
SELECT map_from_entries(data)
from values
    (
        array[
            struct(1 as a, 'a' as b), 
            cast(NULL as struct<a int, b string>), 
            cast(NULL as struct<a int, b string>)
        ]
    ),
    (NULL),
    (
        array[
            struct(2 as a, 'b' as b), 
            struct(3 as a, 'c' as b)
        ]
    ),
    (
        array[
            struct(4 as a, 'd' as b),
            cast(NULL as struct<a int, b string>),
            struct(5 as a, 'e' as b),
            struct(6 as a, 'f' as b)
        ]
    )
as tab(data);
----
NULL
NULL
{2: b, 3: c}
NULL

#Test with multiple rows: good, empty and nullable
query ?
SELECT map_from_entries(data) 
from values 
    (NULL), 
    (array[
        struct(1 as a, 'b' as b), 
        struct(2 as a, cast(NULL as string) as b), 
        struct(3 as a, 'd' as b)
    ]), 
    (array[]),
    (NULL) 
as tab(data);
----
NULL
{1: b, 2: NULL, 3: d}
{}
NULL

# Test with complex types
query ?
SELECT map_from_entries(array[
    struct(array('a', 'b'), struct(1, 2, 3)), 
    struct(array('c', 'd'), struct(4, 5, 6))
]);
----
{[a, b]: {c0: 1, c1: 2, c2: 3}, [c, d]: {c0: 4, c1: 5, c2: 6}}

# Test with nested function calls
query ?
SELECT
    map_from_entries(
        array[
            struct(
                'outer_key1', 
                -- value for outer_key1: a map itself
                map_from_entries(
                    array[
                        struct('inner_a', 1), 
                        struct('inner_b', 2)
                    ]
                )
            ),
            struct(
                'outer_key2',
                -- value for outer_key2: another map
                map_from_entries(
                    array[
                        struct('inner_x', 10), 
                        struct('inner_y', 20), 
                        struct('inner_z', 30)
                    ]
                )
            )
        ]
    ) AS nested_map;
----
{outer_key1: {inner_a: 1, inner_b: 2}, outer_key2: {inner_x: 10, inner_y: 20, inner_z: 30}}

# Test with duplicate keys
query ?
SELECT map_from_entries(array(
    struct(true, 'a'), 
    struct(false, 'b'), 
    struct(true, 'c'),
    struct(false, cast(NULL as string)), 
    struct(true, 'd')
));
----
{false: NULL, true: d}
