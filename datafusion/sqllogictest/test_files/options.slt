# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at

#   http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

#######
## Tests for config options
#######


statement ok
create table a(c0 int) as values (1), (2);

# Expect coalesce and default batch size
query TT
explain SELECT * FROM a WHERE c0 < 1;
----
logical_plan
Filter: a.c0 < Int32(1)
--TableScan: a projection=[c0]
physical_plan
CoalesceBatchesExec: target_batch_size=8192
--FilterExec: c0@0 < 1
----MemoryExec: partitions=4, partition_sizes=[1, 0, 0, 0]

##
# test_disable_coalesce
##

statement ok
set datafusion.execution.coalesce_batches = false

# expect no coalsece
query TT
explain SELECT * FROM a WHERE c0 < 1;
----
logical_plan
Filter: a.c0 < Int32(1)
--TableScan: a projection=[c0]
physical_plan
FilterExec: c0@0 < 1
--MemoryExec: partitions=4, partition_sizes=[1, 0, 0, 0]

statement ok
set datafusion.execution.coalesce_batches = true


##
# test_custom_batch_size
##

statement ok
set datafusion.execution.batch_size = 1234;

# expect batch size to be 1234
query TT
explain SELECT * FROM a WHERE c0 < 1;
----
logical_plan
Filter: a.c0 < Int32(1)
--TableScan: a projection=[c0]
physical_plan
CoalesceBatchesExec: target_batch_size=1234
--FilterExec: c0@0 < 1
----MemoryExec: partitions=4, partition_sizes=[1, 0, 0, 0]


statement ok
set datafusion.execution.batch_size = 8192;

statement ok
drop table a

# test datafusion.sql_parser.parse_float_as_decimal
# default option value is false
query R
select 10000000000000000000.01
----
10000000000000000000

query T
select arrow_typeof(10000000000000000000.01)
----
Float64

statement ok
set datafusion.sql_parser.parse_float_as_decimal = true;

query R
select 10000000000000000000.01
----
10000000000000000000.01

query T
select arrow_typeof(10000000000000000000.01)
----
Decimal128(22, 2)

query R
select 999999999999999999999999999999999999
----
999999999999999999999999999999999999

query T
select arrow_typeof(999999999999999999999999999999999999)
----
Decimal128(36, 0)

query R
select 99999999999999999999999999999999999999
----
99999999999999999999999999999999999999

query T
select arrow_typeof(99999999999999999999999999999999999999)
----
Decimal128(38, 0)

query R
select 9999999999999999999999999999999999.9999
----
9999999999999999999999999999999999.9999

query T
select arrow_typeof(9999999999999999999999999999999999.9999)
----
Decimal128(38, 4)

# precision overflow
statement error SQL error: ParserError\("Cannot parse 123456789012345678901234567890123456789 as i128 when building decimal: precision overflow"\)
select 123456789.012345678901234567890123456789

# can not fit in i128
statement error SQL error: ParserError\("Cannot parse 1234567890123456789012345678901234567890 as i128 when building decimal: number too large to fit in target type"\)
select 123456789.0123456789012345678901234567890

# Restore those to default value again
statement ok
set datafusion.sql_parser.parse_float_as_decimal = false;


