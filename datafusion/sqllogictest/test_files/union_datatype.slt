# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at

#   http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

##########
## UNION DataType Tests
##########


query II?
select union_extract(my_union, 'int'), expected, my_union from sparse_1_1_single_field;
----
1 1 {int=1}
2 2 {int=2}

query IT?
select union_extract(my_union, 'int'), expected, my_union from sparse_1_2_empty;
----

query ???
select union_extract(my_union, 'null'), expected, my_union from sparse_1_3a_null_target;
----
NULL NULL {str=}

query IT?
select union_extract(my_union, 'int'), expected, my_union from sparse_1_3b_null_target;
----
NULL NULL {str=}

query II?
select union_extract(my_union, 'int'), expected, my_union from sparse_2_all_types_match;
----
1 1 {int=1}
4 4 {int=4}

query II?
select union_extract(my_union, 'int'), expected, my_union from sparse_3_1_none_match_target_can_contain_null_mask;
----
NULL NULL {str=}
NULL NULL {str=}
NULL NULL {str=}
NULL NULL {str=}

query ???
select union_extract(my_union, 'union'), expected, my_union from sparse_3_2_none_match_cant_contain_null_mask_union_target;
----
{bool=} {bool=} {str=}
{bool=} {bool=} {str=}

query II?
select union_extract(my_union, 'int'), expected, my_union from sparse_4_1_1_target_with_nulls;
----
NULL NULL {int=}
4 4 {int=4}
NULL NULL {str=}
NULL NULL {str=}

query II?
select union_extract(my_union, 'int'), expected, my_union from sparse_4_1_2_target_without_nulls;
----
NULL NULL {str=}
4 4 {int=4}
8 8 {int=8}

query ???
select union_extract(my_union, 'union'), expected, my_union from sparse_4_2_some_match_target_cant_contain_null_mask;
----
{bool=true} {bool=true} {union={bool=true}}
{bool=} {bool=} {str=}

query IT?
select union_extract(my_union, 'int'), expected, my_union from dense_1_1_both_empty;
----

query IT?
select union_extract(my_union, 'int'), expected, my_union from dense_1_2_empty_union_target_non_empty;
----

query IT?
select union_extract(my_union, 'int'), expected, my_union from dense_2_non_empty_union_target_empty;
----
NULL NULL {int=}
NULL NULL {int=}

query IT?
select union_extract(my_union, 'int'), expected, my_union from dense_3_1_null_target_smaller_len;
----
NULL NULL {int=}
NULL NULL {int=}

query IT?
select union_extract(my_union, 'int'), expected, my_union from dense_3_2_null_target_equal_len;
----
NULL NULL {int=}
NULL NULL {int=}

query IT?
select union_extract(my_union, 'int'), expected, my_union from dense_3_3_null_target_bigger_len;
----
NULL NULL {int=}
NULL NULL {int=}

query TT?
select union_extract(my_union, 'str'), expected, my_union from dense_4_1a_single_type_sequential_offsets_equal_len;
----
a1 a1 {str=a1}
b2 b2 {str=b2}

query TT?
select union_extract(my_union, 'str'), expected, my_union from dense_4_2a_single_type_sequential_offsets_bigger;
----
a1 a1 {str=a1}
b2 b2 {str=b2}

query TT?
select union_extract(my_union, 'str'), expected, my_union from dense_4_3a_single_type_non_sequential;
----
a1 a1 {str=a1}
c3 c3 {str=c3}

query TT?
select union_extract(my_union, 'str'), expected, my_union from dense_4_1b_empty_siblings_sequential_equal_len;
----
a a {str=a}
b b {str=b}


query TT?
select union_extract(my_union, 'str'), expected, my_union from dense_4_2b_empty_siblings_sequential_bigger_len;
----
a a {str=a}
b b {str=b}


query TT?
select union_extract(my_union, 'str'), expected, my_union from dense_4_3b_empty_sibling_non_sequential;
----
a a {str=a}
c c {str=c}


query TT?
select union_extract(my_union, 'str'), expected, my_union from dense_4_1c_all_types_match_sequential_equal_len;
----
a1 a1 {str=a1}
b2 b2 {str=b2}


query TT?
select union_extract(my_union, 'str'), expected, my_union from dense_4_2c_all_types_match_sequential_bigger_len;
----
a1 a1 {str=a1}
b2 b2 {str=b2}


query TT?
select union_extract(my_union, 'str'), expected, my_union from dense_4_3c_all_types_match_non_sequential;
----
a1 a1 {str=a1}
b3 b3 {str=b3}


query TT?
select union_extract(my_union, 'str'), expected, my_union from dense_5_1a_none_match_less_len;
----
NULL NULL {int=1}
NULL NULL {int=1}
NULL NULL {int=1}
NULL NULL {int=2}
NULL NULL {int=2}


query ???
select union_extract(my_union, 'union'), expected, my_union from dense_5_1b_cant_contain_null_mask;
----
{bool=} {bool=} {str=a1}
{bool=} {bool=} {str=a1}
{bool=} {bool=} {str=a1}
{bool=} {bool=} {str=b2}
{bool=} {bool=} {str=b2}

query TT?
select union_extract(my_union, 'str'), expected, my_union from dense_5_2_none_match_equal_len;
----
NULL NULL {int=1}
NULL NULL {int=1}
NULL NULL {int=1}
NULL NULL {int=2}
NULL NULL {int=2}


query TT?
select union_extract(my_union, 'str'), expected, my_union from dense_5_3_none_match_greater_len;
----
NULL NULL {int=1}
NULL NULL {int=1}
NULL NULL {int=1}
NULL NULL {int=2}
NULL NULL {int=2}


query II?
select union_extract(my_union, 'int'), expected, my_union from dense_6_some_matches;
----
1 1 {int=1}
2 2 {int=2}
NULL NULL {str=a1}
NULL NULL {str=b2}
NULL NULL {str=c3}


query error DataFusion error: Execution error: field int not found on union
select union_extract(my_union, 'int'), expected, my_union from empty_sparse_union;


query error DataFusion error: Execution error: field int not found on union
select union_extract(my_union, 'int'), expected, my_union from empty_dense_union;


query error
select union_extract() from empty_dense_union;


query error
select union_extract(my_union) from empty_dense_union;


query error
select union_extract('a') from empty_dense_union;



query error DataFusion error: Execution error: union_extract first argument must be a union, got Utf8 instead
select union_extract('a', my_union) from empty_dense_union;


query error DataFusion error: Execution error: union_extract second argument must be a non\-null string literal, got Int64 instead
select union_extract(my_union, 1) from empty_dense_union;


query error
select union_extract(my_union, 'a', 'b') from empty_dense_union;
