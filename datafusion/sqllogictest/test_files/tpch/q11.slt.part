
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at

#   http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

query TT
explain select
    ps_partkey,
    sum(ps_supplycost * ps_availqty) as value
from
    partsupp,
    supplier,
    nation
where
    ps_suppkey = s_suppkey
  and s_nationkey = n_nationkey
  and n_name = 'GERMANY'
group by
    ps_partkey having
    sum(ps_supplycost * ps_availqty) > (
    select
    sum(ps_supplycost * ps_availqty) * 0.0001
    from
    partsupp,
    supplier,
    nation
    where
    ps_suppkey = s_suppkey
                  and s_nationkey = n_nationkey
                  and n_name = 'GERMANY'
    )
order by
    value desc
limit 10;
----
logical_plan
01)Limit: skip=0, fetch=10
02)--Sort: value DESC NULLS FIRST, fetch=10
03)----Projection: partsupp.ps_partkey, sum(partsupp.ps_supplycost * partsupp.ps_availqty) AS value
04)------Inner Join:  Filter: CAST(sum(partsupp.ps_supplycost * partsupp.ps_availqty) AS Decimal128(38, 15)) > __scalar_sq_1.sum(partsupp.ps_supplycost * partsupp.ps_availqty) * Float64(0.0001)
05)--------Aggregate: groupBy=[[partsupp.ps_partkey]], aggr=[[sum(partsupp.ps_supplycost * CAST(partsupp.ps_availqty AS Decimal128(10, 0)))]]
06)----------Projection: partsupp.ps_partkey, partsupp.ps_availqty, partsupp.ps_supplycost
07)------------Inner Join: supplier.s_nationkey = nation.n_nationkey
08)--------------Projection: partsupp.ps_partkey, partsupp.ps_availqty, partsupp.ps_supplycost, supplier.s_nationkey
09)----------------Inner Join: partsupp.ps_suppkey = supplier.s_suppkey
10)------------------TableScan: partsupp projection=[ps_partkey, ps_suppkey, ps_availqty, ps_supplycost]
11)------------------TableScan: supplier projection=[s_suppkey, s_nationkey]
12)--------------Projection: nation.n_nationkey
13)----------------Filter: nation.n_name = Utf8("GERMANY")
14)------------------TableScan: nation projection=[n_nationkey, n_name], partial_filters=[nation.n_name = Utf8("GERMANY")]
15)--------SubqueryAlias: __scalar_sq_1
16)----------Projection: CAST(CAST(sum(partsupp.ps_supplycost * partsupp.ps_availqty) AS Float64) * Float64(0.0001) AS Decimal128(38, 15))
17)------------Aggregate: groupBy=[[]], aggr=[[sum(partsupp.ps_supplycost * CAST(partsupp.ps_availqty AS Decimal128(10, 0)))]]
18)--------------Projection: partsupp.ps_availqty, partsupp.ps_supplycost
19)----------------Inner Join: supplier.s_nationkey = nation.n_nationkey
20)------------------Projection: partsupp.ps_availqty, partsupp.ps_supplycost, supplier.s_nationkey
21)--------------------Inner Join: partsupp.ps_suppkey = supplier.s_suppkey
22)----------------------TableScan: partsupp projection=[ps_suppkey, ps_availqty, ps_supplycost]
23)----------------------TableScan: supplier projection=[s_suppkey, s_nationkey]
24)------------------Projection: nation.n_nationkey
25)--------------------Filter: nation.n_name = Utf8("GERMANY")
26)----------------------TableScan: nation projection=[n_nationkey, n_name], partial_filters=[nation.n_name = Utf8("GERMANY")]
physical_plan
01)GlobalLimitExec: skip=0, fetch=10
02)--SortExec: TopK(fetch=10), expr=[value@1 DESC], preserve_partitioning=[false]
03)----ProjectionExec: expr=[ps_partkey@0 as ps_partkey, sum(partsupp.ps_supplycost * partsupp.ps_availqty)@1 as value]
04)------NestedLoopJoinExec: join_type=Inner, filter=CAST(sum(partsupp.ps_supplycost * partsupp.ps_availqty)@0 AS Decimal128(38, 15)) > sum(partsupp.ps_supplycost * partsupp.ps_availqty) * Float64(0.0001)@1
05)--------CoalescePartitionsExec
06)----------AggregateExec: mode=FinalPartitioned, gby=[ps_partkey@0 as ps_partkey], aggr=[sum(partsupp.ps_supplycost * partsupp.ps_availqty)]
07)------------CoalesceBatchesExec: target_batch_size=8192
08)--------------RepartitionExec: partitioning=Hash([ps_partkey@0], 4), input_partitions=4
09)----------------AggregateExec: mode=Partial, gby=[ps_partkey@0 as ps_partkey], aggr=[sum(partsupp.ps_supplycost * partsupp.ps_availqty)]
10)------------------CoalesceBatchesExec: target_batch_size=8192
11)--------------------HashJoinExec: mode=Partitioned, join_type=Inner, on=[(s_nationkey@3, n_nationkey@0)], projection=[ps_partkey@0, ps_availqty@1, ps_supplycost@2]
12)----------------------CoalesceBatchesExec: target_batch_size=8192
13)------------------------RepartitionExec: partitioning=Hash([s_nationkey@3], 4), input_partitions=4
14)--------------------------CoalesceBatchesExec: target_batch_size=8192
15)----------------------------HashJoinExec: mode=Partitioned, join_type=Inner, on=[(ps_suppkey@1, s_suppkey@0)], projection=[ps_partkey@0, ps_availqty@2, ps_supplycost@3, s_nationkey@5]
16)------------------------------CoalesceBatchesExec: target_batch_size=8192
17)--------------------------------RepartitionExec: partitioning=Hash([ps_suppkey@1], 4), input_partitions=4
18)----------------------------------CsvExec: file_groups={4 groups: [[WORKSPACE_ROOT/datafusion/sqllogictest/test_files/tpch/data/partsupp.tbl:0..2932049], [WORKSPACE_ROOT/datafusion/sqllogictest/test_files/tpch/data/partsupp.tbl:2932049..5864098], [WORKSPACE_ROOT/datafusion/sqllogictest/test_files/tpch/data/partsupp.tbl:5864098..8796147], [WORKSPACE_ROOT/datafusion/sqllogictest/test_files/tpch/data/partsupp.tbl:8796147..11728193]]}, projection=[ps_partkey, ps_suppkey, ps_availqty, ps_supplycost], has_header=false
19)------------------------------CoalesceBatchesExec: target_batch_size=8192
20)--------------------------------RepartitionExec: partitioning=Hash([s_suppkey@0], 4), input_partitions=4
21)----------------------------------RepartitionExec: partitioning=RoundRobinBatch(4), input_partitions=1
22)------------------------------------CsvExec: file_groups={1 group: [[WORKSPACE_ROOT/datafusion/sqllogictest/test_files/tpch/data/supplier.tbl]]}, projection=[s_suppkey, s_nationkey], has_header=false
23)----------------------CoalesceBatchesExec: target_batch_size=8192
24)------------------------RepartitionExec: partitioning=Hash([n_nationkey@0], 4), input_partitions=4
25)--------------------------ProjectionExec: expr=[n_nationkey@0 as n_nationkey]
26)----------------------------CoalesceBatchesExec: target_batch_size=8192
27)------------------------------FilterExec: n_name@1 = GERMANY
28)--------------------------------RepartitionExec: partitioning=RoundRobinBatch(4), input_partitions=1
29)----------------------------------CsvExec: file_groups={1 group: [[WORKSPACE_ROOT/datafusion/sqllogictest/test_files/tpch/data/nation.tbl]]}, projection=[n_nationkey, n_name], has_header=false
30)--------ProjectionExec: expr=[CAST(CAST(sum(partsupp.ps_supplycost * partsupp.ps_availqty)@0 AS Float64) * 0.0001 AS Decimal128(38, 15)) as sum(partsupp.ps_supplycost * partsupp.ps_availqty) * Float64(0.0001)]
31)----------AggregateExec: mode=Final, gby=[], aggr=[sum(partsupp.ps_supplycost * partsupp.ps_availqty)]
32)------------CoalescePartitionsExec
33)--------------AggregateExec: mode=Partial, gby=[], aggr=[sum(partsupp.ps_supplycost * partsupp.ps_availqty)]
34)----------------CoalesceBatchesExec: target_batch_size=8192
35)------------------HashJoinExec: mode=Partitioned, join_type=Inner, on=[(s_nationkey@2, n_nationkey@0)], projection=[ps_availqty@0, ps_supplycost@1]
36)--------------------CoalesceBatchesExec: target_batch_size=8192
37)----------------------RepartitionExec: partitioning=Hash([s_nationkey@2], 4), input_partitions=4
38)------------------------CoalesceBatchesExec: target_batch_size=8192
39)--------------------------HashJoinExec: mode=Partitioned, join_type=Inner, on=[(ps_suppkey@0, s_suppkey@0)], projection=[ps_availqty@1, ps_supplycost@2, s_nationkey@4]
40)----------------------------CoalesceBatchesExec: target_batch_size=8192
41)------------------------------RepartitionExec: partitioning=Hash([ps_suppkey@0], 4), input_partitions=4
42)--------------------------------CsvExec: file_groups={4 groups: [[WORKSPACE_ROOT/datafusion/sqllogictest/test_files/tpch/data/partsupp.tbl:0..2932049], [WORKSPACE_ROOT/datafusion/sqllogictest/test_files/tpch/data/partsupp.tbl:2932049..5864098], [WORKSPACE_ROOT/datafusion/sqllogictest/test_files/tpch/data/partsupp.tbl:5864098..8796147], [WORKSPACE_ROOT/datafusion/sqllogictest/test_files/tpch/data/partsupp.tbl:8796147..11728193]]}, projection=[ps_suppkey, ps_availqty, ps_supplycost], has_header=false
43)----------------------------CoalesceBatchesExec: target_batch_size=8192
44)------------------------------RepartitionExec: partitioning=Hash([s_suppkey@0], 4), input_partitions=4
45)--------------------------------RepartitionExec: partitioning=RoundRobinBatch(4), input_partitions=1
46)----------------------------------CsvExec: file_groups={1 group: [[WORKSPACE_ROOT/datafusion/sqllogictest/test_files/tpch/data/supplier.tbl]]}, projection=[s_suppkey, s_nationkey], has_header=false
47)--------------------CoalesceBatchesExec: target_batch_size=8192
48)----------------------RepartitionExec: partitioning=Hash([n_nationkey@0], 4), input_partitions=4
49)------------------------ProjectionExec: expr=[n_nationkey@0 as n_nationkey]
50)--------------------------CoalesceBatchesExec: target_batch_size=8192
51)----------------------------FilterExec: n_name@1 = GERMANY
52)------------------------------RepartitionExec: partitioning=RoundRobinBatch(4), input_partitions=1
53)--------------------------------CsvExec: file_groups={1 group: [[WORKSPACE_ROOT/datafusion/sqllogictest/test_files/tpch/data/nation.tbl]]}, projection=[n_nationkey, n_name], has_header=false



query IR
select
    ps_partkey,
    sum(ps_supplycost * ps_availqty) as value
from
    partsupp,
    supplier,
    nation
where
    ps_suppkey = s_suppkey
  and s_nationkey = n_nationkey
  and n_name = 'GERMANY'
group by
    ps_partkey having
    sum(ps_supplycost * ps_availqty) > (
    select
    sum(ps_supplycost * ps_availqty) * 0.0001
    from
    partsupp,
    supplier,
    nation
    where
    ps_suppkey = s_suppkey
                  and s_nationkey = n_nationkey
                  and n_name = 'GERMANY'
    )
order by
    value desc
limit 10;
----
12098 16227681.21
5134 15709338.52
13334 15023662.41
17052 14351644.2
3452 14070870.14
12552 13332469.18
1084 13170428.29
5797 13038622.72
12633 12892561.61
403 12856217.34
