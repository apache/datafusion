# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at

#   http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

statement ok
CREATE TABLE t (str varchar, pattern varchar, flags varchar) AS VALUES
    ('abc',       '^(a)', 'i'),
    ('ABC',       '^(A).*', 'i'),
    ('aBc',       '(b|d)', 'i'),
    ('AbC',       '(B|D)', null),
    ('aBC',       '^(b|c)', null),
    ('4000',      '\b4([1-9]\d\d|\d[1-9]\d|\d\d[1-9])\b', null),
    ('4010',      '\b4([1-9]\d\d|\d[1-9]\d|\d\d[1-9])\b', null),
    ('Düsseldorf','[\p{Letter}-]+', null),
    ('Москва',    '[\p{L}-]+', null),
    ('Köln',      '[a-zA-Z]ö[a-zA-Z]{2}', null),
    ('إسرائيل',   '^\p{Arabic}+$', null);

#
# regexp_like tests
#

query B
SELECT regexp_like(str, pattern, flags) FROM t;
----
true
true
true
false
false
false
true
true
true
true
true

query B
SELECT regexp_like('foobarbequebaz', '');
----
true

query B
SELECT regexp_like('', '');
----
true

query B
SELECT regexp_like('foobarbequebaz', '(bar)(beque)');
----
true

query B
SELECT regexp_like('fooBarb
eQuebaz', '(bar).*(que)', 'is');
----
true

query B
SELECT regexp_like('foobarbequebaz', '(ba3r)(bequ34e)');
----
false

query B
SELECT regexp_like('foobarbequebaz', '^.*(barbequ[0-9]*e).*$', 'm');
----
true

query B
SELECT regexp_like('aaa-0', '.*-(\d)');
----
true

query B
SELECT regexp_like('bb-1', '.*-(\d)');
----
true

query B
SELECT regexp_like('aa', '.*-(\d)');
----
false

query ?
SELECT regexp_like(NULL, '.*-(\d)');
----
NULL

query B
SELECT regexp_like('aaa-0', NULL);
----
NULL

query ?
SELECT regexp_like(null, '.*-(\d)');
----
NULL

query error Error during planning: regexp_like\(\) does not support the "global" option
SELECT regexp_like('bb-1', '.*-(\d)', 'g');

query error Error during planning: regexp_like\(\) does not support the "global" option
SELECT regexp_like('bb-1', '.*-(\d)', 'g');

query error Arrow error: Compute error: Regular expression did not compile: CompiledTooBig\(10485760\)
SELECT regexp_like('aaaaa', 'a{5}{5}{5}{5}{5}{5}{5}{5}{5}{5}{5}{5}{5}{5}{5}{5}{5}{5}');

# look-around is not supported and will just return false
query B
SELECT regexp_like('(?<=[A-Z]\w )Smith', 'John Smith', 'i');
----
false

query B
select regexp_like('aaa-555', '.*-(\d*)');
----
true

#
# regexp_match tests
#

query ?
SELECT regexp_match(str, pattern, flags) FROM t;
----
[a]
[A]
[B]
NULL
NULL
NULL
[010]
[Düsseldorf]
[Москва]
[Köln]
[إسرائيل]

query ?
SELECT regexp_match('foobarbequebaz', '');
----
[]

query ?
SELECT regexp_match('', '');
----
[]

query ?
SELECT regexp_match('foobarbequebaz', '(bar)(beque)');
----
[bar, beque]

query ?
SELECT regexp_match('fooBarb
eQuebaz', '(bar).*(que)', 'is');
----
[Bar, Que]

query ?
SELECT regexp_match('foobarbequebaz', '(ba3r)(bequ34e)');
----
NULL

query ?
SELECT regexp_match('foobarbequebaz', '^.*(barbequ[0-9]*e).*$', 'm');
----
[barbeque]

query ?
SELECT regexp_match('aaa-0', '.*-(\d)');
----
[0]

query ?
SELECT regexp_match('bb-1', '.*-(\d)');
----
[1]

query ?
SELECT regexp_match('aa', '.*-(\d)');
----
NULL

query ?
SELECT regexp_match(NULL, '.*-(\d)');
----
NULL

query ?
SELECT regexp_match('aaa-0', NULL);
----
NULL

query ?
SELECT regexp_match(null, '.*-(\d)');
----
NULL

query error Error during planning: regexp_match\(\) does not support the "global" option
SELECT regexp_match('bb-1', '.*-(\d)', 'g');

query error Error during planning: regexp_match\(\) does not support the "global" option
SELECT regexp_match('bb-1', '.*-(\d)', 'g');

query error Arrow error: Compute error: Regular expression did not compile: CompiledTooBig\(10485760\)
SELECT regexp_match('aaaaa', 'a{5}{5}{5}{5}{5}{5}{5}{5}{5}{5}{5}{5}{5}{5}{5}{5}{5}{5}');

# look-around is not supported and will just return null
query ?
SELECT regexp_match('(?<=[A-Z]\w )Smith', 'John Smith', 'i');
----
NULL

# ported test
query ?
SELECT regexp_match('aaa-555', '.*-(\d*)');
----
[555]

#
# regexp_replace tests
#

query T
SELECT regexp_replace(str, pattern, 'X', concat('g', flags)) FROM t;
----
Xbc
X
aXc
AbC
aBC
4000
X
X
X
X
X

query T
SELECT regexp_replace('ABCabcABC', '(abc)', 'X', 'gi');
----
XXX

query T
SELECT regexp_replace('ABCabcABC', '(abc)', 'X', 'i');
----
XabcABC

query T
SELECT regexp_replace('foobarbaz', 'b..', 'X', 'g');
----
fooXX

query T
SELECT regexp_replace('foobarbaz', 'b..', 'X');
----
fooXbaz

query T
SELECT regexp_replace('foobarbaz', 'b(..)', 'X\\1Y', 'g');
----
fooXarYXazY

query T
SELECT regexp_replace('foobarbaz', 'b(..)', 'X\\1Y', NULL);
----
NULL

query T
SELECT regexp_replace('foobarbaz', 'b(..)', NULL, 'g');
----
NULL

query T
SELECT regexp_replace('foobarbaz', NULL, 'X\\1Y', 'g');
----
NULL

query T
SELECT regexp_replace('Thomas', '.[mN]a.', 'M');
----
ThM

query ?
SELECT regexp_replace(NULL, 'b(..)', 'X\\1Y', 'g');
----
NULL

query T
SELECT regexp_replace('foobar', 'bar', 'xx', 'gi')
----
fooxx

query T
SELECT regexp_replace(arrow_cast('foobar', 'Dictionary(Int32, Utf8)'), 'bar', 'xx', 'gi')
----
fooxx

statement ok
drop table t;
