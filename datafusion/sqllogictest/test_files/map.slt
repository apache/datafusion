# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

statement ok
CREATE TABLE map_array_table_1
AS VALUES
  (MAP {1: [1, NULL, 3], 2: [4, NULL, 6], 3: [7, 8, 9]}, 1, 1.0, '1'),
  (MAP {4: [1, NULL, 3], 5: [4, NULL, 6], 6: [7, 8, 9]}, 5, 5.0, '5'),
  (MAP {7: [1, NULL, 3], 8: [9, NULL, 6], 9: [7, 8, 9]}, 4, 4.0, '4')
;

statement ok
CREATE TABLE map_array_table_2
AS VALUES
  (MAP {'1': [1, NULL, 3], '2': [4, NULL, 6], '3': [7, 8, 9]}, 1, 1.0, '1'),
  (MAP {'4': [1, NULL, 3], '5': [4, NULL, 6], '6': [7, 8, 9]}, 5, 5.0, '5'),
  (MAP {'7': [1, NULL, 3], '8': [9, NULL, 6], '9': [7, 8, 9]}, 4, 4.0, '4')
;

statement ok
CREATE EXTERNAL TABLE data
STORED AS PARQUET
LOCATION '../core/tests/data/parquet_map.parquet';

# Show shape of data: 3 columns, 209 rows
query TTT
describe data;
----
ints Map(Field { name: "entries", data_type: Struct([Field { name: "key", data_type: Utf8, nullable: false, dict_id: 0, dict_is_ordered: false, metadata: {} }, Field { name: "value", data_type: Int64, nullable: false, dict_id: 0, dict_is_ordered: false, metadata: {} }]), nullable: false, dict_id: 0, dict_is_ordered: false, metadata: {} }, false) NO
strings Map(Field { name: "entries", data_type: Struct([Field { name: "key", data_type: Utf8, nullable: false, dict_id: 0, dict_is_ordered: false, metadata: {} }, Field { name: "value", data_type: Utf8, nullable: false, dict_id: 0, dict_is_ordered: false, metadata: {} }]), nullable: false, dict_id: 0, dict_is_ordered: false, metadata: {} }, false) NO
timestamp Utf8 NO

query ??T
SELECT * FROM data ORDER by ints['bytes'] DESC LIMIT 10;
----
{bytes: 49960} {host: 21.169.210.169, method: GET, protocol: HTTP/1.1, referer: https://up.de/booper/bopper/mooper/mopper, request: /user/booperbot124, status: 500, user-identifier: shaneIxD} 06/Oct/2023:17:53:58
{bytes: 49689} {host: 244.231.56.81, method: PATCH, protocol: HTTP/2.0, referer: https://names.de/this/endpoint/prints/money, request: /controller/setup, status: 500, user-identifier: ahmadajmi} 06/Oct/2023:17:53:54
{bytes: 48768} {host: 127.152.34.105, method: POST, protocol: HTTP/1.1, referer: https://for.com/secret-info/open-sesame, request: /secret-info/open-sesame, status: 200, user-identifier: Karimmove} 06/Oct/2023:17:53:59
{bytes: 48574} {host: 121.67.176.60, method: POST, protocol: HTTP/2.0, referer: https://names.com/this/endpoint/prints/money, request: /apps/deploy, status: 401, user-identifier: benefritz} 06/Oct/2023:17:54:02
{bytes: 48274} {host: 39.37.198.203, method: DELETE, protocol: HTTP/1.0, referer: https://some.de/booper/bopper/mooper/mopper, request: /secret-info/open-sesame, status: 550, user-identifier: ahmadajmi} 06/Oct/2023:17:54:00
{bytes: 47775} {host: 50.89.77.82, method: OPTION, protocol: HTTP/1.0, referer: https://random.com/observability/metrics/production, request: /controller/setup, status: 200, user-identifier: meln1ks} 06/Oct/2023:17:53:54
{bytes: 47557} {host: 108.242.133.203, method: OPTION, protocol: HTTP/2.0, referer: https://we.org/observability/metrics/production, request: /apps/deploy, status: 500, user-identifier: meln1ks} 06/Oct/2023:17:53:48
{bytes: 47552} {host: 206.248.141.240, method: HEAD, protocol: HTTP/1.1, referer: https://up.us/user/booperbot124, request: /wp-admin, status: 400, user-identifier: jesseddy} 06/Oct/2023:17:53:50
{bytes: 47342} {host: 110.222.38.8, method: HEAD, protocol: HTTP/2.0, referer: https://we.com/controller/setup, request: /do-not-access/needs-work, status: 301, user-identifier: ahmadajmi} 06/Oct/2023:17:53:59
{bytes: 47238} {host: 241.134.69.76, method: POST, protocol: HTTP/2.0, referer: https://up.de/do-not-access/needs-work, request: /controller/setup, status: 503, user-identifier: ahmadajmi} 06/Oct/2023:17:53:58

query I
SELECT COUNT(*) FROM data;
----
209

query I
SELECT SUM(ints['bytes']) FROM data;
----
5636785

query I
SELECT SUM(ints['bytes']) FROM data WHERE strings['method'] == 'GET';
----
649668

query TI
SELECT strings['method'] AS method, COUNT(*) as count FROM data GROUP BY method ORDER BY count DESC;
----
POST 41
HEAD 33
PATCH 30
OPTION 29
GET 27
PUT 25
DELETE 24

query T
SELECT strings['not_found'] FROM data LIMIT 1;
----
NULL

# Select non existent key, expect NULL for each row
query I
SELECT COUNT(CASE WHEN strings['not_found'] IS NULL THEN 1 ELSE 0 END) FROM data;
----
209

statement ok
drop table data;

query I?
select * from table_with_map where int_field > 0;
----

# Testing explain on a table with a map filter, registered in test_context.rs.
query TT
explain select * from table_with_map where int_field > 0;
----
logical_plan
01)Filter: table_with_map.int_field > Int64(0)
02)--TableScan: table_with_map projection=[int_field, map_field]
physical_plan
01)CoalesceBatchesExec: target_batch_size=8192
02)--FilterExec: int_field@0 > 0
03)----MemoryExec: partitions=1, partition_sizes=[0]

statement ok
drop table table_with_map;

query ?
SELECT MAKE_MAP('POST', 41, 'HEAD', 33, 'PATCH', 30, 'OPTION', 29, 'GET', 27, 'PUT', 25, 'DELETE', 24) AS method_count;
----
{POST: 41, HEAD: 33, PATCH: 30, OPTION: 29, GET: 27, PUT: 25, DELETE: 24}

query I
SELECT MAKE_MAP('POST', 41, 'HEAD', 33)['POST'];
----
41

query ?
SELECT MAKE_MAP('POST', 41, 'HEAD', 33, 'PATCH', null);
----
{POST: 41, HEAD: 33, PATCH: }

query ?
SELECT MAKE_MAP('POST', null, 'HEAD', 33, 'PATCH', null);
----
{POST: , HEAD: 33, PATCH: }

query ?
SELECT MAKE_MAP(1, null, 2, 33, 3, null);
----
{1: , 2: 33, 3: }

query ?
SELECT MAKE_MAP([1,2], ['a', 'b'], [3,4], ['b']);
----
{[1, 2]: [a, b], [3, 4]: [b]}

query ?
SELECT MAKE_MAP('POST', 41, 'HEAD', 'ab', 'PATCH', 30);
----
{POST: 41, HEAD: ab, PATCH: 30}

query error
SELECT MAKE_MAP('POST', 41, 'HEAD', 33, null, 30);

query ?
SELECT MAKE_MAP('POST', 41, 'HEAD', 'ab', 'PATCH', 30);
----
{POST: 41, HEAD: ab, PATCH: 30}

query ?
SELECT MAKE_MAP()
----
{}

query error
SELECT MAKE_MAP('POST', 41, 'HEAD');

query ?
SELECT MAP(['POST', 'HEAD', 'PATCH'], [41, 33, 30]);
----
{POST: 41, HEAD: 33, PATCH: 30}

query ?
SELECT MAP(['POST', 'HEAD', 'PATCH'], [41, 33, null]);
----
{POST: 41, HEAD: 33, PATCH: }

query ?
SELECT MAP([[1,2], [3,4]], ['a', 'b']);
----
{[1, 2]: a, [3, 4]: b}

query error
SELECT MAP()

query error DataFusion error: Execution error: map requires an even number of arguments, got 1 instead
SELECT MAP(['POST', 'HEAD'])

query error DataFusion error: Execution error: Expected list, large_list or fixed_size_list, got Null
SELECT MAP(null, [41, 33, 30]);

query error DataFusion error: Execution error: map requires key and value lists to have the same length
SELECT MAP(['POST', 'HEAD', 'PATCH'], [41, 33]);

query error DataFusion error: Execution error: map key cannot be null
SELECT MAP(['POST', 'HEAD', null], [41, 33, 30]);

statement error DataFusion error: Execution error: map key cannot be null
CREATE TABLE duplicated_keys_table 
AS VALUES
  (MAP {1: [1, NULL, 3], NULL: [4, NULL, 6]});

# Test duplicate keys
# key is a scalar type
query error DataFusion error: Execution error: map key must be unique, duplicate key found: POST
SELECT MAP(['POST', 'HEAD', 'POST'], [41, 33, null]);

query error DataFusion error: Execution error: map key must be unique, duplicate key found: POST
SELECT MAP(make_array('POST', 'HEAD', 'POST'), make_array(41, 33, 30));

query error DataFusion error: Execution error: map key must be unique, duplicate key found: POST
SELECT make_map('POST', 41, 'HEAD', 33, 'POST', 30);

statement error DataFusion error: Execution error: map key must be unique, duplicate key found: 1
CREATE TABLE duplicated_keys_table 
AS VALUES
  (MAP {1: [1, NULL, 3], 1: [4, NULL, 6]});

statement ok
create table duplicate_keys_table as values
('a', 1, 'a', 10, ['k1', 'k1'], [1, 2]);

query error DataFusion error: Execution error: map key must be unique, duplicate key found: a
SELECT make_map(column1, column2, column3, column4) FROM duplicate_keys_table;

query error DataFusion error: Execution error: map key must be unique, duplicate key found: k1
SELECT map(column5, column6) FROM duplicate_keys_table;

# key is a nested type
query error DataFusion error: Execution error: map key must be unique, duplicate key found: \[1, 2\]
SELECT MAP([[1,2], [1,2], []], [41, 33, null]);

query error DataFusion error: Execution error: map key must be unique, duplicate key found: \[\{1:1\}\]
SELECT MAP([Map {1:'1'}, Map {1:'1'}, Map {2:'2'}], [41, 33, null]);


query ?
SELECT MAP(make_array('POST', 'HEAD', 'PATCH'), make_array(41, 33, 30));
----
{POST: 41, HEAD: 33, PATCH: 30}

query ?
SELECT MAP(arrow_cast(make_array('POST', 'HEAD', 'PATCH'), 'FixedSizeList(3, Utf8)'), arrow_cast(make_array(41, 33, 30), 'FixedSizeList(3, Int64)'));
----
{POST: 41, HEAD: 33, PATCH: 30}

query ?
SELECT MAP(arrow_cast(make_array('POST', 'HEAD', 'PATCH'), 'LargeList(Utf8)'), arrow_cast(make_array(41, 33, 30), 'LargeList(Int64)'));
----
{POST: 41, HEAD: 33, PATCH: 30}

statement ok
create table t as values
('a', 1, 'k1', 10, ['k1', 'k2'], [1, 2], 'POST', [[1,2,3]], ['a']),
('b', 2, 'k3', 30, ['k3'], [3], 'PUT', [[4]], ['b']),
('d', 4, 'k5', 50, ['k5'], [5], null, [[1,2]], ['c']);

query ?
SELECT make_map(column1, column2, column3, column4) FROM t;
----
{a: 1, k1: 10}
{b: 2, k3: 30}
{d: 4, k5: 50}

query ?
SELECT map(column5, column6) FROM t;
----
{k1: 1, k2: 2}
{k3: 3}
{k5: 5}

query ?
SELECT map(column8, column9) FROM t;
----
{[1, 2, 3]: a}
{[4]: b}
{[1, 2]: c}

query error
SELECT map(column6, column7) FROM t;

query ?
select Map {column6: column7} from t;
----
{[1, 2]: POST}
{[3]: PUT}
{[5]: }

query ?
select Map {column8: column7} from t;
----
{[[1, 2, 3]]: POST}
{[[4]]: PUT}
{[[1, 2]]: }

query error
select Map {column7: column8} from t;

query ?
SELECT MAKE_MAP('POST', 41, 'HEAD', 33, 'PATCH', 30, 'OPTION', 29, 'GET', 27, 'PUT', 25, 'DELETE', 24) AS method_count from t;
----
{POST: 41, HEAD: 33, PATCH: 30, OPTION: 29, GET: 27, PUT: 25, DELETE: 24}
{POST: 41, HEAD: 33, PATCH: 30, OPTION: 29, GET: 27, PUT: 25, DELETE: 24}
{POST: 41, HEAD: 33, PATCH: 30, OPTION: 29, GET: 27, PUT: 25, DELETE: 24}

query I
SELECT MAKE_MAP('POST', 41, 'HEAD', 33)['POST']  from t;
----
41
41
41

query ?
SELECT MAKE_MAP('POST', 41, 'HEAD', 33, 'PATCH', null) from t;
----
{POST: 41, HEAD: 33, PATCH: }
{POST: 41, HEAD: 33, PATCH: }
{POST: 41, HEAD: 33, PATCH: }

query ?
SELECT MAKE_MAP('POST', null, 'HEAD', 33, 'PATCH', null) from t;
----
{POST: , HEAD: 33, PATCH: }
{POST: , HEAD: 33, PATCH: }
{POST: , HEAD: 33, PATCH: }

query ?
SELECT MAKE_MAP(1, null, 2, 33, 3, null) from t;
----
{1: , 2: 33, 3: }
{1: , 2: 33, 3: }
{1: , 2: 33, 3: }

query ?
SELECT MAKE_MAP([1,2], ['a', 'b'], [3,4], ['b']) from t;
----
{[1, 2]: [a, b], [3, 4]: [b]}
{[1, 2]: [a, b], [3, 4]: [b]}
{[1, 2]: [a, b], [3, 4]: [b]}

query ?
SELECT MAP(['POST', 'HEAD', 'PATCH'], [41, 33, 30]) from t;
----
{POST: 41, HEAD: 33, PATCH: 30}
{POST: 41, HEAD: 33, PATCH: 30}
{POST: 41, HEAD: 33, PATCH: 30}

query ?
SELECT MAP(['POST', 'HEAD', 'PATCH'], [41, 33, null]) from t;
----
{POST: 41, HEAD: 33, PATCH: }
{POST: 41, HEAD: 33, PATCH: }
{POST: 41, HEAD: 33, PATCH: }

query ?
SELECT MAP([[1,2], [3,4]], ['a', 'b']) from t;
----
{[1, 2]: a, [3, 4]: b}
{[1, 2]: a, [3, 4]: b}
{[1, 2]: a, [3, 4]: b}

query ?
SELECT MAP(make_array('POST', 'HEAD', 'PATCH'), make_array(41, 33, 30)) from t;
----
{POST: 41, HEAD: 33, PATCH: 30}
{POST: 41, HEAD: 33, PATCH: 30}
{POST: 41, HEAD: 33, PATCH: 30}

query ?
SELECT MAP(arrow_cast(make_array('POST', 'HEAD', 'PATCH'), 'FixedSizeList(3, Utf8)'), arrow_cast(make_array(41, 33, 30), 'FixedSizeList(3, Int64)'))  from t;
----
{POST: 41, HEAD: 33, PATCH: 30}
{POST: 41, HEAD: 33, PATCH: 30}
{POST: 41, HEAD: 33, PATCH: 30}

query ?
SELECT MAP(arrow_cast(make_array('POST', 'HEAD', 'PATCH'), 'LargeList(Utf8)'), arrow_cast(make_array(41, 33, 30), 'LargeList(Int64)')) from t;
----
{POST: 41, HEAD: 33, PATCH: 30}
{POST: 41, HEAD: 33, PATCH: 30}
{POST: 41, HEAD: 33, PATCH: 30}


query ?
VALUES (MAP(['a'], [1])), (MAP(['b'], [2])), (MAP(['c', 'a'], [3, 1]))
----
{a: 1}
{b: 2}
{c: 3, a: 1}

query ?
SELECT MAP {'a':1, 'b':2, 'c':3};
----
{a: 1, b: 2, c: 3}

query ?
SELECT MAP {'a':1, 'b':2, 'c':3 } FROM t;
----
{a: 1, b: 2, c: 3}
{a: 1, b: 2, c: 3}
{a: 1, b: 2, c: 3}

query I
SELECT MAP {'a':1, 'b':2, 'c':3}['a'];
----
1

query I
SELECT MAP {'a':1, 'b':2, 'c':3 }['a'] FROM t;
----
1
1
1

query ?
SELECT MAP {};
----
{}

# values contain null
query ?
SELECT MAP {'a': 1, 'b': null};
----
{a: 1, b: }

# keys contain null
query error DataFusion error: Execution error: map key cannot be null
SELECT MAP {'a': 1, null: 2}

# array as key
query ?
SELECT MAP {[1,2,3]:1, [2,4]:2};
----
 {[1, 2, 3]: 1, [2, 4]: 2}

# array with different type as key
# expect to fail due to type coercion error
query error
SELECT MAP {[1,2,3]:1, ['a', 'b']:2};

# array as value
query ?
SELECT MAP {'a':[1,2,3], 'b':[2,4]};
----
{a: [1, 2, 3], b: [2, 4]}

# array with different type as value
# expect to fail due to type coercion error
query error
SELECT MAP {'a':[1,2,3], 'b':['a', 'b']};

# struct as key
query ?
SELECT MAP {{'a':1, 'b':2}:1, {'a':3, 'b':4}:2};
----
{{a: 1, b: 2}: 1, {a: 3, b: 4}: 2}

# struct with different fields as key
# expect to fail due to type coercion error
query error
SELECT MAP {{'a':1, 'b':2}:1, {'c':3, 'd':4}:2};

# struct as value
query ?
SELECT MAP {'a':{'b':1, 'c':2}, 'b':{'b':3, 'c':4}};
----
{a: {b: 1, c: 2}, b: {b: 3, c: 4}}

# struct with different fields as value
# expect to fail due to type coercion error
query error
SELECT MAP {'a':{'b':1, 'c':2}, 'b':{'c':3, 'd':4}};

# map as key
query ?
SELECT MAP { MAP {1:'a', 2:'b'}:1, MAP {1:'c', 2:'d'}:2 };
----
{{1: a, 2: b}: 1, {1: c, 2: d}: 2}

# map with different keys as key
query ?
SELECT MAP { MAP {1:'a', 2:'b', 3:'c'}:1, MAP {2:'c', 4:'d'}:2 };
----
 {{1: a, 2: b, 3: c}: 1, {2: c, 4: d}: 2}

# map as value
query ?
SELECT MAP {1: MAP {1:'a', 2:'b'}, 2: MAP {1:'c', 2:'d'} };
----
{1: {1: a, 2: b}, 2: {1: c, 2: d}}

# map with different keys as value
query ?
SELECT MAP {'a': MAP {1:'a', 2:'b', 3:'c'}, 'b': MAP {2:'c', 4:'d'} };
----
{a: {1: a, 2: b, 3: c}, b: {2: c, 4: d}}

# complex map for each row
query ?
SELECT MAP {'a': MAP {1:'a', 2:'b', 3:'c'}, 'b': MAP {2:'c', 4:'d'} } from t;
----
{a: {1: a, 2: b, 3: c}, b: {2: c, 4: d}}
{a: {1: a, 2: b, 3: c}, b: {2: c, 4: d}}
{a: {1: a, 2: b, 3: c}, b: {2: c, 4: d}}

# access map with non-existent key
query ?
SELECT MAP {'a': MAP {1:'a', 2:'b', 3:'c'}, 'b': MAP {2:'c', 4:'d'} }['c'];
----
NULL

# access map with null key
query error
SELECT MAP {'a': MAP {1:'a', 2:'b', 3:'c'}, 'b': MAP {2:'c', 4:'d'} }[NULL];

query ?
SELECT MAP { 'a': 1, 2: 3 };
----
{a: 1, 2: 3}

# TODO(https://github.com/apache/datafusion/issues/11785): fix accessing map with non-string key
# query ?
# SELECT MAP { 1: 'a', 2: 'b', 3: 'c' }[1];
# ----
# a

# TODO(https://github.com/apache/datafusion/issues/11785): fix accessing map with non-string key
# query ?
# SELECT MAP { MAP {1:'a', 2:'b'}:1, MAP {1:'c', 2:'d'}:2 }[MAP {1:'a', 2:'b'}];
# ----
# 1

# TODO(https://github.com/apache/datafusion/issues/11785): fix accessing map with non-string key
# query ?
# SELECT MAKE_MAP(1, null, 2, 33, 3, null)[2];
# ----
# 33

## cardinality

# cardinality scalar function
query IIII
select cardinality(map([1, 2, 3], ['a', 'b', 'c'])), cardinality(MAP {'a': 1, 'b': null}), cardinality(MAP([],[])),
       cardinality(MAP {'a': MAP {1:'a', 2:'b', 3:'c'}, 'b': MAP {2:'c', 4:'d'} });
----
3 2 0 2

# map_extract
# key is string
query ????
select map_extract(MAP {'a': 1, 'b': NULL, 'c': 3}, 'a'), map_extract(MAP {'a': 1, 'b': NULL, 'c': 3}, 'b'),
       map_extract(MAP {'a': 1, 'b': NULL, 'c': 3}, 'c'), map_extract(MAP {'a': 1, 'b': NULL, 'c': 3}, 'd');
----
[1] [] [3] []

# key is integer
query ????
select map_extract(MAP {1: 1, 2: NULL, 3:3}, 1), map_extract(MAP {1: 1, 2: NULL, 3:3}, 2),
       map_extract(MAP {1: 1, 2: NULL, 3:3}, 3), map_extract(MAP {1: 1, 2: NULL, 3:3}, 4);
----
[1] [] [3] []

# value is list
query ????
select map_extract(MAP {1: [1, 2], 2: NULL, 3:[3]}, 1), map_extract(MAP {1: [1, 2], 2: NULL, 3:[3]}, 2),
       map_extract(MAP {1: [1, 2], 2: NULL, 3:[3]}, 3), map_extract(MAP {1: [1, 2], 2: NULL, 3:[3]}, 4);
----
[[1, 2]] [] [[3]] []

# key in map and query key are different types
query ?????
select map_extract(MAP {1: 1, 2: 2, 3:3}, '1'), map_extract(MAP {1: 1, 2: 2, 3:3}, 1.0),
       map_extract(MAP {1.0: 1, 2: 2, 3:3}, '1'), map_extract(MAP {'1': 1, '2': 2, '3':3}, 1.0),
       map_extract(MAP {arrow_cast('1', 'Utf8View'): 1, arrow_cast('2', 'Utf8View'): 2, arrow_cast('3', 'Utf8View'):3}, '1');
----
[1] [1] [1] [] [1]

# map_extract with columns
query ???
select map_extract(column1, 1), map_extract(column1, 5), map_extract(column1, 7) from map_array_table_1;
----
[[1, , 3]] [] []
[] [[4, , 6]] []
[] [] [[1, , 3]]

query ???
select map_extract(column1, column2), map_extract(column1, column3), map_extract(column1, column4) from map_array_table_1;
----
[[1, , 3]] [[1, , 3]] [[1, , 3]]
[[4, , 6]] [[4, , 6]] [[4, , 6]]
[] [] []

query ???
select map_extract(column1, column2), map_extract(column1, column3), map_extract(column1, column4) from map_array_table_2;
----
[[1, , 3]] [] [[1, , 3]]
[[4, , 6]] [] [[4, , 6]]
[] [] []

query ???
select map_extract(column1, 1), map_extract(column1, 5), map_extract(column1, 7) from map_array_table_2;
----
[[1, , 3]] [] []
[] [[4, , 6]] []
[] [] [[1, , 3]]

# Tests for map_keys

query ?
SELECT map_keys(MAP { 'a': 1, 2: 3 });
----
[a, 2]

query ?
SELECT map_keys(MAP {'a':1, 'b':2, 'c':3 }) FROM t;
----
[a, b, c]
[a, b, c]
[a, b, c]

query ?
SELECT map_keys(Map{column1: column2, column3: column4}) FROM t;
----
[a, k1]
[b, k3]
[d, k5]

query ?
SELECT map_keys(map(column5, column6)) FROM t;
----
[k1, k2]
[k3]
[k5]

query ?
SELECT map_keys(map(column8, column9)) FROM t;
----
[[1, 2, 3]]
[[4]]
[[1, 2]]

query ?
SELECT map_keys(Map{});
----
[]

query ?
SELECT map_keys(column1) from map_array_table_1;
----
[1, 2, 3]
[4, 5, 6]
[7, 8, 9]


# Tests for map_values

query ?
SELECT map_values(MAP { 'a': 1, 2: 3 });
----
[1, 3]

query ?
SELECT map_values(MAP {'a':1, 'b':2, 'c':3 }) FROM t;
----
[1, 2, 3]
[1, 2, 3]
[1, 2, 3]

query ?
SELECT map_values(Map{column1: column2, column3: column4}) FROM t;
----
[1, 10]
[2, 30]
[4, 50]

query ?
SELECT map_values(map(column5, column6)) FROM t;
----
[1, 2]
[3]
[5]

query ?
SELECT map_values(map(column8, column9)) FROM t;
----
[a]
[b]
[c]

query ?
SELECT map_values(Map{});
----
[]

query ?
SELECT map_values(column1) from map_array_table_1;
----
[[1, , 3], [4, , 6], [7, 8, 9]]
[[1, , 3], [4, , 6], [7, 8, 9]]
[[1, , 3], [9, , 6], [7, 8, 9]]

statement ok
drop table map_array_table_1;

statement ok
drop table map_array_table_2;
