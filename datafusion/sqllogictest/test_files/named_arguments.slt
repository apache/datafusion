# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at

#   http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

#############
## Tests for Named Arguments (PostgreSQL-style param => value syntax)
#############

# Test positional arguments still work (baseline)
query T
SELECT substr('hello world', 7, 5);
----
world

# Test named arguments in order
query T
SELECT substr(str => 'hello world', start_pos => 7, length => 5);
----
world

# Test named arguments out of order
query T
SELECT substr(length => 5, str => 'hello world', start_pos => 7);
----
world

# Test mixed positional and named arguments
query T
SELECT substr('hello world', start_pos => 7, length => 5);
----
world

# Test with only 2 parameters (length optional)
query T
SELECT substr(str => 'hello world', start_pos => 7);
----
world

# Test all parameters named with substring alias
query T
SELECT substring(str => 'hello', start_pos => 1, length => 3);
----
hel

# Error: positional argument after named argument
query error DataFusion error: Error during planning: Positional argument.*follows named argument
SELECT substr(str => 'hello', 1, 3);

# Error: unknown parameter name
query error DataFusion error: Error during planning: Unknown parameter name 'invalid'
SELECT substr(invalid => 'hello', start_pos => 1, length => 3);

# Error: duplicate parameter name
query error DataFusion error: Error during planning: Parameter 'str' specified multiple times
SELECT substr(str => 'hello', str => 'world', start_pos => 1);

# Test case-insensitive parameter names (unquoted identifiers)
query T
SELECT substr(STR => 'hello world', START_POS => 7, LENGTH => 5);
----
world

# Test case-insensitive with mixed case
query T
SELECT substr(Str => 'hello world', Start_Pos => 7);
----
world

# Error: case-sensitive quoted parameter names don't match
query error DataFusion error: Error during planning: Unknown parameter name 'STR'
SELECT substr("STR" => 'hello world', "start_pos" => 7);

# Error: wrong number of arguments
# This query provides only 1 argument but substr requires 2 or 3
query error DataFusion error: Error during planning: Execution error: Function 'substr' user-defined coercion failed with "Error during planning: The substr function requires 2 or 3 arguments, but got 1."
SELECT substr(str => 'hello world');

#############
## PostgreSQL Dialect Tests (uses ExprNamed variant)
#############

statement ok
set datafusion.sql_parser.dialect = 'PostgreSQL';

# Test named arguments in order
query T
SELECT substr(str => 'hello world', start_pos => 7, length => 5);
----
world

# Test named arguments out of order
query T
SELECT substr(length => 5, str => 'hello world', start_pos => 7);
----
world

# Test mixed positional and named arguments
query T
SELECT substr('hello world', start_pos => 7, length => 5);
----
world

# Test with only 2 parameters (length optional)
query T
SELECT substr(str => 'hello world', start_pos => 7);
----
world

# Reset to default dialect
statement ok
set datafusion.sql_parser.dialect = 'Generic';

#############
## MsSQL Dialect Tests (does NOT support => operator)
#############

statement ok
set datafusion.sql_parser.dialect = 'MsSQL';

# Error: MsSQL dialect does not support => operator
query error DataFusion error: SQL error: ParserError\("Expected: \), found: => at Line: 1, Column: 19"\)
SELECT substr(str => 'hello world', start_pos => 7, length => 5);

# Reset to default dialect
statement ok
set datafusion.sql_parser.dialect = 'Generic';

#############
## Aggregate UDF Tests - using corr(y, x) function
#############

# Setup test data
statement ok
CREATE TABLE correlation_test(col1 DOUBLE, col2 DOUBLE) AS VALUES
  (1.0, 2.0),
  (2.0, 4.0),
  (3.0, 6.0),
  (4.0, 8.0);

# Test positional arguments (baseline)
query R
SELECT corr(col1, col2) FROM correlation_test;
----
1

# Test named arguments in order
query R
SELECT corr(y => col1, x => col2) FROM correlation_test;
----
1

# Test named arguments out of order
query R
SELECT corr(x => col2, y => col1) FROM correlation_test;
----
1

# Test mixed positional and named arguments
query R
SELECT corr(col1, x => col2) FROM correlation_test;
----
1

# Error: positional argument after named argument
query error DataFusion error: Error during planning: Positional argument.*follows named argument
SELECT corr(y => col1, col2) FROM correlation_test;

# Error: unknown parameter name
query error DataFusion error: Error during planning: Unknown parameter name 'invalid'
SELECT corr(invalid => col1, x => col2) FROM correlation_test;

# Error: duplicate parameter name
query error DataFusion error: Error during planning: Parameter 'y' specified multiple times
SELECT corr(y => col1, y => col2) FROM correlation_test;

# Error: function doesn't support named arguments (count has no parameter names)
query error DataFusion error: Error during planning: Aggregate function 'count' does not support named arguments
SELECT count(value => col1) FROM correlation_test;

# Cleanup
statement ok
DROP TABLE correlation_test;

#############
## Aggregate UDF with WITHIN GROUP Tests - using percentile_cont(expression, percentile)
## This tests the special handling where WITHIN GROUP ORDER BY expressions are prepended to args
#############

# Setup test data
statement ok
CREATE TABLE percentile_test(salary DOUBLE) AS VALUES
  (50000.0),
  (60000.0),
  (70000.0),
  (80000.0),
  (90000.0);

# Test positional arguments (baseline) - standard call without WITHIN GROUP
query R
SELECT percentile_cont(salary, 0.5) FROM percentile_test;
----
70000

# Test WITHIN GROUP with positional argument
query R
SELECT percentile_cont(0.5) WITHIN GROUP (ORDER BY salary) FROM percentile_test;
----
70000

# Test WITHIN GROUP with named argument for percentile
# The ORDER BY expression (salary) is prepended internally, becoming: percentile_cont(salary, 0.5)
# We use named argument for percentile, which should work correctly
query R
SELECT percentile_cont(percentile => 0.5) WITHIN GROUP (ORDER BY salary) FROM percentile_test;
----
70000

# Test standard call with named arguments in order
query R
SELECT percentile_cont(expr => salary, percentile => 0.5) FROM percentile_test;
----
70000

# Test standard call with named arguments out of order
query R
SELECT percentile_cont(percentile => 0.5, expr => salary) FROM percentile_test;
----
70000

# Test standard call with mixed positional and named
query R
SELECT percentile_cont(salary, percentile => 0.75) FROM percentile_test;
----
80000

# Verify the WITHIN GROUP prepending logic with different percentile value
query R
SELECT percentile_cont(percentile => 0.25) WITHIN GROUP (ORDER BY salary) FROM percentile_test;
----
60000

# Cleanup
statement ok
DROP TABLE percentile_test;

#############
## Window UDF Tests - using lead(expression, offset, default) function
#############

# Setup test data
statement ok
CREATE TABLE window_test(id INT, value INT) AS VALUES
  (1, 10),
  (2, 20),
  (3, 30),
  (4, 40);

# Test positional arguments (baseline)
query II
SELECT id, lead(value, 1, 0) OVER (ORDER BY id) FROM window_test ORDER BY id;
----
1 20
2 30
3 40
4 0

# Test named arguments in order
query II
SELECT id, lead(expr => value, offset => 1, default => 0) OVER (ORDER BY id) FROM window_test ORDER BY id;
----
1 20
2 30
3 40
4 0

# Test named arguments out of order
query II
SELECT id, lead(default => 0, offset => 1, expr => value) OVER (ORDER BY id) FROM window_test ORDER BY id;
----
1 20
2 30
3 40
4 0

# Test mixed positional and named arguments
query II
SELECT id, lead(value, offset => 1, default => 0) OVER (ORDER BY id) FROM window_test ORDER BY id;
----
1 20
2 30
3 40
4 0

# Test with 1 argument (offset and default use defaults)
query II
SELECT id, lead(expr => value) OVER (ORDER BY id) FROM window_test ORDER BY id;
----
1 20
2 30
3 40
4 NULL

# Test with 2 arguments (default uses default)
query II
SELECT id, lead(expr => value, offset => 2) OVER (ORDER BY id) FROM window_test ORDER BY id;
----
1 30
2 40
3 NULL
4 NULL

# Error: positional argument after named argument
query error DataFusion error: Error during planning: Positional argument.*follows named argument
SELECT lead(expr => value, 1, 0) OVER (ORDER BY id) FROM window_test;

# Error: unknown parameter name
query error DataFusion error: Error during planning: Unknown parameter name 'invalid'
SELECT lead(invalid => value, offset => 1) OVER (ORDER BY id) FROM window_test;

# Error: duplicate parameter name
query error DataFusion error: Error during planning: Parameter 'expr' specified multiple times
SELECT lead(expr => value, expr => value) OVER (ORDER BY id) FROM window_test;

# Error: function doesn't support named arguments (row_number has no parameter names)
query error DataFusion error: Error during planning: Window function 'row_number' does not support named arguments
SELECT row_number(value => 1) OVER (ORDER BY id) FROM window_test;

# Cleanup
statement ok
DROP TABLE window_test;
