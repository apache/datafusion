# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at

#   http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

##########
## Projection Statement Tests
##########

# prepare data
statement ok
CREATE EXTERNAL TABLE aggregate_test_100 (
  c1  VARCHAR NOT NULL,
  c2  TINYINT NOT NULL,
  c3  SMALLINT NOT NULL,
  c4  SMALLINT,
  c5  INT,
  c6  BIGINT NOT NULL,
  c7  SMALLINT NOT NULL,
  c8  INT NOT NULL,
  c9  BIGINT UNSIGNED NOT NULL,
  c10 VARCHAR NOT NULL,
  c11 FLOAT NOT NULL,
  c12 DOUBLE NOT NULL,
  c13 VARCHAR NOT NULL
)
STORED AS CSV
WITH HEADER ROW
LOCATION '../../testing/data/csv/aggregate_test_100.csv'

statement ok
CREATE EXTERNAL TABLE aggregate_simple (
  c1 FLOAT NOT NULL,
  c2 DOUBLE NOT NULL,
  c3 BOOLEAN NOT NULL
)
STORED AS CSV
WITH HEADER ROW
LOCATION '../core/tests/data/aggregate_simple.csv'

statement ok
CREATE TABLE memory_table(a INT NOT NULL, b INT NOT NULL, c INT NOT NULL) AS VALUES
(1, 2, 3),
(10, 12, 12),
(10, 12, 12),
(100, 120, 120);

statement ok
CREATE TABLE cpu_load_short(host STRING NOT NULL) AS VALUES
('host1'),
('host2');

statement ok
CREATE EXTERNAL TABLE test (c1 int, c2 bigint, c3 boolean)
STORED AS CSV LOCATION '../core/tests/data/partitioned_csv';

statement ok
CREATE EXTERNAL TABLE test_simple (c1 int, c2 bigint, c3 boolean)
STORED AS CSV LOCATION '../core/tests/data/partitioned_csv/partition-0.csv';

# projection same fields
query I rowsort
select (1+1) as a from (select 1 as a) as b;
----
2

# projection type alias
query R rowsort
SELECT c1 as c3 FROM aggregate_simple ORDER BY c3 LIMIT 2;
----
0.00001
0.00002

# csv query group by avg with projection
query RT rowsort
SELECT avg(c12), c1 FROM aggregate_test_100 GROUP BY c1;
----
0.410407092638 b
0.486006692713 e
0.487545174661 a
0.488553793875 d
0.660045653644 c

# parallel projection
query II
SELECT c1, c2 FROM test ORDER BY c1 DESC, c2 ASC
----
3 0
3 1
3 2
3 3
3 4
3 5
3 6
3 7
3 8
3 9
3 10
2 0
2 1
2 2
2 3
2 4
2 5
2 6
2 7
2 8
2 9
2 10
1 0
1 1
1 2
1 3
1 4
1 5
1 6
1 7
1 8
1 9
1 10
0 0
0 1
0 2
0 3
0 4
0 5
0 6
0 7
0 8
0 9
0 10

# subquery alias case insensitive
query II
SELECT V1.c1, v1.C2 FROM (SELECT test_simple.C1, TEST_SIMPLE.c2 FROM test_simple) V1 ORDER BY v1.c1, V1.C2 LIMIT 1;
----
0 0

# projection on table scan
statement ok
set datafusion.explain.logical_plan_only = true

query TT
EXPLAIN SELECT c2 FROM test;
----
logical_plan TableScan: test projection=[c2]

statement count 44
select c2 from test;

statement ok
set datafusion.explain.logical_plan_only = false

# project cast dictionary
query T
SELECT 
    CASE 
        WHEN cpu_load_short.host IS NULL THEN ''
        ELSE cpu_load_short.host
    END AS host
FROM 
    cpu_load_short;
----
host1
host2

# projection on memory scan
query TT
explain select b from memory_table;
----
logical_plan TableScan: memory_table projection=[b]
physical_plan MemoryExec: partitions=1, partition_sizes=[1]

query I
select b from memory_table;
----
2
12
12
120

# project column with same name as relation
query I
select a.a from (select 1 as a) as a;
----
1

# project column with filters that cant pushed down always false
query I
select * from (select 1 as a) f where f.a=2;
----


# project column with filters that cant pushed down always true
query I
select * from (select 1 as a) f where f.a=1;
----
1

# project columns in memory without propagation
query I
SELECT column1 as a from (values (1), (2)) f where f.column1 = 2;
----
2

# clean data
statement ok
DROP TABLE aggregate_simple;

statement ok
DROP TABLE aggregate_test_100;

statement ok
DROP TABLE memory_table;

statement ok
DROP TABLE cpu_load_short;

statement ok
DROP TABLE test;

statement ok
DROP TABLE test_simple;
