<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="534" onload="init(evt)" viewBox="0 0 1200 534" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="534" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="517.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="517.00"> </text><svg id="frames" x="10" width="1180" total_samples="36086"><g><title>dfbench`dfbench::main (137 samples, 0.38%)</title><rect x="0.0000%" y="421" width="0.3796%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="137"/><text x="0.2500%" y="431.50"></text></g><g><title>dfbench`dfbench::main::_{{closure}} (50 samples, 0.14%)</title><rect x="0.3796%" y="421" width="0.1386%" height="15" fill="rgb(217,0,24)" fg:x="137" fg:w="50"/><text x="0.6296%" y="431.50"></text></g><g><title>dfbench`datafusion_physical_plan::execution_plan::collect::_{{closure}} (27 samples, 0.07%)</title><rect x="0.5182%" y="405" width="0.0748%" height="15" fill="rgb(221,193,54)" fg:x="187" fg:w="27"/><text x="0.7682%" y="415.50"></text></g><g><title>dfbench`datafusion::datasource::file_format::parquet::fetch_parquet_metadata::_{{closure}} (10 samples, 0.03%)</title><rect x="1.0780%" y="245" width="0.0277%" height="15" fill="rgb(248,212,6)" fg:x="389" fg:w="10"/><text x="1.3280%" y="255.50"></text></g><g><title>dfbench`parquet::file::metadata::reader::ParquetMetaDataReader::decode_metadata (10 samples, 0.03%)</title><rect x="1.0780%" y="229" width="0.0277%" height="15" fill="rgb(208,68,35)" fg:x="389" fg:w="10"/><text x="1.3280%" y="239.50"></text></g><g><title>dfbench`&lt;parquet::format::FileMetaData as parquet::thrift::TSerializable&gt;::read_from_in_protocol (7 samples, 0.02%)</title><rect x="1.0863%" y="213" width="0.0194%" height="15" fill="rgb(232,128,0)" fg:x="392" fg:w="7"/><text x="1.3363%" y="223.50"></text></g><g><title>dfbench`&lt;parquet::format::ColumnChunk as parquet::thrift::TSerializable&gt;::read_from_in_protocol (6 samples, 0.02%)</title><rect x="1.0891%" y="197" width="0.0166%" height="15" fill="rgb(207,160,47)" fg:x="393" fg:w="6"/><text x="1.3391%" y="207.50"></text></g><g><title>dfbench`&lt;datafusion::execution::session_state::DefaultQueryPlanner as datafusion::execution::context::QueryPlanner&gt;::create_physical_plan::_{{closure}} (13 samples, 0.04%)</title><rect x="1.0724%" y="357" width="0.0360%" height="15" fill="rgb(228,23,34)" fg:x="387" fg:w="13"/><text x="1.3224%" y="367.50"></text></g><g><title>dfbench`&lt;datafusion::physical_planner::DefaultPhysicalPlanner as datafusion::physical_planner::PhysicalPlanner&gt;::create_physical_plan::_{{closure}} (13 samples, 0.04%)</title><rect x="1.0724%" y="341" width="0.0360%" height="15" fill="rgb(218,30,26)" fg:x="387" fg:w="13"/><text x="1.3224%" y="351.50"></text></g><g><title>dfbench`datafusion::physical_planner::DefaultPhysicalPlanner::create_initial_plan::_{{closure}} (11 samples, 0.03%)</title><rect x="1.0780%" y="325" width="0.0305%" height="15" fill="rgb(220,122,19)" fg:x="389" fg:w="11"/><text x="1.3280%" y="335.50"></text></g><g><title>dfbench`datafusion::physical_planner::DefaultPhysicalPlanner::map_logical_node_to_physical::_{{closure}} (11 samples, 0.03%)</title><rect x="1.0780%" y="309" width="0.0305%" height="15" fill="rgb(250,228,42)" fg:x="389" fg:w="11"/><text x="1.3280%" y="319.50"></text></g><g><title>dfbench`&lt;datafusion::datasource::listing::table::ListingTable as datafusion_catalog::table::TableProvider&gt;::scan::_{{closure}} (11 samples, 0.03%)</title><rect x="1.0780%" y="293" width="0.0305%" height="15" fill="rgb(240,193,28)" fg:x="389" fg:w="11"/><text x="1.3280%" y="303.50"></text></g><g><title>dfbench`&lt;futures_util::stream::stream::next::Next&lt;St&gt; as core::future::future::Future&gt;::poll (11 samples, 0.03%)</title><rect x="1.0780%" y="277" width="0.0305%" height="15" fill="rgb(216,20,37)" fg:x="389" fg:w="11"/><text x="1.3280%" y="287.50"></text></g><g><title>dfbench`&lt;datafusion::datasource::file_format::parquet::ParquetFormat as datafusion::datasource::file_format::FileFormat&gt;::infer_stats::_{{closure}} (11 samples, 0.03%)</title><rect x="1.0780%" y="261" width="0.0305%" height="15" fill="rgb(206,188,39)" fg:x="389" fg:w="11"/><text x="1.3280%" y="271.50"></text></g><g><title>dfbench`datafusion::dataframe::DataFrame::create_physical_plan::_{{closure}} (19 samples, 0.05%)</title><rect x="1.0724%" y="389" width="0.0527%" height="15" fill="rgb(217,207,13)" fg:x="387" fg:w="19"/><text x="1.3224%" y="399.50"></text></g><g><title>dfbench`datafusion::execution::session_state::SessionState::create_physical_plan::_{{closure}} (19 samples, 0.05%)</title><rect x="1.0724%" y="373" width="0.0527%" height="15" fill="rgb(231,73,38)" fg:x="387" fg:w="19"/><text x="1.3224%" y="383.50"></text></g><g><title>dfbench`datafusion::execution::session_state::SessionState::optimize (6 samples, 0.02%)</title><rect x="1.1085%" y="357" width="0.0166%" height="15" fill="rgb(225,20,46)" fg:x="400" fg:w="6"/><text x="1.3585%" y="367.50"></text></g><g><title>dfbench`&lt;parquet::format::FileMetaData as parquet::thrift::TSerializable&gt;::read_from_in_protocol (7 samples, 0.02%)</title><rect x="1.1334%" y="325" width="0.0194%" height="15" fill="rgb(210,31,41)" fg:x="409" fg:w="7"/><text x="1.3834%" y="335.50"></text></g><g><title>dfbench`&lt;parquet::format::ColumnChunk as parquet::thrift::TSerializable&gt;::read_from_in_protocol (5 samples, 0.01%)</title><rect x="1.1389%" y="309" width="0.0139%" height="15" fill="rgb(221,200,47)" fg:x="411" fg:w="5"/><text x="1.3889%" y="319.50"></text></g><g><title>dfbench`datafusion::datasource::listing::table::ListingOptions::infer_schema::_{{closure}} (12 samples, 0.03%)</title><rect x="1.1251%" y="389" width="0.0333%" height="15" fill="rgb(226,26,5)" fg:x="406" fg:w="12"/><text x="1.3751%" y="399.50"></text></g><g><title>dfbench`&lt;datafusion::datasource::file_format::parquet::ParquetFormat as datafusion::datasource::file_format::FileFormat&gt;::infer_schema::_{{closure}} (12 samples, 0.03%)</title><rect x="1.1251%" y="373" width="0.0333%" height="15" fill="rgb(249,33,26)" fg:x="406" fg:w="12"/><text x="1.3751%" y="383.50"></text></g><g><title>dfbench`datafusion::datasource::file_format::parquet::fetch_parquet_metadata::_{{closure}} (11 samples, 0.03%)</title><rect x="1.1279%" y="357" width="0.0305%" height="15" fill="rgb(235,183,28)" fg:x="407" fg:w="11"/><text x="1.3779%" y="367.50"></text></g><g><title>dfbench`parquet::file::metadata::reader::ParquetMetaDataReader::decode_metadata (11 samples, 0.03%)</title><rect x="1.1279%" y="341" width="0.0305%" height="15" fill="rgb(221,5,38)" fg:x="407" fg:w="11"/><text x="1.3779%" y="351.50"></text></g><g><title>dfbench`datafusion_physical_plan::common::collect::_{{closure}} (20 samples, 0.06%)</title><rect x="1.1583%" y="389" width="0.0554%" height="15" fill="rgb(247,18,42)" fg:x="418" fg:w="20"/><text x="1.4083%" y="399.50"></text></g><g><title>dfbench`&lt;futures_util::stream::try_stream::try_collect::TryCollect&lt;St,C&gt; as core::future::future::Future&gt;::poll (18 samples, 0.05%)</title><rect x="1.3080%" y="373" width="0.0499%" height="15" fill="rgb(241,131,45)" fg:x="472" fg:w="18"/><text x="1.5580%" y="383.50"></text></g><g><title>dfbench`&lt;datafusion_physical_plan::sorts::merge::SortPreservingMergeStream&lt;C&gt; as futures_core::stream::Stream&gt;::poll_next (32 samples, 0.09%)</title><rect x="1.4355%" y="357" width="0.0887%" height="15" fill="rgb(249,31,29)" fg:x="518" fg:w="32"/><text x="1.6855%" y="367.50"></text></g><g><title>dfbench`&lt;alloc::collections::vec_deque::VecDeque&lt;T,A&gt; as core::clone::Clone&gt;::clone (42 samples, 0.12%)</title><rect x="1.6239%" y="341" width="0.1164%" height="15" fill="rgb(225,111,53)" fg:x="586" fg:w="42"/><text x="1.8739%" y="351.50"></text></g><g><title>dfbench`mi_malloc_aligned (99 samples, 0.27%)</title><rect x="3.4196%" y="309" width="0.2743%" height="15" fill="rgb(238,160,17)" fg:x="1234" fg:w="99"/><text x="3.6696%" y="319.50"></text></g><g><title>dfbench`&lt;alloc::collections::vec_deque::VecDeque&lt;T,A&gt; as core::clone::Clone&gt;::clone (602 samples, 1.67%)</title><rect x="2.1144%" y="325" width="1.6682%" height="15" fill="rgb(214,148,48)" fg:x="763" fg:w="602"/><text x="2.3644%" y="335.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (32 samples, 0.09%)</title><rect x="3.6940%" y="309" width="0.0887%" height="15" fill="rgb(232,36,49)" fg:x="1333" fg:w="32"/><text x="3.9440%" y="319.50"></text></g><g><title>dfbench`&lt;datafusion_physical_plan::sorts::stream::FieldCursorStream&lt;T&gt; as datafusion_physical_plan::sorts::stream::PartitionedStream&gt;::poll_next (18 samples, 0.05%)</title><rect x="3.7826%" y="325" width="0.0499%" height="15" fill="rgb(209,103,24)" fg:x="1365" fg:w="18"/><text x="4.0326%" y="335.50"></text></g><g><title>dfbench`datafusion_physical_plan::metrics::baseline::BaselineMetrics::record_poll (42 samples, 0.12%)</title><rect x="3.8325%" y="325" width="0.1164%" height="15" fill="rgb(229,88,8)" fg:x="1383" fg:w="42"/><text x="4.0825%" y="335.50"></text></g><g><title>dfbench`&lt;datafusion_physical_plan::stream::RecordBatchStreamAdapter&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (13 samples, 0.04%)</title><rect x="4.1429%" y="293" width="0.0360%" height="15" fill="rgb(213,181,19)" fg:x="1495" fg:w="13"/><text x="4.3929%" y="303.50"></text></g><g><title>dfbench`&lt;futures_util::stream::select::Select&lt;St1,St2&gt; as futures_core::stream::Stream&gt;::poll_next (25 samples, 0.07%)</title><rect x="4.1789%" y="293" width="0.0693%" height="15" fill="rgb(254,191,54)" fg:x="1508" fg:w="25"/><text x="4.4289%" y="303.50"></text></g><g><title>dfbench`&lt;futures_util::stream::stream::filter_map::FilterMap&lt;St,Fut,F&gt; as futures_core::stream::Stream&gt;::poll_next (197 samples, 0.55%)</title><rect x="4.7442%" y="261" width="0.5459%" height="15" fill="rgb(241,83,37)" fg:x="1712" fg:w="197"/><text x="4.9942%" y="271.50"></text></g><g><title>dfbench`tokio::task::join_set::JoinSet&lt;T&gt;::join_next::_{{closure}} (106 samples, 0.29%)</title><rect x="4.9964%" y="245" width="0.2937%" height="15" fill="rgb(233,36,39)" fg:x="1803" fg:w="106"/><text x="5.2464%" y="255.50"></text></g><g><title>dfbench`tokio::runtime::park::clone (33 samples, 0.09%)</title><rect x="5.9192%" y="245" width="0.0914%" height="15" fill="rgb(226,3,54)" fg:x="2136" fg:w="33"/><text x="6.1692%" y="255.50"></text></g><g><title>dfbench`tokio::runtime::park::drop_waker (8 samples, 0.02%)</title><rect x="6.0106%" y="245" width="0.0222%" height="15" fill="rgb(245,192,40)" fg:x="2169" fg:w="8"/><text x="6.2606%" y="255.50"></text></g><g><title>dfbench`tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (126 samples, 0.35%)</title><rect x="6.0328%" y="245" width="0.3492%" height="15" fill="rgb(238,167,29)" fg:x="2177" fg:w="126"/><text x="6.2828%" y="255.50"></text></g><g><title>dfbench`&lt;futures_util::stream::unfold::Unfold&lt;T,F,Fut&gt; as futures_core::stream::Stream&gt;::poll_next (540 samples, 1.50%)</title><rect x="5.2901%" y="261" width="1.4964%" height="15" fill="rgb(232,182,51)" fg:x="1909" fg:w="540"/><text x="5.5401%" y="271.50"></text></g><g><title>dfbench`tokio::sync::task::atomic_waker::AtomicWaker::register_by_ref (146 samples, 0.40%)</title><rect x="6.3820%" y="245" width="0.4046%" height="15" fill="rgb(231,60,39)" fg:x="2303" fg:w="146"/><text x="6.6320%" y="255.50"></text></g><g><title>dfbench`tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (49 samples, 0.14%)</title><rect x="6.7866%" y="261" width="0.1358%" height="15" fill="rgb(208,69,12)" fg:x="2449" fg:w="49"/><text x="7.0366%" y="271.50"></text></g><g><title>dfbench`tokio::sync::task::atomic_waker::AtomicWaker::register_by_ref (30 samples, 0.08%)</title><rect x="6.9224%" y="261" width="0.0831%" height="15" fill="rgb(235,93,37)" fg:x="2498" fg:w="30"/><text x="7.1724%" y="271.50"></text></g><g><title>dfbench`tokio::task::join_set::JoinSet&lt;T&gt;::join_next::_{{closure}} (31 samples, 0.09%)</title><rect x="7.0055%" y="261" width="0.0859%" height="15" fill="rgb(213,116,39)" fg:x="2528" fg:w="31"/><text x="7.2555%" y="271.50"></text></g><g><title>dfbench`&lt;futures_util::stream::select::Select&lt;St1,St2&gt; as futures_core::stream::Stream&gt;::poll_next (1,105 samples, 3.06%)</title><rect x="4.4366%" y="277" width="3.0621%" height="15" fill="rgb(222,207,29)" fg:x="1601" fg:w="1105"/><text x="4.6866%" y="287.50">dfb..</text></g><g><title>libdyld.dylib`tlv_get_addr (147 samples, 0.41%)</title><rect x="7.0914%" y="261" width="0.4074%" height="15" fill="rgb(206,96,30)" fg:x="2559" fg:w="147"/><text x="7.3414%" y="271.50"></text></g><g><title>dfbench`&lt;futures_util::stream::stream::filter_map::FilterMap&lt;St,Fut,F&gt; as futures_core::stream::Stream&gt;::poll_next (36 samples, 0.10%)</title><rect x="7.4988%" y="277" width="0.0998%" height="15" fill="rgb(218,138,4)" fg:x="2706" fg:w="36"/><text x="7.7488%" y="287.50"></text></g><g><title>dfbench`&lt;futures_util::stream::unfold::Unfold&lt;T,F,Fut&gt; as futures_core::stream::Stream&gt;::poll_next (36 samples, 0.10%)</title><rect x="7.5985%" y="277" width="0.0998%" height="15" fill="rgb(250,191,14)" fg:x="2742" fg:w="36"/><text x="7.8485%" y="287.50"></text></g><g><title>dfbench`&lt;datafusion_physical_plan::sorts::stream::FieldCursorStream&lt;T&gt; as datafusion_physical_plan::sorts::stream::PartitionedStream&gt;::poll_next (1,309 samples, 3.63%)</title><rect x="4.1013%" y="309" width="3.6274%" height="15" fill="rgb(239,60,40)" fg:x="1480" fg:w="1309"/><text x="4.3513%" y="319.50">dfbe..</text></g><g><title>dfbench`datafusion_physical_plan::sorts::stream::FusedStreams::poll_next (1,256 samples, 3.48%)</title><rect x="4.2482%" y="293" width="3.4806%" height="15" fill="rgb(206,27,48)" fg:x="1533" fg:w="1256"/><text x="4.4982%" y="303.50">dfb..</text></g><g><title>dfbench`futures_util::stream::select::select::round_robin (11 samples, 0.03%)</title><rect x="7.6983%" y="277" width="0.0305%" height="15" fill="rgb(225,35,8)" fg:x="2778" fg:w="11"/><text x="7.9483%" y="287.50"></text></g><g><title>dfbench`datafusion_physical_plan::sorts::merge::SortPreservingMergeStream&lt;C&gt;::maybe_poll_stream (1,410 samples, 3.91%)</title><rect x="3.9489%" y="325" width="3.9073%" height="15" fill="rgb(250,213,24)" fg:x="1425" fg:w="1410"/><text x="4.1989%" y="335.50">dfbe..</text></g><g><title>dfbench`datafusion_physical_plan::sorts::stream::FusedStreams::poll_next (46 samples, 0.13%)</title><rect x="7.7288%" y="309" width="0.1275%" height="15" fill="rgb(247,123,22)" fg:x="2789" fg:w="46"/><text x="7.9788%" y="319.50"></text></g><g><title>dfbench`&lt;datafusion_physical_plan::sorts::merge::SortPreservingMergeStream&lt;C&gt; as futures_core::stream::Stream&gt;::poll_next (2,223 samples, 6.16%)</title><rect x="1.7403%" y="341" width="6.1603%" height="15" fill="rgb(231,138,38)" fg:x="628" fg:w="2223"/><text x="1.9903%" y="351.50">dfbench`..</text></g><g><title>dfbench`tokio::runtime::park::wake_by_ref (15 samples, 0.04%)</title><rect x="7.8590%" y="325" width="0.0416%" height="15" fill="rgb(231,145,46)" fg:x="2836" fg:w="15"/><text x="8.1090%" y="335.50"></text></g><g><title>dfbench`datafusion_physical_plan::metrics::baseline::BaselineMetrics::record_poll (14 samples, 0.04%)</title><rect x="7.9006%" y="341" width="0.0388%" height="15" fill="rgb(251,118,11)" fg:x="2851" fg:w="14"/><text x="8.1506%" y="351.50"></text></g><g><title>dfbench`datafusion_physical_plan::sorts::merge::SortPreservingMergeStream&lt;C&gt;::maybe_poll_stream (27 samples, 0.07%)</title><rect x="7.9394%" y="341" width="0.0748%" height="15" fill="rgb(217,147,25)" fg:x="2865" fg:w="27"/><text x="8.1894%" y="351.50"></text></g><g><title>dfbench`mi_free (95 samples, 0.26%)</title><rect x="8.0142%" y="341" width="0.2633%" height="15" fill="rgb(247,81,37)" fg:x="2892" fg:w="95"/><text x="8.2642%" y="351.50"></text></g><g><title>dfbench`datafusion_physical_plan::execution_plan::collect::_{{closure}} (2,565 samples, 7.11%)</title><rect x="1.2138%" y="389" width="7.1080%" height="15" fill="rgb(209,12,38)" fg:x="438" fg:w="2565"/><text x="1.4638%" y="399.50">dfbench`da..</text></g><g><title>dfbench`datafusion_physical_plan::common::collect::_{{closure}} (2,513 samples, 6.96%)</title><rect x="1.3579%" y="373" width="6.9639%" height="15" fill="rgb(227,1,9)" fg:x="490" fg:w="2513"/><text x="1.6079%" y="383.50">dfbench`d..</text></g><g><title>dfbench`&lt;futures_util::stream::try_stream::try_collect::TryCollect&lt;St,C&gt; as core::future::future::Future&gt;::poll (2,453 samples, 6.80%)</title><rect x="1.5241%" y="357" width="6.7977%" height="15" fill="rgb(248,47,43)" fg:x="550" fg:w="2453"/><text x="1.7741%" y="367.50">dfbench`&lt;..</text></g><g><title>dfbench`tokio::runtime::park::wake_by_ref (16 samples, 0.04%)</title><rect x="8.2774%" y="341" width="0.0443%" height="15" fill="rgb(221,10,30)" fg:x="2987" fg:w="16"/><text x="8.5274%" y="351.50"></text></g><g><title>dfbench`dfbench::main::_{{closure}} (2,792 samples, 7.74%)</title><rect x="0.5930%" y="405" width="7.7371%" height="15" fill="rgb(210,229,1)" fg:x="214" fg:w="2792"/><text x="0.8430%" y="415.50">dfbench`dfb..</text></g><g><title>dfbench`dfbench::main (2,858 samples, 7.92%)</title><rect x="0.5182%" y="421" width="7.9200%" height="15" fill="rgb(222,148,37)" fg:x="187" fg:w="2858"/><text x="0.7682%" y="431.50">dfbench`dfb..</text></g><g><title>dfbench`tokio::runtime::park::Inner::park (39 samples, 0.11%)</title><rect x="8.3301%" y="405" width="0.1081%" height="15" fill="rgb(234,67,33)" fg:x="3006" fg:w="39"/><text x="8.5801%" y="415.50"></text></g><g><title>dfbench`tokio::runtime::park::Inner::park (17 samples, 0.05%)</title><rect x="8.4382%" y="421" width="0.0471%" height="15" fill="rgb(247,98,35)" fg:x="3045" fg:w="17"/><text x="8.6882%" y="431.50"></text></g><g><title>dfbench`main (3,246 samples, 9.00%)</title><rect x="0.0000%" y="453" width="8.9952%" height="15" fill="rgb(247,138,52)" fg:x="0" fg:w="3246"/><text x="0.2500%" y="463.50">dfbench`main</text></g><g><title>dfbench`std::sys_common::backtrace::__rust_begin_short_backtrace (3,246 samples, 9.00%)</title><rect x="0.0000%" y="437" width="8.9952%" height="15" fill="rgb(213,79,30)" fg:x="0" fg:w="3246"/><text x="0.2500%" y="447.50">dfbench`std::..</text></g><g><title>libdyld.dylib`tlv_get_addr (184 samples, 0.51%)</title><rect x="8.4853%" y="421" width="0.5099%" height="15" fill="rgb(246,177,23)" fg:x="3062" fg:w="184"/><text x="8.7353%" y="431.50"></text></g><g><title>dfbench`mi_arenas_try_purge (28 samples, 0.08%)</title><rect x="8.9952%" y="389" width="0.0776%" height="15" fill="rgb(230,62,27)" fg:x="3246" fg:w="28"/><text x="9.2452%" y="399.50"></text></g><g><title>dfbench`mi_arena_purge (28 samples, 0.08%)</title><rect x="8.9952%" y="373" width="0.0776%" height="15" fill="rgb(216,154,8)" fg:x="3246" fg:w="28"/><text x="9.2452%" y="383.50"></text></g><g><title>libsystem_kernel.dylib`madvise (28 samples, 0.08%)</title><rect x="8.9952%" y="357" width="0.0776%" height="15" fill="rgb(244,35,45)" fg:x="3246" fg:w="28"/><text x="9.2452%" y="367.50"></text></g><g><title>libsystem_c.dylib`exit (30 samples, 0.08%)</title><rect x="8.9952%" y="437" width="0.0831%" height="15" fill="rgb(251,115,12)" fg:x="3246" fg:w="30"/><text x="9.2452%" y="447.50"></text></g><g><title>libsystem_c.dylib`__cxa_finalize_ranges (30 samples, 0.08%)</title><rect x="8.9952%" y="421" width="0.0831%" height="15" fill="rgb(240,54,50)" fg:x="3246" fg:w="30"/><text x="9.2452%" y="431.50"></text></g><g><title>dfbench`mi_process_done (30 samples, 0.08%)</title><rect x="8.9952%" y="405" width="0.0831%" height="15" fill="rgb(233,84,52)" fg:x="3246" fg:w="30"/><text x="9.2452%" y="415.50"></text></g><g><title>dyld`start (3,277 samples, 9.08%)</title><rect x="0.0000%" y="469" width="9.0811%" height="15" fill="rgb(207,117,47)" fg:x="0" fg:w="3277"/><text x="0.2500%" y="479.50">dyld`start</text></g><g><title>libdyld.dylib`dyld4::LibSystemHelpers::getenv (31 samples, 0.09%)</title><rect x="8.9952%" y="453" width="0.0859%" height="15" fill="rgb(249,43,39)" fg:x="3246" fg:w="31"/><text x="9.2452%" y="463.50"></text></g><g><title>libsystem_kernel.dylib`__exit (26 samples, 0.07%)</title><rect x="9.0811%" y="469" width="0.0721%" height="15" fill="rgb(209,38,44)" fg:x="3277" fg:w="26"/><text x="9.3311%" y="479.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvwait (9 samples, 0.02%)</title><rect x="9.1698%" y="373" width="0.0249%" height="15" fill="rgb(236,212,23)" fg:x="3309" fg:w="9"/><text x="9.4198%" y="383.50"></text></g><g><title>dfbench`parking_lot::condvar::Condvar::wait_until_internal (14 samples, 0.04%)</title><rect x="9.1587%" y="389" width="0.0388%" height="15" fill="rgb(242,79,21)" fg:x="3305" fg:w="14"/><text x="9.4087%" y="399.50"></text></g><g><title>dfbench`object_store::local::open_file (21 samples, 0.06%)</title><rect x="9.2058%" y="357" width="0.0582%" height="15" fill="rgb(211,96,35)" fg:x="3322" fg:w="21"/><text x="9.4558%" y="367.50"></text></g><g><title>dfbench`std::fs::OpenOptions::_open (21 samples, 0.06%)</title><rect x="9.2058%" y="341" width="0.0582%" height="15" fill="rgb(253,215,40)" fg:x="3322" fg:w="21"/><text x="9.4558%" y="351.50"></text></g><g><title>dfbench`std::sys::pal::unix::fs::File::open_c (21 samples, 0.06%)</title><rect x="9.2058%" y="325" width="0.0582%" height="15" fill="rgb(211,81,21)" fg:x="3322" fg:w="21"/><text x="9.4558%" y="335.50"></text></g><g><title>libsystem_kernel.dylib`__open (21 samples, 0.06%)</title><rect x="9.2058%" y="309" width="0.0582%" height="15" fill="rgb(208,190,38)" fg:x="3322" fg:w="21"/><text x="9.4558%" y="319.50"></text></g><g><title>dfbench`mi_heap_malloc_zero_aligned_at_generic (4 samples, 0.01%)</title><rect x="9.2640%" y="341" width="0.0111%" height="15" fill="rgb(235,213,38)" fg:x="3343" fg:w="4"/><text x="9.5140%" y="351.50"></text></g><g><title>dfbench`_mi_malloc_generic (4 samples, 0.01%)</title><rect x="9.2640%" y="325" width="0.0111%" height="15" fill="rgb(237,122,38)" fg:x="3343" fg:w="4"/><text x="9.5140%" y="335.50"></text></g><g><title>dfbench`_mi_free_delayed_block (4 samples, 0.01%)</title><rect x="9.2640%" y="309" width="0.0111%" height="15" fill="rgb(244,218,35)" fg:x="3343" fg:w="4"/><text x="9.5140%" y="319.50"></text></g><g><title>dfbench`_mi_page_free (4 samples, 0.01%)</title><rect x="9.2640%" y="293" width="0.0111%" height="15" fill="rgb(240,68,47)" fg:x="3343" fg:w="4"/><text x="9.5140%" y="303.50"></text></g><g><title>dfbench`mi_segment_page_clear (4 samples, 0.01%)</title><rect x="9.2640%" y="277" width="0.0111%" height="15" fill="rgb(210,16,53)" fg:x="3343" fg:w="4"/><text x="9.5140%" y="287.50"></text></g><g><title>dfbench`mi_segment_span_free_coalesce (4 samples, 0.01%)</title><rect x="9.2640%" y="261" width="0.0111%" height="15" fill="rgb(235,124,12)" fg:x="3343" fg:w="4"/><text x="9.5140%" y="271.50"></text></g><g><title>dfbench`mi_segment_span_free (4 samples, 0.01%)</title><rect x="9.2640%" y="245" width="0.0111%" height="15" fill="rgb(224,169,11)" fg:x="3343" fg:w="4"/><text x="9.5140%" y="255.50"></text></g><g><title>dfbench`mi_segment_try_purge (4 samples, 0.01%)</title><rect x="9.2640%" y="229" width="0.0111%" height="15" fill="rgb(250,166,2)" fg:x="3343" fg:w="4"/><text x="9.5140%" y="239.50"></text></g><g><title>dfbench`mi_segment_purge (4 samples, 0.01%)</title><rect x="9.2640%" y="213" width="0.0111%" height="15" fill="rgb(242,216,29)" fg:x="3343" fg:w="4"/><text x="9.5140%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`madvise (4 samples, 0.01%)</title><rect x="9.2640%" y="197" width="0.0111%" height="15" fill="rgb(230,116,27)" fg:x="3343" fg:w="4"/><text x="9.5140%" y="207.50"></text></g><g><title>dfbench`object_store::local::read_range (32 samples, 0.09%)</title><rect x="9.2640%" y="357" width="0.0887%" height="15" fill="rgb(228,99,48)" fg:x="3343" fg:w="32"/><text x="9.5140%" y="367.50"></text></g><g><title>libsystem_kernel.dylib`read (27 samples, 0.07%)</title><rect x="9.2778%" y="341" width="0.0748%" height="15" fill="rgb(253,11,6)" fg:x="3348" fg:w="27"/><text x="9.5278%" y="351.50"></text></g><g><title>dfbench`&lt;object_store::local::LocalFileSystem as object_store::ObjectStore&gt;::get_range::_{{closure}}::_{{closure}} (54 samples, 0.15%)</title><rect x="9.2058%" y="373" width="0.1496%" height="15" fill="rgb(247,143,39)" fg:x="3322" fg:w="54"/><text x="9.4558%" y="383.50"></text></g><g><title>dfbench`object_store::local::open_file (156 samples, 0.43%)</title><rect x="9.3610%" y="357" width="0.4323%" height="15" fill="rgb(236,97,10)" fg:x="3378" fg:w="156"/><text x="9.6110%" y="367.50"></text></g><g><title>dfbench`std::fs::OpenOptions::_open (156 samples, 0.43%)</title><rect x="9.3610%" y="341" width="0.4323%" height="15" fill="rgb(233,208,19)" fg:x="3378" fg:w="156"/><text x="9.6110%" y="351.50"></text></g><g><title>dfbench`std::sys::pal::unix::fs::File::open_c (156 samples, 0.43%)</title><rect x="9.3610%" y="325" width="0.4323%" height="15" fill="rgb(216,164,2)" fg:x="3378" fg:w="156"/><text x="9.6110%" y="335.50"></text></g><g><title>libsystem_kernel.dylib`__open (155 samples, 0.43%)</title><rect x="9.3637%" y="309" width="0.4295%" height="15" fill="rgb(220,129,5)" fg:x="3379" fg:w="155"/><text x="9.6137%" y="319.50"></text></g><g><title>dfbench`_mi_free_delayed_block (118 samples, 0.33%)</title><rect x="9.7960%" y="309" width="0.3270%" height="15" fill="rgb(242,17,10)" fg:x="3535" fg:w="118"/><text x="10.0460%" y="319.50"></text></g><g><title>dfbench`_mi_page_free (118 samples, 0.33%)</title><rect x="9.7960%" y="293" width="0.3270%" height="15" fill="rgb(242,107,0)" fg:x="3535" fg:w="118"/><text x="10.0460%" y="303.50"></text></g><g><title>dfbench`mi_segment_page_clear (118 samples, 0.33%)</title><rect x="9.7960%" y="277" width="0.3270%" height="15" fill="rgb(251,28,31)" fg:x="3535" fg:w="118"/><text x="10.0460%" y="287.50"></text></g><g><title>dfbench`mi_segment_span_free_coalesce (118 samples, 0.33%)</title><rect x="9.7960%" y="261" width="0.3270%" height="15" fill="rgb(233,223,10)" fg:x="3535" fg:w="118"/><text x="10.0460%" y="271.50"></text></g><g><title>dfbench`mi_segment_span_free (118 samples, 0.33%)</title><rect x="9.7960%" y="245" width="0.3270%" height="15" fill="rgb(215,21,27)" fg:x="3535" fg:w="118"/><text x="10.0460%" y="255.50"></text></g><g><title>dfbench`mi_segment_try_purge (118 samples, 0.33%)</title><rect x="9.7960%" y="229" width="0.3270%" height="15" fill="rgb(232,23,21)" fg:x="3535" fg:w="118"/><text x="10.0460%" y="239.50"></text></g><g><title>dfbench`mi_segment_purge (117 samples, 0.32%)</title><rect x="9.7988%" y="213" width="0.3242%" height="15" fill="rgb(244,5,23)" fg:x="3536" fg:w="117"/><text x="10.0488%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`madvise (116 samples, 0.32%)</title><rect x="9.8016%" y="197" width="0.3215%" height="15" fill="rgb(226,81,46)" fg:x="3537" fg:w="116"/><text x="10.0516%" y="207.50"></text></g><g><title>dfbench`mi_heap_malloc_zero_aligned_at_generic (130 samples, 0.36%)</title><rect x="9.7933%" y="341" width="0.3603%" height="15" fill="rgb(247,70,30)" fg:x="3534" fg:w="130"/><text x="10.0433%" y="351.50"></text></g><g><title>dfbench`_mi_malloc_generic (130 samples, 0.36%)</title><rect x="9.7933%" y="325" width="0.3603%" height="15" fill="rgb(212,68,19)" fg:x="3534" fg:w="130"/><text x="10.0433%" y="335.50"></text></g><g><title>dfbench`mi_page_fresh_alloc (6 samples, 0.02%)</title><rect x="10.1369%" y="309" width="0.0166%" height="15" fill="rgb(240,187,13)" fg:x="3658" fg:w="6"/><text x="10.3869%" y="319.50"></text></g><g><title>dfbench`mi_segments_page_alloc (6 samples, 0.02%)</title><rect x="10.1369%" y="293" width="0.0166%" height="15" fill="rgb(223,113,26)" fg:x="3658" fg:w="6"/><text x="10.3869%" y="303.50"></text></g><g><title>dfbench`mi_segment_try_purge (4 samples, 0.01%)</title><rect x="10.1424%" y="277" width="0.0111%" height="15" fill="rgb(206,192,2)" fg:x="3660" fg:w="4"/><text x="10.3924%" y="287.50"></text></g><g><title>dfbench`mi_segment_purge (4 samples, 0.01%)</title><rect x="10.1424%" y="261" width="0.0111%" height="15" fill="rgb(241,108,4)" fg:x="3660" fg:w="4"/><text x="10.3924%" y="271.50"></text></g><g><title>libsystem_kernel.dylib`madvise (4 samples, 0.01%)</title><rect x="10.1424%" y="245" width="0.0111%" height="15" fill="rgb(247,173,49)" fg:x="3660" fg:w="4"/><text x="10.3924%" y="255.50"></text></g><g><title>dfbench`object_store::local::read_range (341 samples, 0.94%)</title><rect x="9.7933%" y="357" width="0.9450%" height="15" fill="rgb(224,114,35)" fg:x="3534" fg:w="341"/><text x="10.0433%" y="367.50"></text></g><g><title>libsystem_kernel.dylib`read (209 samples, 0.58%)</title><rect x="10.1591%" y="341" width="0.5792%" height="15" fill="rgb(245,159,27)" fg:x="3666" fg:w="209"/><text x="10.4091%" y="351.50"></text></g><g><title>dfbench`&lt;object_store::local::LocalFileSystem as object_store::ObjectStore&gt;::get_ranges::_{{closure}}::_{{closure}} (512 samples, 1.42%)</title><rect x="9.3554%" y="373" width="1.4188%" height="15" fill="rgb(245,172,44)" fg:x="3376" fg:w="512"/><text x="9.6054%" y="383.50"></text></g><g><title>libsystem_kernel.dylib`fstat (10 samples, 0.03%)</title><rect x="10.7465%" y="357" width="0.0277%" height="15" fill="rgb(236,23,11)" fg:x="3878" fg:w="10"/><text x="10.9965%" y="367.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (5 samples, 0.01%)</title><rect x="10.7770%" y="341" width="0.0139%" height="15" fill="rgb(205,117,38)" fg:x="3889" fg:w="5"/><text x="11.0270%" y="351.50"></text></g><g><title>dfbench`std::sys::pal::unix::time::Timespec::now (6 samples, 0.02%)</title><rect x="10.7770%" y="373" width="0.0166%" height="15" fill="rgb(237,72,25)" fg:x="3889" fg:w="6"/><text x="11.0270%" y="383.50"></text></g><g><title>libsystem_c.dylib`clock_gettime (6 samples, 0.02%)</title><rect x="10.7770%" y="357" width="0.0166%" height="15" fill="rgb(244,70,9)" fg:x="3889" fg:w="6"/><text x="11.0270%" y="367.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvwait (47 samples, 0.13%)</title><rect x="10.8047%" y="341" width="0.1302%" height="15" fill="rgb(217,125,39)" fg:x="3899" fg:w="47"/><text x="11.0547%" y="351.50"></text></g><g><title>dfbench`parking_lot::condvar::Condvar::wait_until_internal (49 samples, 0.14%)</title><rect x="10.8047%" y="357" width="0.1358%" height="15" fill="rgb(235,36,10)" fg:x="3899" fg:w="49"/><text x="11.0547%" y="367.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvwait (10 samples, 0.03%)</title><rect x="10.9433%" y="309" width="0.0277%" height="15" fill="rgb(251,123,47)" fg:x="3949" fg:w="10"/><text x="11.1933%" y="319.50"></text></g><g><title>dfbench`tokio::runtime::park::Inner::park (13 samples, 0.04%)</title><rect x="10.9433%" y="341" width="0.0360%" height="15" fill="rgb(221,13,13)" fg:x="3949" fg:w="13"/><text x="11.1933%" y="351.50"></text></g><g><title>dfbench`parking_lot::condvar::Condvar::wait_until_internal (13 samples, 0.04%)</title><rect x="10.9433%" y="325" width="0.0360%" height="15" fill="rgb(238,131,9)" fg:x="3949" fg:w="13"/><text x="11.1933%" y="335.50"></text></g><g><title>dfbench`tokio::runtime::time::Driver::park_internal (18 samples, 0.05%)</title><rect x="10.9405%" y="357" width="0.0499%" height="15" fill="rgb(211,50,8)" fg:x="3948" fg:w="18"/><text x="11.1905%" y="367.50"></text></g><g><title>dfbench`tokio::runtime::time::_&lt;impl tokio::runtime::time::handle::Handle&gt;::process_at_time::_{{closure}} (4 samples, 0.01%)</title><rect x="10.9793%" y="341" width="0.0111%" height="15" fill="rgb(245,182,24)" fg:x="3962" fg:w="4"/><text x="11.2293%" y="351.50"></text></g><g><title>dfbench`tokio::runtime::scheduler::multi_thread::worker::Context::park_timeout (72 samples, 0.20%)</title><rect x="10.7937%" y="373" width="0.1995%" height="15" fill="rgb(242,14,37)" fg:x="3895" fg:w="72"/><text x="11.0437%" y="383.50"></text></g><g><title>dfbench`parking_lot::condvar::Condvar::notify_one_slow (12 samples, 0.03%)</title><rect x="10.9932%" y="357" width="0.0333%" height="15" fill="rgb(246,228,12)" fg:x="3967" fg:w="12"/><text x="11.2432%" y="367.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (10 samples, 0.03%)</title><rect x="10.9987%" y="341" width="0.0277%" height="15" fill="rgb(213,55,15)" fg:x="3969" fg:w="10"/><text x="11.2487%" y="351.50"></text></g><g><title>dfbench`&lt;datafusion_physical_plan::repartition::RepartitionStream as futures_core::stream::Stream&gt;::poll_next (5 samples, 0.01%)</title><rect x="11.2454%" y="261" width="0.0139%" height="15" fill="rgb(209,9,3)" fg:x="4058" fg:w="5"/><text x="11.4954%" y="271.50"></text></g><g><title>dfbench`&lt;arrow_array::array::primitive_array::PrimitiveArray&lt;T&gt; as arrow_array::array::Array&gt;::get_array_memory_size (6 samples, 0.02%)</title><rect x="11.2620%" y="245" width="0.0166%" height="15" fill="rgb(230,59,30)" fg:x="4064" fg:w="6"/><text x="11.5120%" y="255.50"></text></g><g><title>dfbench`&lt;datafusion_physical_plan::repartition::RepartitionStream as futures_core::stream::Stream&gt;::poll_next (16 samples, 0.04%)</title><rect x="11.2786%" y="245" width="0.0443%" height="15" fill="rgb(209,121,21)" fg:x="4070" fg:w="16"/><text x="11.5286%" y="255.50"></text></g><g><title>dfbench`&lt;datafusion_physical_plan::repartition::distributor_channels::RecvFuture&lt;T&gt; as core::future::future::Future&gt;::poll (8 samples, 0.02%)</title><rect x="11.3008%" y="229" width="0.0222%" height="15" fill="rgb(220,109,13)" fg:x="4078" fg:w="8"/><text x="11.5508%" y="239.50"></text></g><g><title>dfbench`&lt;datafusion_physical_plan::stream::RecordBatchStreamAdapter&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (25 samples, 0.07%)</title><rect x="11.2592%" y="261" width="0.0693%" height="15" fill="rgb(232,18,1)" fg:x="4063" fg:w="25"/><text x="11.5092%" y="271.50"></text></g><g><title>dfbench`arrow_array::array::Array::null_count (4 samples, 0.01%)</title><rect x="11.3285%" y="261" width="0.0111%" height="15" fill="rgb(215,41,42)" fg:x="4088" fg:w="4"/><text x="11.5785%" y="271.50"></text></g><g><title>dfbench`arrow_array::record_batch::RecordBatch::try_new_impl (22 samples, 0.06%)</title><rect x="11.3396%" y="261" width="0.0610%" height="15" fill="rgb(224,123,36)" fg:x="4092" fg:w="22"/><text x="11.5896%" y="271.50"></text></g><g><title>dfbench`core::ops::function::FnOnce::call_once (14 samples, 0.04%)</title><rect x="11.3617%" y="245" width="0.0388%" height="15" fill="rgb(240,125,3)" fg:x="4100" fg:w="14"/><text x="11.6117%" y="255.50"></text></g><g><title>dfbench`&lt;arrow_schema::datatype::DataType as core::cmp::PartialEq&gt;::eq (12 samples, 0.03%)</title><rect x="11.3673%" y="229" width="0.0333%" height="15" fill="rgb(205,98,50)" fg:x="4102" fg:w="12"/><text x="11.6173%" y="239.50"></text></g><g><title>dfbench`arrow_data::data::ArrayDataBuilder::build_impl (5 samples, 0.01%)</title><rect x="11.5890%" y="181" width="0.0139%" height="15" fill="rgb(205,185,37)" fg:x="4182" fg:w="5"/><text x="11.8390%" y="191.50"></text></g><g><title>dfbench`arrow_array::array::primitive_array::_&lt;impl core::convert::From&lt;arrow_array::array::primitive_array::PrimitiveArray&lt;T&gt;&gt; for arrow_data::data::ArrayData&gt;::from (19 samples, 0.05%)</title><rect x="11.5530%" y="197" width="0.0527%" height="15" fill="rgb(238,207,15)" fg:x="4169" fg:w="19"/><text x="11.8030%" y="207.50"></text></g><g><title>dfbench`&lt;arrow_array::array::primitive_array::PrimitiveArray&lt;T&gt; as arrow_array::array::Array&gt;::to_data (31 samples, 0.09%)</title><rect x="11.5336%" y="213" width="0.0859%" height="15" fill="rgb(213,199,42)" fg:x="4162" fg:w="31"/><text x="11.7836%" y="223.50"></text></g><g><title>dfbench`mi_malloc_aligned (4 samples, 0.01%)</title><rect x="11.6084%" y="197" width="0.0111%" height="15" fill="rgb(235,201,11)" fg:x="4189" fg:w="4"/><text x="11.8584%" y="207.50"></text></g><g><title>dfbench`arrow_data::transform::MutableArrayData::into_builder (10 samples, 0.03%)</title><rect x="11.6278%" y="213" width="0.0277%" height="15" fill="rgb(207,46,11)" fg:x="4196" fg:w="10"/><text x="11.8778%" y="223.50"></text></g><g><title>dfbench`mi_free (6 samples, 0.02%)</title><rect x="11.6389%" y="197" width="0.0166%" height="15" fill="rgb(241,35,35)" fg:x="4200" fg:w="6"/><text x="11.8889%" y="207.50"></text></g><g><title>dfbench`_mi_free_delayed_block (6 samples, 0.02%)</title><rect x="11.6860%" y="165" width="0.0166%" height="15" fill="rgb(243,32,47)" fg:x="4217" fg:w="6"/><text x="11.9360%" y="175.50"></text></g><g><title>dfbench`_mi_page_free (4 samples, 0.01%)</title><rect x="11.6915%" y="149" width="0.0111%" height="15" fill="rgb(247,202,23)" fg:x="4219" fg:w="4"/><text x="11.9415%" y="159.50"></text></g><g><title>dfbench`mi_segment_page_clear (4 samples, 0.01%)</title><rect x="11.6915%" y="133" width="0.0111%" height="15" fill="rgb(219,102,11)" fg:x="4219" fg:w="4"/><text x="11.9415%" y="143.50"></text></g><g><title>dfbench`mi_segment_span_free_coalesce (4 samples, 0.01%)</title><rect x="11.6915%" y="117" width="0.0111%" height="15" fill="rgb(243,110,44)" fg:x="4219" fg:w="4"/><text x="11.9415%" y="127.50"></text></g><g><title>dfbench`mi_segment_span_free (4 samples, 0.01%)</title><rect x="11.6915%" y="101" width="0.0111%" height="15" fill="rgb(222,74,54)" fg:x="4219" fg:w="4"/><text x="11.9415%" y="111.50"></text></g><g><title>dfbench`mi_segment_try_purge (4 samples, 0.01%)</title><rect x="11.6915%" y="85" width="0.0111%" height="15" fill="rgb(216,99,12)" fg:x="4219" fg:w="4"/><text x="11.9415%" y="95.50"></text></g><g><title>dfbench`mi_segment_purge (4 samples, 0.01%)</title><rect x="11.6915%" y="69" width="0.0111%" height="15" fill="rgb(226,22,26)" fg:x="4219" fg:w="4"/><text x="11.9415%" y="79.50"></text></g><g><title>libsystem_kernel.dylib`madvise (4 samples, 0.01%)</title><rect x="11.6915%" y="53" width="0.0111%" height="15" fill="rgb(217,163,10)" fg:x="4219" fg:w="4"/><text x="11.9415%" y="63.50"></text></g><g><title>dfbench`mi_page_free_list_extend (7 samples, 0.02%)</title><rect x="11.7054%" y="149" width="0.0194%" height="15" fill="rgb(213,25,53)" fg:x="4224" fg:w="7"/><text x="11.9554%" y="159.50"></text></g><g><title>dfbench`mi_heap_malloc_zero_aligned_at_generic (19 samples, 0.05%)</title><rect x="11.6832%" y="197" width="0.0527%" height="15" fill="rgb(252,105,26)" fg:x="4216" fg:w="19"/><text x="11.9332%" y="207.50"></text></g><g><title>dfbench`_mi_malloc_generic (19 samples, 0.05%)</title><rect x="11.6832%" y="181" width="0.0527%" height="15" fill="rgb(220,39,43)" fg:x="4216" fg:w="19"/><text x="11.9332%" y="191.50"></text></g><g><title>dfbench`mi_find_page (12 samples, 0.03%)</title><rect x="11.7026%" y="165" width="0.0333%" height="15" fill="rgb(229,68,48)" fg:x="4223" fg:w="12"/><text x="11.9526%" y="175.50"></text></g><g><title>dfbench`mi_page_fresh_alloc (4 samples, 0.01%)</title><rect x="11.7248%" y="149" width="0.0111%" height="15" fill="rgb(252,8,32)" fg:x="4231" fg:w="4"/><text x="11.9748%" y="159.50"></text></g><g><title>dfbench`mi_segments_page_alloc (4 samples, 0.01%)</title><rect x="11.7248%" y="133" width="0.0111%" height="15" fill="rgb(223,20,43)" fg:x="4231" fg:w="4"/><text x="11.9748%" y="143.50"></text></g><g><title>dfbench`arrow_data::transform::MutableArrayData::with_capacities (32 samples, 0.09%)</title><rect x="11.6555%" y="213" width="0.0887%" height="15" fill="rgb(229,81,49)" fg:x="4206" fg:w="32"/><text x="11.9055%" y="223.50"></text></g><g><title>dfbench`core::ptr::drop_in_place&lt;arrow_data::data::ArrayData&gt; (6 samples, 0.02%)</title><rect x="11.7469%" y="213" width="0.0166%" height="15" fill="rgb(236,28,36)" fg:x="4239" fg:w="6"/><text x="11.9969%" y="223.50"></text></g><g><title>dfbench`mi_segment_try_purge (23 samples, 0.06%)</title><rect x="11.8661%" y="101" width="0.0637%" height="15" fill="rgb(249,185,26)" fg:x="4282" fg:w="23"/><text x="12.1161%" y="111.50"></text></g><g><title>dfbench`mi_segment_purge (23 samples, 0.06%)</title><rect x="11.8661%" y="85" width="0.0637%" height="15" fill="rgb(249,174,33)" fg:x="4282" fg:w="23"/><text x="12.1161%" y="95.50"></text></g><g><title>libsystem_kernel.dylib`madvise (23 samples, 0.06%)</title><rect x="11.8661%" y="69" width="0.0637%" height="15" fill="rgb(233,201,37)" fg:x="4282" fg:w="23"/><text x="12.1161%" y="79.50"></text></g><g><title>dfbench`_mi_page_free (27 samples, 0.07%)</title><rect x="11.8578%" y="165" width="0.0748%" height="15" fill="rgb(221,78,26)" fg:x="4279" fg:w="27"/><text x="12.1078%" y="175.50"></text></g><g><title>dfbench`mi_segment_page_clear (27 samples, 0.07%)</title><rect x="11.8578%" y="149" width="0.0748%" height="15" fill="rgb(250,127,30)" fg:x="4279" fg:w="27"/><text x="12.1078%" y="159.50"></text></g><g><title>dfbench`mi_segment_span_free_coalesce (27 samples, 0.07%)</title><rect x="11.8578%" y="133" width="0.0748%" height="15" fill="rgb(230,49,44)" fg:x="4279" fg:w="27"/><text x="12.1078%" y="143.50"></text></g><g><title>dfbench`mi_segment_span_free (26 samples, 0.07%)</title><rect x="11.8606%" y="117" width="0.0721%" height="15" fill="rgb(229,67,23)" fg:x="4280" fg:w="26"/><text x="12.1106%" y="127.50"></text></g><g><title>dfbench`mi_segment_free (7 samples, 0.02%)</title><rect x="11.9326%" y="165" width="0.0194%" height="15" fill="rgb(249,83,47)" fg:x="4306" fg:w="7"/><text x="12.1826%" y="175.50"></text></g><g><title>dfbench`mi_arenas_try_purge (7 samples, 0.02%)</title><rect x="11.9326%" y="149" width="0.0194%" height="15" fill="rgb(215,43,3)" fg:x="4306" fg:w="7"/><text x="12.1826%" y="159.50"></text></g><g><title>dfbench`mi_arena_purge (7 samples, 0.02%)</title><rect x="11.9326%" y="133" width="0.0194%" height="15" fill="rgb(238,154,13)" fg:x="4306" fg:w="7"/><text x="12.1826%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`madvise (7 samples, 0.02%)</title><rect x="11.9326%" y="117" width="0.0194%" height="15" fill="rgb(219,56,2)" fg:x="4306" fg:w="7"/><text x="12.1826%" y="127.50"></text></g><g><title>dfbench`mi_heap_malloc_zero_aligned_at_generic (68 samples, 0.19%)</title><rect x="11.7663%" y="213" width="0.1884%" height="15" fill="rgb(233,0,4)" fg:x="4246" fg:w="68"/><text x="12.0163%" y="223.50"></text></g><g><title>dfbench`_mi_malloc_generic (68 samples, 0.19%)</title><rect x="11.7663%" y="197" width="0.1884%" height="15" fill="rgb(235,30,7)" fg:x="4246" fg:w="68"/><text x="12.0163%" y="207.50"></text></g><g><title>dfbench`_mi_free_delayed_block (65 samples, 0.18%)</title><rect x="11.7746%" y="181" width="0.1801%" height="15" fill="rgb(250,79,13)" fg:x="4249" fg:w="65"/><text x="12.0246%" y="191.50"></text></g><g><title>dfbench`arrow_select::concat::concat_fallback (498 samples, 1.38%)</title><rect x="11.4449%" y="229" width="1.3800%" height="15" fill="rgb(211,146,34)" fg:x="4130" fg:w="498"/><text x="11.6949%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (314 samples, 0.87%)</title><rect x="11.9548%" y="213" width="0.8701%" height="15" fill="rgb(228,22,38)" fg:x="4314" fg:w="314"/><text x="12.2048%" y="223.50"></text></g><g><title>dfbench`arrow_select::concat::concat (513 samples, 1.42%)</title><rect x="11.4172%" y="245" width="1.4216%" height="15" fill="rgb(235,168,5)" fg:x="4120" fg:w="513"/><text x="11.6672%" y="255.50"></text></g><g><title>dfbench`_mi_page_free (5 samples, 0.01%)</title><rect x="12.8609%" y="197" width="0.0139%" height="15" fill="rgb(221,155,16)" fg:x="4641" fg:w="5"/><text x="13.1109%" y="207.50"></text></g><g><title>dfbench`mi_segment_page_clear (5 samples, 0.01%)</title><rect x="12.8609%" y="181" width="0.0139%" height="15" fill="rgb(215,215,53)" fg:x="4641" fg:w="5"/><text x="13.1109%" y="191.50"></text></g><g><title>dfbench`mi_segment_span_free_coalesce (5 samples, 0.01%)</title><rect x="12.8609%" y="165" width="0.0139%" height="15" fill="rgb(223,4,10)" fg:x="4641" fg:w="5"/><text x="13.1109%" y="175.50"></text></g><g><title>dfbench`mi_segment_span_free (5 samples, 0.01%)</title><rect x="12.8609%" y="149" width="0.0139%" height="15" fill="rgb(234,103,6)" fg:x="4641" fg:w="5"/><text x="13.1109%" y="159.50"></text></g><g><title>dfbench`mi_segment_try_purge (4 samples, 0.01%)</title><rect x="12.8637%" y="133" width="0.0111%" height="15" fill="rgb(227,97,0)" fg:x="4642" fg:w="4"/><text x="13.1137%" y="143.50"></text></g><g><title>dfbench`mi_segment_purge (4 samples, 0.01%)</title><rect x="12.8637%" y="117" width="0.0111%" height="15" fill="rgb(234,150,53)" fg:x="4642" fg:w="4"/><text x="13.1137%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`madvise (4 samples, 0.01%)</title><rect x="12.8637%" y="101" width="0.0111%" height="15" fill="rgb(228,201,54)" fg:x="4642" fg:w="4"/><text x="13.1137%" y="111.50"></text></g><g><title>dfbench`arrow_select::concat::concat_batches (539 samples, 1.49%)</title><rect x="11.4005%" y="261" width="1.4937%" height="15" fill="rgb(222,22,37)" fg:x="4114" fg:w="539"/><text x="11.6505%" y="271.50"></text></g><g><title>dfbench`mi_heap_malloc_zero_aligned_at_generic (19 samples, 0.05%)</title><rect x="12.8415%" y="245" width="0.0527%" height="15" fill="rgb(237,53,32)" fg:x="4634" fg:w="19"/><text x="13.0915%" y="255.50"></text></g><g><title>dfbench`_mi_malloc_generic (19 samples, 0.05%)</title><rect x="12.8415%" y="229" width="0.0527%" height="15" fill="rgb(233,25,53)" fg:x="4634" fg:w="19"/><text x="13.0915%" y="239.50"></text></g><g><title>dfbench`_mi_free_delayed_block (19 samples, 0.05%)</title><rect x="12.8415%" y="213" width="0.0527%" height="15" fill="rgb(210,40,34)" fg:x="4634" fg:w="19"/><text x="13.0915%" y="223.50"></text></g><g><title>dfbench`mi_segment_free (7 samples, 0.02%)</title><rect x="12.8748%" y="197" width="0.0194%" height="15" fill="rgb(241,220,44)" fg:x="4646" fg:w="7"/><text x="13.1248%" y="207.50"></text></g><g><title>dfbench`mi_arenas_try_purge (7 samples, 0.02%)</title><rect x="12.8748%" y="181" width="0.0194%" height="15" fill="rgb(235,28,35)" fg:x="4646" fg:w="7"/><text x="13.1248%" y="191.50"></text></g><g><title>dfbench`mi_arena_purge (7 samples, 0.02%)</title><rect x="12.8748%" y="165" width="0.0194%" height="15" fill="rgb(210,56,17)" fg:x="4646" fg:w="7"/><text x="13.1248%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`madvise (7 samples, 0.02%)</title><rect x="12.8748%" y="149" width="0.0194%" height="15" fill="rgb(224,130,29)" fg:x="4646" fg:w="7"/><text x="13.1248%" y="159.50"></text></g><g><title>dfbench`alloc::sync::Arc&lt;T,A&gt;::drop_slow (8 samples, 0.02%)</title><rect x="12.9275%" y="213" width="0.0222%" height="15" fill="rgb(235,212,8)" fg:x="4665" fg:w="8"/><text x="13.1775%" y="223.50"></text></g><g><title>dfbench`core::ptr::drop_in_place&lt;arrow_schema::datatype::DataType&gt; (4 samples, 0.01%)</title><rect x="12.9718%" y="197" width="0.0111%" height="15" fill="rgb(223,33,50)" fg:x="4681" fg:w="4"/><text x="13.2218%" y="207.50"></text></g><g><title>dfbench`mi_free (8 samples, 0.02%)</title><rect x="12.9829%" y="197" width="0.0222%" height="15" fill="rgb(219,149,13)" fg:x="4685" fg:w="8"/><text x="13.2329%" y="207.50"></text></g><g><title>dfbench`mi_free_block_delayed_mt (11 samples, 0.03%)</title><rect x="13.0050%" y="197" width="0.0305%" height="15" fill="rgb(250,156,29)" fg:x="4693" fg:w="11"/><text x="13.2550%" y="207.50"></text></g><g><title>dfbench`core::ptr::drop_in_place&lt;arrow_array::array::primitive_array::PrimitiveArray&lt;arrow_array::types::Int8Type&gt;&gt; (36 samples, 0.10%)</title><rect x="12.9496%" y="213" width="0.0998%" height="15" fill="rgb(216,193,19)" fg:x="4673" fg:w="36"/><text x="13.1996%" y="223.50"></text></g><g><title>dfbench`alloc::sync::Arc&lt;T,A&gt;::drop_slow (58 samples, 0.16%)</title><rect x="12.9164%" y="229" width="0.1607%" height="15" fill="rgb(216,135,14)" fg:x="4661" fg:w="58"/><text x="13.1664%" y="239.50"></text></g><g><title>dfbench`mi_free_generic_mt (5 samples, 0.01%)</title><rect x="13.0632%" y="213" width="0.0139%" height="15" fill="rgb(241,47,5)" fg:x="4714" fg:w="5"/><text x="13.3132%" y="223.50"></text></g><g><title>dfbench`core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::sync::Arc&lt;dyn arrow_array::array::Array&gt;&gt;&gt; (65 samples, 0.18%)</title><rect x="12.9053%" y="245" width="0.1801%" height="15" fill="rgb(233,42,35)" fg:x="4657" fg:w="65"/><text x="13.1553%" y="255.50"></text></g><g><title>dfbench`mi_free (9 samples, 0.02%)</title><rect x="13.0854%" y="245" width="0.0249%" height="15" fill="rgb(231,13,6)" fg:x="4722" fg:w="9"/><text x="13.3354%" y="255.50"></text></g><g><title>dfbench`core::ptr::drop_in_place&lt;[arrow_array::record_batch::RecordBatch]&gt; (82 samples, 0.23%)</title><rect x="12.8942%" y="261" width="0.2272%" height="15" fill="rgb(207,181,40)" fg:x="4653" fg:w="82"/><text x="13.1442%" y="271.50"></text></g><g><title>dfbench`_mi_page_free (4 samples, 0.01%)</title><rect x="13.1436%" y="213" width="0.0111%" height="15" fill="rgb(254,173,49)" fg:x="4743" fg:w="4"/><text x="13.3936%" y="223.50"></text></g><g><title>dfbench`mi_segment_page_clear (4 samples, 0.01%)</title><rect x="13.1436%" y="197" width="0.0111%" height="15" fill="rgb(221,1,38)" fg:x="4743" fg:w="4"/><text x="13.3936%" y="207.50"></text></g><g><title>dfbench`mi_segment_span_free_coalesce (4 samples, 0.01%)</title><rect x="13.1436%" y="181" width="0.0111%" height="15" fill="rgb(206,124,46)" fg:x="4743" fg:w="4"/><text x="13.3936%" y="191.50"></text></g><g><title>dfbench`mi_segment_span_free (4 samples, 0.01%)</title><rect x="13.1436%" y="165" width="0.0111%" height="15" fill="rgb(249,21,11)" fg:x="4743" fg:w="4"/><text x="13.3936%" y="175.50"></text></g><g><title>dfbench`mi_segment_try_purge (4 samples, 0.01%)</title><rect x="13.1436%" y="149" width="0.0111%" height="15" fill="rgb(222,201,40)" fg:x="4743" fg:w="4"/><text x="13.3936%" y="159.50"></text></g><g><title>dfbench`mi_segment_purge (4 samples, 0.01%)</title><rect x="13.1436%" y="133" width="0.0111%" height="15" fill="rgb(235,61,29)" fg:x="4743" fg:w="4"/><text x="13.3936%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`madvise (4 samples, 0.01%)</title><rect x="13.1436%" y="117" width="0.0111%" height="15" fill="rgb(219,207,3)" fg:x="4743" fg:w="4"/><text x="13.3936%" y="127.50"></text></g><g><title>dfbench`mi_heap_malloc_zero_aligned_at_generic (8 samples, 0.02%)</title><rect x="13.1353%" y="261" width="0.0222%" height="15" fill="rgb(222,56,46)" fg:x="4740" fg:w="8"/><text x="13.3853%" y="271.50"></text></g><g><title>dfbench`_mi_malloc_generic (8 samples, 0.02%)</title><rect x="13.1353%" y="245" width="0.0222%" height="15" fill="rgb(239,76,54)" fg:x="4740" fg:w="8"/><text x="13.3853%" y="255.50"></text></g><g><title>dfbench`_mi_free_delayed_block (8 samples, 0.02%)</title><rect x="13.1353%" y="229" width="0.0222%" height="15" fill="rgb(231,124,27)" fg:x="4740" fg:w="8"/><text x="13.3853%" y="239.50"></text></g><g><title>dfbench`std::sys::pal::unix::time::Timespec::now (27 samples, 0.07%)</title><rect x="13.1575%" y="261" width="0.0748%" height="15" fill="rgb(249,195,6)" fg:x="4748" fg:w="27"/><text x="13.4075%" y="271.50"></text></g><g><title>libsystem_c.dylib`clock_gettime (27 samples, 0.07%)</title><rect x="13.1575%" y="245" width="0.0748%" height="15" fill="rgb(237,174,47)" fg:x="4748" fg:w="27"/><text x="13.4075%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (27 samples, 0.07%)</title><rect x="13.1575%" y="229" width="0.0748%" height="15" fill="rgb(206,201,31)" fg:x="4748" fg:w="27"/><text x="13.4075%" y="239.50"></text></g><g><title>dfbench`&lt;datafusion_physical_plan::coalesce_batches::CoalesceBatchesStream as futures_core::stream::Stream&gt;::poll_next (731 samples, 2.03%)</title><rect x="11.2093%" y="277" width="2.0257%" height="15" fill="rgb(231,57,52)" fg:x="4045" fg:w="731"/><text x="11.4593%" y="287.50">d..</text></g><g><title>dfbench`arrow_array::record_batch::RecordBatch::slice (5 samples, 0.01%)</title><rect x="13.2350%" y="277" width="0.0139%" height="15" fill="rgb(248,177,22)" fg:x="4776" fg:w="5"/><text x="13.4850%" y="287.50"></text></g><g><title>dfbench`&lt;arrow_array::array::primitive_array::PrimitiveArray&lt;T&gt; as arrow_array::array::Array&gt;::slice (4 samples, 0.01%)</title><rect x="13.2378%" y="261" width="0.0111%" height="15" fill="rgb(215,211,37)" fg:x="4777" fg:w="4"/><text x="13.4878%" y="271.50"></text></g><g><title>dfbench`core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::sync::Arc&lt;dyn arrow_array::array::Array&gt;&gt;&gt; (6 samples, 0.02%)</title><rect x="13.2517%" y="277" width="0.0166%" height="15" fill="rgb(241,128,51)" fg:x="4782" fg:w="6"/><text x="13.5017%" y="287.50"></text></g><g><title>dfbench`alloc::sync::Arc&lt;T,A&gt;::drop_slow (4 samples, 0.01%)</title><rect x="13.2572%" y="261" width="0.0111%" height="15" fill="rgb(227,165,31)" fg:x="4784" fg:w="4"/><text x="13.5072%" y="271.50"></text></g><g><title>dfbench`&lt;datafusion_physical_plan::aggregates::group_values::multi_group_by::GroupValuesColumn&lt;_&gt; as datafusion_physical_plan::aggregates::group_values::GroupValues&gt;::clear_shrink (11 samples, 0.03%)</title><rect x="13.2683%" y="261" width="0.0305%" height="15" fill="rgb(228,167,24)" fg:x="4788" fg:w="11"/><text x="13.5183%" y="271.50"></text></g><g><title>dfbench`mi_free_block_mt (11 samples, 0.03%)</title><rect x="13.2683%" y="245" width="0.0305%" height="15" fill="rgb(228,143,12)" fg:x="4788" fg:w="11"/><text x="13.5183%" y="255.50"></text></g><g><title>dfbench`_mi_os_reset (11 samples, 0.03%)</title><rect x="13.2683%" y="229" width="0.0305%" height="15" fill="rgb(249,149,8)" fg:x="4788" fg:w="11"/><text x="13.5183%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`madvise (11 samples, 0.03%)</title><rect x="13.2683%" y="213" width="0.0305%" height="15" fill="rgb(243,35,44)" fg:x="4788" fg:w="11"/><text x="13.5183%" y="223.50"></text></g><g><title>dfbench`datafusion_physical_plan::aggregates::row_hash::GroupedHashAggregateStream::clear_all (13 samples, 0.04%)</title><rect x="13.2683%" y="277" width="0.0360%" height="15" fill="rgb(246,89,9)" fg:x="4788" fg:w="13"/><text x="13.5183%" y="287.50"></text></g><g><title>dfbench`_mi_heap_realloc_zero (4 samples, 0.01%)</title><rect x="14.4183%" y="213" width="0.0111%" height="15" fill="rgb(233,213,13)" fg:x="5203" fg:w="4"/><text x="14.6683%" y="223.50"></text></g><g><title>dfbench`_mi_malloc_generic (4 samples, 0.01%)</title><rect x="14.4183%" y="197" width="0.0111%" height="15" fill="rgb(233,141,41)" fg:x="5203" fg:w="4"/><text x="14.6683%" y="207.50"></text></g><g><title>dfbench`&lt;datafusion_functions_aggregate::count::CountGroupsAccumulator as datafusion_expr_common::groups_accumulator::GroupsAccumulator&gt;::merge_batch (453 samples, 1.26%)</title><rect x="13.3154%" y="261" width="1.2553%" height="15" fill="rgb(239,167,4)" fg:x="4805" fg:w="453"/><text x="13.5654%" y="271.50"></text></g><g><title>dfbench`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (55 samples, 0.15%)</title><rect x="14.4183%" y="245" width="0.1524%" height="15" fill="rgb(209,217,16)" fg:x="5203" fg:w="55"/><text x="14.6683%" y="255.50"></text></g><g><title>dfbench`alloc::raw_vec::finish_grow (55 samples, 0.15%)</title><rect x="14.4183%" y="229" width="0.1524%" height="15" fill="rgb(219,88,35)" fg:x="5203" fg:w="55"/><text x="14.6683%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (50 samples, 0.14%)</title><rect x="14.4322%" y="213" width="0.1386%" height="15" fill="rgb(220,193,23)" fg:x="5208" fg:w="50"/><text x="14.6822%" y="223.50"></text></g><g><title>dfbench`_mi_heap_realloc_zero (4 samples, 0.01%)</title><rect x="22.3632%" y="197" width="0.0111%" height="15" fill="rgb(230,90,52)" fg:x="8070" fg:w="4"/><text x="22.6132%" y="207.50"></text></g><g><title>dfbench`_mi_malloc_generic (4 samples, 0.01%)</title><rect x="22.3632%" y="181" width="0.0111%" height="15" fill="rgb(252,106,19)" fg:x="8070" fg:w="4"/><text x="22.6132%" y="191.50"></text></g><g><title>dfbench`&lt;datafusion_physical_plan::aggregates::group_values::multi_group_by::primitive::PrimitiveGroupValueBuilder&lt;T,_&gt; as datafusion_physical_plan::aggregates::group_values::multi_group_by::GroupColumn&gt;::vectorized_append (509 samples, 1.41%)</title><rect x="21.4820%" y="245" width="1.4105%" height="15" fill="rgb(206,74,20)" fg:x="7752" fg:w="509"/><text x="21.7320%" y="255.50"></text></g><g><title>dfbench`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (191 samples, 0.53%)</title><rect x="22.3632%" y="229" width="0.5293%" height="15" fill="rgb(230,138,44)" fg:x="8070" fg:w="191"/><text x="22.6132%" y="239.50"></text></g><g><title>dfbench`alloc::raw_vec::finish_grow (191 samples, 0.53%)</title><rect x="22.3632%" y="213" width="0.5293%" height="15" fill="rgb(235,182,43)" fg:x="8070" fg:w="191"/><text x="22.6132%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (187 samples, 0.52%)</title><rect x="22.3743%" y="197" width="0.5182%" height="15" fill="rgb(242,16,51)" fg:x="8074" fg:w="187"/><text x="22.6243%" y="207.50"></text></g><g><title>dfbench`&lt;datafusion_physical_plan::aggregates::group_values::multi_group_by::primitive::PrimitiveGroupValueBuilder&lt;T,_&gt; as datafusion_physical_plan::aggregates::group_values::multi_group_by::GroupColumn&gt;::vectorized_equal_to (1,276 samples, 3.54%)</title><rect x="22.8925%" y="245" width="3.5360%" height="15" fill="rgb(248,9,4)" fg:x="8261" fg:w="1276"/><text x="23.1425%" y="255.50">dfb..</text></g><g><title>dfbench`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (4 samples, 0.01%)</title><rect x="26.4313%" y="245" width="0.0111%" height="15" fill="rgb(210,31,22)" fg:x="9538" fg:w="4"/><text x="26.6813%" y="255.50"></text></g><g><title>dfbench`alloc::raw_vec::finish_grow (4 samples, 0.01%)</title><rect x="26.4313%" y="229" width="0.0111%" height="15" fill="rgb(239,54,39)" fg:x="9538" fg:w="4"/><text x="26.6813%" y="239.50"></text></g><g><title>dfbench`datafusion_common::hash_utils::create_hashes (387 samples, 1.07%)</title><rect x="26.4424%" y="245" width="1.0724%" height="15" fill="rgb(230,99,41)" fg:x="9542" fg:w="387"/><text x="26.6924%" y="255.50"></text></g><g><title>dfbench`&lt;datafusion_physical_plan::aggregates::group_values::multi_group_by::GroupValuesColumn&lt;_&gt; as datafusion_physical_plan::aggregates::group_values::GroupValues&gt;::intern (5,126 samples, 14.20%)</title><rect x="14.5707%" y="261" width="14.2050%" height="15" fill="rgb(253,106,12)" fg:x="5258" fg:w="5126"/><text x="14.8207%" y="271.50">dfbench`&lt;datafusion_ph..</text></g><g><title>dfbench`hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve_rehash (455 samples, 1.26%)</title><rect x="27.5148%" y="245" width="1.2609%" height="15" fill="rgb(213,46,41)" fg:x="9929" fg:w="455"/><text x="27.7648%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (15 samples, 0.04%)</title><rect x="28.7341%" y="229" width="0.0416%" height="15" fill="rgb(215,133,35)" fg:x="10369" fg:w="15"/><text x="28.9841%" y="239.50"></text></g><g><title>dfbench`datafusion_physical_plan::aggregates::evaluate_group_by (4 samples, 0.01%)</title><rect x="28.7812%" y="261" width="0.0111%" height="15" fill="rgb(213,28,5)" fg:x="10386" fg:w="4"/><text x="29.0312%" y="271.50"></text></g><g><title>libsystem_platform.dylib`__bzero (27 samples, 0.07%)</title><rect x="28.7979%" y="261" width="0.0748%" height="15" fill="rgb(215,77,49)" fg:x="10392" fg:w="27"/><text x="29.0479%" y="271.50"></text></g><g><title>dfbench`datafusion_physical_plan::aggregates::row_hash::GroupedHashAggregateStream::group_aggregate_batch (5,635 samples, 15.62%)</title><rect x="13.3043%" y="277" width="15.6155%" height="15" fill="rgb(248,100,22)" fg:x="4801" fg:w="5635"/><text x="13.5543%" y="287.50">dfbench`datafusion_physi..</text></g><g><title>libsystem_platform.dylib`_platform_memset (17 samples, 0.05%)</title><rect x="28.8727%" y="261" width="0.0471%" height="15" fill="rgb(208,67,9)" fg:x="10419" fg:w="17"/><text x="29.1227%" y="271.50"></text></g><g><title>dfbench`&lt;datafusion_physical_plan::aggregates::row_hash::GroupedHashAggregateStream as futures_core::stream::Stream&gt;::poll_next (6,400 samples, 17.74%)</title><rect x="11.2066%" y="293" width="17.7354%" height="15" fill="rgb(219,133,21)" fg:x="4044" fg:w="6400"/><text x="11.4566%" y="303.50">dfbench`&lt;datafusion_physical..</text></g><g><title>dfbench`&lt;datafusion_physical_plan::projection::ProjectionStream as futures_core::stream::Stream&gt;::poll_next (6,405 samples, 17.75%)</title><rect x="11.2038%" y="309" width="17.7493%" height="15" fill="rgb(246,46,29)" fg:x="4043" fg:w="6405"/><text x="11.4538%" y="319.50">dfbench`&lt;datafusion_physical..</text></g><g><title>dfbench`arrow_row::fixed::encode_not_null (56 samples, 0.16%)</title><rect x="29.0833%" y="293" width="0.1552%" height="15" fill="rgb(246,185,52)" fg:x="10495" fg:w="56"/><text x="29.3333%" y="303.50"></text></g><g><title>dfbench`_mi_malloc_generic (5 samples, 0.01%)</title><rect x="29.2662%" y="261" width="0.0139%" height="15" fill="rgb(252,136,11)" fg:x="10561" fg:w="5"/><text x="29.5162%" y="271.50"></text></g><g><title>dfbench`_mi_free_delayed_block (5 samples, 0.01%)</title><rect x="29.2662%" y="245" width="0.0139%" height="15" fill="rgb(219,138,53)" fg:x="10561" fg:w="5"/><text x="29.5162%" y="255.50"></text></g><g><title>dfbench`_mi_page_free (5 samples, 0.01%)</title><rect x="29.2662%" y="229" width="0.0139%" height="15" fill="rgb(211,51,23)" fg:x="10561" fg:w="5"/><text x="29.5162%" y="239.50"></text></g><g><title>dfbench`mi_segment_page_clear (5 samples, 0.01%)</title><rect x="29.2662%" y="213" width="0.0139%" height="15" fill="rgb(247,221,28)" fg:x="10561" fg:w="5"/><text x="29.5162%" y="223.50"></text></g><g><title>dfbench`mi_segment_span_free_coalesce (5 samples, 0.01%)</title><rect x="29.2662%" y="197" width="0.0139%" height="15" fill="rgb(251,222,45)" fg:x="10561" fg:w="5"/><text x="29.5162%" y="207.50"></text></g><g><title>dfbench`mi_segment_span_free (5 samples, 0.01%)</title><rect x="29.2662%" y="181" width="0.0139%" height="15" fill="rgb(217,162,53)" fg:x="10561" fg:w="5"/><text x="29.5162%" y="191.50"></text></g><g><title>dfbench`mi_segment_try_purge (5 samples, 0.01%)</title><rect x="29.2662%" y="165" width="0.0139%" height="15" fill="rgb(229,93,14)" fg:x="10561" fg:w="5"/><text x="29.5162%" y="175.50"></text></g><g><title>dfbench`mi_segment_purge (5 samples, 0.01%)</title><rect x="29.2662%" y="149" width="0.0139%" height="15" fill="rgb(209,67,49)" fg:x="10561" fg:w="5"/><text x="29.5162%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`madvise (5 samples, 0.01%)</title><rect x="29.2662%" y="133" width="0.0139%" height="15" fill="rgb(213,87,29)" fg:x="10561" fg:w="5"/><text x="29.5162%" y="143.50"></text></g><g><title>dfbench`arrow_row::row_lengths (21 samples, 0.06%)</title><rect x="29.2385%" y="293" width="0.0582%" height="15" fill="rgb(205,151,52)" fg:x="10551" fg:w="21"/><text x="29.4885%" y="303.50"></text></g><g><title>dfbench`mi_heap_malloc_zero_aligned_at_generic (11 samples, 0.03%)</title><rect x="29.2662%" y="277" width="0.0305%" height="15" fill="rgb(253,215,39)" fg:x="10561" fg:w="11"/><text x="29.5162%" y="287.50"></text></g><g><title>libsystem_platform.dylib`__bzero (6 samples, 0.02%)</title><rect x="29.2801%" y="261" width="0.0166%" height="15" fill="rgb(221,220,41)" fg:x="10566" fg:w="6"/><text x="29.5301%" y="271.50"></text></g><g><title>dfbench`arrow_row::RowConverter::append (123 samples, 0.34%)</title><rect x="28.9586%" y="309" width="0.3409%" height="15" fill="rgb(218,133,21)" fg:x="10450" fg:w="123"/><text x="29.2086%" y="319.50"></text></g><g><title>dfbench`&lt;datafusion_physical_plan::stream::RecordBatchStreamAdapter&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (6,596 samples, 18.28%)</title><rect x="11.0348%" y="325" width="18.2786%" height="15" fill="rgb(221,193,43)" fg:x="3982" fg:w="6596"/><text x="11.2848%" y="335.50">dfbench`&lt;datafusion_physical..</text></g><g><title>dfbench`DYLD-STUB$$memcmp (14 samples, 0.04%)</title><rect x="29.3133%" y="325" width="0.0388%" height="15" fill="rgb(240,128,52)" fg:x="10578" fg:w="14"/><text x="29.5633%" y="335.50"></text></g><g><title>dfbench`datafusion_physical_plan::common::spawn_buffered::_{{closure}} (6,661 samples, 18.46%)</title><rect x="11.0348%" y="341" width="18.4587%" height="15" fill="rgb(253,114,12)" fg:x="3982" fg:w="6661"/><text x="11.2848%" y="351.50">dfbench`datafusion_physical_p..</text></g><g><title>libsystem_platform.dylib`_platform_memcmp (51 samples, 0.14%)</title><rect x="29.3521%" y="325" width="0.1413%" height="15" fill="rgb(215,223,47)" fg:x="10592" fg:w="51"/><text x="29.6021%" y="335.50"></text></g><g><title>dfbench`&lt;arrow_array::array::primitive_array::PrimitiveArray&lt;T&gt; as core::convert::From&lt;arrow_data::data::ArrayData&gt;&gt;::from (5 samples, 0.01%)</title><rect x="29.8287%" y="293" width="0.0139%" height="15" fill="rgb(248,225,23)" fg:x="10764" fg:w="5"/><text x="30.0787%" y="303.50"></text></g><g><title>dfbench`arrow_buffer::buffer::scalar::ScalarBuffer&lt;T&gt;::new (5 samples, 0.01%)</title><rect x="29.8287%" y="277" width="0.0139%" height="15" fill="rgb(250,108,0)" fg:x="10764" fg:w="5"/><text x="30.0787%" y="287.50"></text></g><g><title>dfbench`&lt;arrow_array::array::primitive_array::PrimitiveArray&lt;arrow_array::types::UInt32Type&gt; as core::convert::From&lt;alloc::vec::Vec&lt;&lt;arrow_array::types::UInt32Type as arrow_array::types::ArrowPrimitiveType&gt;::Native&gt;&gt;&gt;::from (11 samples, 0.03%)</title><rect x="29.8232%" y="309" width="0.0305%" height="15" fill="rgb(228,208,7)" fg:x="10762" fg:w="11"/><text x="30.0732%" y="319.50"></text></g><g><title>dfbench`arrow_array::record_batch::RecordBatch::try_new_impl (10 samples, 0.03%)</title><rect x="29.8620%" y="309" width="0.0277%" height="15" fill="rgb(244,45,10)" fg:x="10776" fg:w="10"/><text x="30.1120%" y="319.50"></text></g><g><title>dfbench`mi_segment_try_purge (10 samples, 0.03%)</title><rect x="31.4138%" y="117" width="0.0277%" height="15" fill="rgb(207,125,25)" fg:x="11336" fg:w="10"/><text x="31.6638%" y="127.50"></text></g><g><title>dfbench`mi_segment_purge (10 samples, 0.03%)</title><rect x="31.4138%" y="101" width="0.0277%" height="15" fill="rgb(210,195,18)" fg:x="11336" fg:w="10"/><text x="31.6638%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`madvise (10 samples, 0.03%)</title><rect x="31.4138%" y="85" width="0.0277%" height="15" fill="rgb(249,80,12)" fg:x="11336" fg:w="10"/><text x="31.6638%" y="95.50"></text></g><g><title>dfbench`_mi_page_free (13 samples, 0.04%)</title><rect x="31.4083%" y="181" width="0.0360%" height="15" fill="rgb(221,65,9)" fg:x="11334" fg:w="13"/><text x="31.6583%" y="191.50"></text></g><g><title>dfbench`mi_segment_page_clear (13 samples, 0.04%)</title><rect x="31.4083%" y="165" width="0.0360%" height="15" fill="rgb(235,49,36)" fg:x="11334" fg:w="13"/><text x="31.6583%" y="175.50"></text></g><g><title>dfbench`mi_segment_span_free_coalesce (12 samples, 0.03%)</title><rect x="31.4111%" y="149" width="0.0333%" height="15" fill="rgb(225,32,20)" fg:x="11335" fg:w="12"/><text x="31.6611%" y="159.50"></text></g><g><title>dfbench`mi_segment_span_free (12 samples, 0.03%)</title><rect x="31.4111%" y="133" width="0.0333%" height="15" fill="rgb(215,141,46)" fg:x="11335" fg:w="12"/><text x="31.6611%" y="143.50"></text></g><g><title>dfbench`_mi_free_delayed_block (37 samples, 0.10%)</title><rect x="31.3446%" y="197" width="0.1025%" height="15" fill="rgb(250,160,47)" fg:x="11311" fg:w="37"/><text x="31.5946%" y="207.50"></text></g><g><title>dfbench`_mi_page_free (6 samples, 0.02%)</title><rect x="31.4942%" y="181" width="0.0166%" height="15" fill="rgb(216,222,40)" fg:x="11365" fg:w="6"/><text x="31.7442%" y="191.50"></text></g><g><title>dfbench`mi_segment_page_clear (6 samples, 0.02%)</title><rect x="31.4942%" y="165" width="0.0166%" height="15" fill="rgb(234,217,39)" fg:x="11365" fg:w="6"/><text x="31.7442%" y="175.50"></text></g><g><title>dfbench`mi_segment_span_free_coalesce (5 samples, 0.01%)</title><rect x="31.4970%" y="149" width="0.0139%" height="15" fill="rgb(207,178,40)" fg:x="11366" fg:w="5"/><text x="31.7470%" y="159.50"></text></g><g><title>dfbench`mi_segment_span_free (5 samples, 0.01%)</title><rect x="31.4970%" y="133" width="0.0139%" height="15" fill="rgb(221,136,13)" fg:x="11366" fg:w="5"/><text x="31.7470%" y="143.50"></text></g><g><title>dfbench`mi_segment_try_purge (5 samples, 0.01%)</title><rect x="31.4970%" y="117" width="0.0139%" height="15" fill="rgb(249,199,10)" fg:x="11366" fg:w="5"/><text x="31.7470%" y="127.50"></text></g><g><title>dfbench`mi_segment_purge (5 samples, 0.01%)</title><rect x="31.4970%" y="101" width="0.0139%" height="15" fill="rgb(249,222,13)" fg:x="11366" fg:w="5"/><text x="31.7470%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`madvise (5 samples, 0.01%)</title><rect x="31.4970%" y="85" width="0.0139%" height="15" fill="rgb(244,185,38)" fg:x="11366" fg:w="5"/><text x="31.7470%" y="95.50"></text></g><g><title>dfbench`mi_page_free_list_extend (8 samples, 0.02%)</title><rect x="31.5136%" y="181" width="0.0222%" height="15" fill="rgb(236,202,9)" fg:x="11372" fg:w="8"/><text x="31.7636%" y="191.50"></text></g><g><title>dfbench`mi_find_page (32 samples, 0.09%)</title><rect x="31.4554%" y="197" width="0.0887%" height="15" fill="rgb(250,229,37)" fg:x="11351" fg:w="32"/><text x="31.7054%" y="207.50"></text></g><g><title>dfbench`_mi_malloc_generic (83 samples, 0.23%)</title><rect x="31.3418%" y="213" width="0.2300%" height="15" fill="rgb(206,174,23)" fg:x="11310" fg:w="83"/><text x="31.5918%" y="223.50"></text></g><g><title>dfbench`mi_page_free_list_extend (10 samples, 0.03%)</title><rect x="31.5441%" y="197" width="0.0277%" height="15" fill="rgb(211,33,43)" fg:x="11383" fg:w="10"/><text x="31.7941%" y="207.50"></text></g><g><title>dfbench`arrow_select::take::take_native (541 samples, 1.50%)</title><rect x="30.0754%" y="245" width="1.4992%" height="15" fill="rgb(245,58,50)" fg:x="10853" fg:w="541"/><text x="30.3254%" y="255.50"></text></g><g><title>dfbench`mi_heap_malloc_zero_aligned_at_generic (84 samples, 0.23%)</title><rect x="31.3418%" y="229" width="0.2328%" height="15" fill="rgb(244,68,36)" fg:x="11310" fg:w="84"/><text x="31.5918%" y="239.50"></text></g><g><title>dfbench`arrow_select::take::take_impl (604 samples, 1.67%)</title><rect x="29.9146%" y="277" width="1.6738%" height="15" fill="rgb(232,229,15)" fg:x="10795" fg:w="604"/><text x="30.1646%" y="287.50"></text></g><g><title>dfbench`arrow_select::take::take_primitive (560 samples, 1.55%)</title><rect x="30.0366%" y="261" width="1.5518%" height="15" fill="rgb(254,30,23)" fg:x="10839" fg:w="560"/><text x="30.2866%" y="271.50"></text></g><g><title>dfbench`arrow_select::take::take (611 samples, 1.69%)</title><rect x="29.9036%" y="293" width="1.6932%" height="15" fill="rgb(235,160,14)" fg:x="10791" fg:w="611"/><text x="30.1536%" y="303.50"></text></g><g><title>dfbench`arrow_select::take::take_arrays (617 samples, 1.71%)</title><rect x="29.8897%" y="309" width="1.7098%" height="15" fill="rgb(212,155,44)" fg:x="10786" fg:w="617"/><text x="30.1397%" y="319.50"></text></g><g><title>dfbench`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (653 samples, 1.81%)</title><rect x="29.8204%" y="325" width="1.8096%" height="15" fill="rgb(226,2,50)" fg:x="10761" fg:w="653"/><text x="30.0704%" y="335.50">d..</text></g><g><title>dfbench`std::sys::pal::unix::time::Timespec::now (7 samples, 0.02%)</title><rect x="31.6106%" y="309" width="0.0194%" height="15" fill="rgb(234,177,6)" fg:x="11407" fg:w="7"/><text x="31.8606%" y="319.50"></text></g><g><title>libsystem_c.dylib`clock_gettime (7 samples, 0.02%)</title><rect x="31.6106%" y="293" width="0.0194%" height="15" fill="rgb(217,24,9)" fg:x="11407" fg:w="7"/><text x="31.8606%" y="303.50"></text></g><g><title>dfbench`datafusion::datasource::physical_plan::file_scan_config::FileScanConfig::project (5 samples, 0.01%)</title><rect x="31.6300%" y="277" width="0.0139%" height="15" fill="rgb(220,13,46)" fg:x="11414" fg:w="5"/><text x="31.8800%" y="287.50"></text></g><g><title>dfbench`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (5 samples, 0.01%)</title><rect x="31.6300%" y="261" width="0.0139%" height="15" fill="rgb(239,221,27)" fg:x="11414" fg:w="5"/><text x="31.8800%" y="271.50"></text></g><g><title>dfbench`alloc::raw_vec::finish_grow (5 samples, 0.01%)</title><rect x="31.6300%" y="245" width="0.0139%" height="15" fill="rgb(222,198,25)" fg:x="11414" fg:w="5"/><text x="31.8800%" y="255.50"></text></g><g><title>dfbench`mi_heap_malloc_zero_aligned_at_generic (5 samples, 0.01%)</title><rect x="31.6300%" y="229" width="0.0139%" height="15" fill="rgb(211,99,13)" fg:x="11414" fg:w="5"/><text x="31.8800%" y="239.50"></text></g><g><title>dfbench`_mi_malloc_generic (5 samples, 0.01%)</title><rect x="31.6300%" y="213" width="0.0139%" height="15" fill="rgb(232,111,31)" fg:x="11414" fg:w="5"/><text x="31.8800%" y="223.50"></text></g><g><title>dfbench`_mi_free_delayed_block (5 samples, 0.01%)</title><rect x="31.6300%" y="197" width="0.0139%" height="15" fill="rgb(245,82,37)" fg:x="11414" fg:w="5"/><text x="31.8800%" y="207.50"></text></g><g><title>dfbench`_mi_page_free (5 samples, 0.01%)</title><rect x="31.6300%" y="181" width="0.0139%" height="15" fill="rgb(227,149,46)" fg:x="11414" fg:w="5"/><text x="31.8800%" y="191.50"></text></g><g><title>dfbench`mi_segment_page_clear (5 samples, 0.01%)</title><rect x="31.6300%" y="165" width="0.0139%" height="15" fill="rgb(218,36,50)" fg:x="11414" fg:w="5"/><text x="31.8800%" y="175.50"></text></g><g><title>dfbench`mi_segment_span_free_coalesce (5 samples, 0.01%)</title><rect x="31.6300%" y="149" width="0.0139%" height="15" fill="rgb(226,80,48)" fg:x="11414" fg:w="5"/><text x="31.8800%" y="159.50"></text></g><g><title>dfbench`mi_segment_span_free (5 samples, 0.01%)</title><rect x="31.6300%" y="133" width="0.0139%" height="15" fill="rgb(238,224,15)" fg:x="11414" fg:w="5"/><text x="31.8800%" y="143.50"></text></g><g><title>dfbench`mi_segment_try_purge (5 samples, 0.01%)</title><rect x="31.6300%" y="117" width="0.0139%" height="15" fill="rgb(241,136,10)" fg:x="11414" fg:w="5"/><text x="31.8800%" y="127.50"></text></g><g><title>dfbench`mi_segment_purge (5 samples, 0.01%)</title><rect x="31.6300%" y="101" width="0.0139%" height="15" fill="rgb(208,32,45)" fg:x="11414" fg:w="5"/><text x="31.8800%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`madvise (5 samples, 0.01%)</title><rect x="31.6300%" y="85" width="0.0139%" height="15" fill="rgb(207,135,9)" fg:x="11414" fg:w="5"/><text x="31.8800%" y="95.50"></text></g><g><title>dfbench`&lt;datafusion_physical_plan::projection::ProjectionExec as datafusion_physical_plan::execution_plan::ExecutionPlan&gt;::execute (7 samples, 0.02%)</title><rect x="31.6300%" y="309" width="0.0194%" height="15" fill="rgb(206,86,44)" fg:x="11414" fg:w="7"/><text x="31.8800%" y="319.50"></text></g><g><title>dfbench`&lt;datafusion::datasource::physical_plan::parquet::ParquetExec as datafusion_physical_plan::execution_plan::ExecutionPlan&gt;::execute (7 samples, 0.02%)</title><rect x="31.6300%" y="293" width="0.0194%" height="15" fill="rgb(245,177,15)" fg:x="11414" fg:w="7"/><text x="31.8800%" y="303.50"></text></g><g><title>dfbench`&lt;datafusion_physical_plan::aggregates::AggregateExec as datafusion_physical_plan::execution_plan::ExecutionPlan&gt;::execute (8 samples, 0.02%)</title><rect x="31.6300%" y="325" width="0.0222%" height="15" fill="rgb(206,64,50)" fg:x="11414" fg:w="8"/><text x="31.8800%" y="335.50"></text></g><g><title>dfbench`_mi_free_delayed_block (6 samples, 0.02%)</title><rect x="31.9099%" y="181" width="0.0166%" height="15" fill="rgb(234,36,40)" fg:x="11515" fg:w="6"/><text x="32.1599%" y="191.50"></text></g><g><title>dfbench`_mi_page_free (6 samples, 0.02%)</title><rect x="31.9099%" y="165" width="0.0166%" height="15" fill="rgb(213,64,8)" fg:x="11515" fg:w="6"/><text x="32.1599%" y="175.50"></text></g><g><title>dfbench`mi_segment_page_clear (6 samples, 0.02%)</title><rect x="31.9099%" y="149" width="0.0166%" height="15" fill="rgb(210,75,36)" fg:x="11515" fg:w="6"/><text x="32.1599%" y="159.50"></text></g><g><title>dfbench`mi_segment_span_free_coalesce (6 samples, 0.02%)</title><rect x="31.9099%" y="133" width="0.0166%" height="15" fill="rgb(229,88,21)" fg:x="11515" fg:w="6"/><text x="32.1599%" y="143.50"></text></g><g><title>dfbench`mi_segment_span_free (6 samples, 0.02%)</title><rect x="31.9099%" y="117" width="0.0166%" height="15" fill="rgb(252,204,47)" fg:x="11515" fg:w="6"/><text x="32.1599%" y="127.50"></text></g><g><title>dfbench`mi_segment_try_purge (6 samples, 0.02%)</title><rect x="31.9099%" y="101" width="0.0166%" height="15" fill="rgb(208,77,27)" fg:x="11515" fg:w="6"/><text x="32.1599%" y="111.50"></text></g><g><title>dfbench`mi_segment_purge (6 samples, 0.02%)</title><rect x="31.9099%" y="85" width="0.0166%" height="15" fill="rgb(221,76,26)" fg:x="11515" fg:w="6"/><text x="32.1599%" y="95.50"></text></g><g><title>libsystem_kernel.dylib`madvise (6 samples, 0.02%)</title><rect x="31.9099%" y="69" width="0.0166%" height="15" fill="rgb(225,139,18)" fg:x="11515" fg:w="6"/><text x="32.1599%" y="79.50"></text></g><g><title>dfbench`mi_heap_malloc_zero_aligned_at_generic (9 samples, 0.02%)</title><rect x="31.9071%" y="213" width="0.0249%" height="15" fill="rgb(230,137,11)" fg:x="11514" fg:w="9"/><text x="32.1571%" y="223.50"></text></g><g><title>dfbench`_mi_malloc_generic (8 samples, 0.02%)</title><rect x="31.9099%" y="197" width="0.0222%" height="15" fill="rgb(212,28,1)" fg:x="11515" fg:w="8"/><text x="32.1599%" y="207.50"></text></g><g><title>dfbench`arrow_cast::cast::cast_numeric_arrays (87 samples, 0.24%)</title><rect x="31.6965%" y="229" width="0.2411%" height="15" fill="rgb(248,164,17)" fg:x="11438" fg:w="87"/><text x="31.9465%" y="239.50"></text></g><g><title>dfbench`&lt;datafusion_physical_expr::expressions::cast::CastExpr as datafusion_physical_expr_common::physical_expr::PhysicalExpr&gt;::evaluate (121 samples, 0.34%)</title><rect x="31.6854%" y="277" width="0.3353%" height="15" fill="rgb(222,171,42)" fg:x="11434" fg:w="121"/><text x="31.9354%" y="287.50"></text></g><g><title>dfbench`datafusion_expr_common::columnar_value::ColumnarValue::cast_to (121 samples, 0.34%)</title><rect x="31.6854%" y="261" width="0.3353%" height="15" fill="rgb(243,84,45)" fg:x="11434" fg:w="121"/><text x="31.9354%" y="271.50"></text></g><g><title>dfbench`arrow_cast::cast::cast_with_options (120 samples, 0.33%)</title><rect x="31.6882%" y="245" width="0.3325%" height="15" fill="rgb(252,49,23)" fg:x="11435" fg:w="120"/><text x="31.9382%" y="255.50"></text></g><g><title>libsystem_platform.dylib`__bzero (30 samples, 0.08%)</title><rect x="31.9376%" y="229" width="0.0831%" height="15" fill="rgb(215,19,7)" fg:x="11525" fg:w="30"/><text x="32.1876%" y="239.50"></text></g><g><title>dfbench`&lt;datafusion_physical_expr::expressions::column::Column as datafusion_physical_expr_common::physical_expr::PhysicalExpr&gt;::evaluate (4 samples, 0.01%)</title><rect x="32.0207%" y="277" width="0.0111%" height="15" fill="rgb(238,81,41)" fg:x="11555" fg:w="4"/><text x="32.2707%" y="287.50"></text></g><g><title>dfbench`&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::next (128 samples, 0.35%)</title><rect x="31.6799%" y="293" width="0.3547%" height="15" fill="rgb(210,199,37)" fg:x="11432" fg:w="128"/><text x="31.9299%" y="303.50"></text></g><g><title>dfbench`mi_free (9 samples, 0.02%)</title><rect x="32.0512%" y="245" width="0.0249%" height="15" fill="rgb(244,192,49)" fg:x="11566" fg:w="9"/><text x="32.3012%" y="255.50"></text></g><g><title>dfbench`&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::next (11 samples, 0.03%)</title><rect x="32.2646%" y="229" width="0.0305%" height="15" fill="rgb(226,211,11)" fg:x="11643" fg:w="11"/><text x="32.5146%" y="239.50"></text></g><g><title>dfbench`mi_heap_malloc_zero_aligned_at_generic (4 samples, 0.01%)</title><rect x="32.9408%" y="165" width="0.0111%" height="15" fill="rgb(236,162,54)" fg:x="11887" fg:w="4"/><text x="33.1908%" y="175.50"></text></g><g><title>dfbench`_mi_malloc_generic (4 samples, 0.01%)</title><rect x="32.9408%" y="149" width="0.0111%" height="15" fill="rgb(220,229,9)" fg:x="11887" fg:w="4"/><text x="33.1908%" y="159.50"></text></g><g><title>dfbench`mi_page_free_list_extend (4 samples, 0.01%)</title><rect x="32.9408%" y="133" width="0.0111%" height="15" fill="rgb(250,87,22)" fg:x="11887" fg:w="4"/><text x="33.1908%" y="143.50"></text></g><g><title>dfbench`mi_malloc_aligned (13 samples, 0.04%)</title><rect x="32.9518%" y="165" width="0.0360%" height="15" fill="rgb(239,43,17)" fg:x="11891" fg:w="13"/><text x="33.2018%" y="175.50"></text></g><g><title>dfbench`&lt;parquet::thrift::TCompactSliceInputProtocol as thrift::protocol::TInputProtocol&gt;::read_bytes (28 samples, 0.08%)</title><rect x="32.9158%" y="181" width="0.0776%" height="15" fill="rgb(231,177,25)" fg:x="11878" fg:w="28"/><text x="33.1658%" y="191.50"></text></g><g><title>dfbench`&lt;parquet::thrift::TCompactSliceInputProtocol as thrift::protocol::TInputProtocol&gt;::read_field_begin (17 samples, 0.05%)</title><rect x="32.9934%" y="181" width="0.0471%" height="15" fill="rgb(219,179,1)" fg:x="11906" fg:w="17"/><text x="33.2434%" y="191.50"></text></g><g><title>dfbench`thrift::protocol::compact::u8_to_type (10 samples, 0.03%)</title><rect x="33.0488%" y="181" width="0.0277%" height="15" fill="rgb(238,219,53)" fg:x="11926" fg:w="10"/><text x="33.2988%" y="191.50"></text></g><g><title>dfbench`&lt;parquet::format::Statistics as parquet::thrift::TSerializable&gt;::read_from_in_protocol (102 samples, 0.28%)</title><rect x="32.8299%" y="197" width="0.2827%" height="15" fill="rgb(232,167,36)" fg:x="11847" fg:w="102"/><text x="33.0799%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (13 samples, 0.04%)</title><rect x="33.0765%" y="181" width="0.0360%" height="15" fill="rgb(244,19,51)" fg:x="11936" fg:w="13"/><text x="33.3265%" y="191.50"></text></g><g><title>dfbench`mi_heap_malloc_zero_aligned_at_generic (4 samples, 0.01%)</title><rect x="33.1292%" y="181" width="0.0111%" height="15" fill="rgb(224,6,22)" fg:x="11955" fg:w="4"/><text x="33.3792%" y="191.50"></text></g><g><title>dfbench`_mi_malloc_generic (4 samples, 0.01%)</title><rect x="33.1292%" y="165" width="0.0111%" height="15" fill="rgb(224,145,5)" fg:x="11955" fg:w="4"/><text x="33.3792%" y="175.50"></text></g><g><title>dfbench`&lt;parquet::thrift::TCompactSliceInputProtocol as thrift::protocol::TInputProtocol&gt;::read_bytes (14 samples, 0.04%)</title><rect x="33.1126%" y="197" width="0.0388%" height="15" fill="rgb(234,130,49)" fg:x="11949" fg:w="14"/><text x="33.3626%" y="207.50"></text></g><g><title>dfbench`&lt;parquet::thrift::TCompactSliceInputProtocol as thrift::protocol::TInputProtocol&gt;::read_field_begin (81 samples, 0.22%)</title><rect x="33.1514%" y="197" width="0.2245%" height="15" fill="rgb(254,6,2)" fg:x="11963" fg:w="81"/><text x="33.4014%" y="207.50"></text></g><g><title>dfbench`&lt;parquet::thrift::TCompactSliceInputProtocol as thrift::protocol::TInputProtocol&gt;::read_list_begin (4 samples, 0.01%)</title><rect x="33.3758%" y="197" width="0.0111%" height="15" fill="rgb(208,96,46)" fg:x="12044" fg:w="4"/><text x="33.6258%" y="207.50"></text></g><g><title>dfbench`core::str::converts::from_utf8 (10 samples, 0.03%)</title><rect x="33.3952%" y="197" width="0.0277%" height="15" fill="rgb(239,3,39)" fg:x="12051" fg:w="10"/><text x="33.6452%" y="207.50"></text></g><g><title>dfbench`mi_heap_malloc_zero_aligned_at_generic (9 samples, 0.02%)</title><rect x="33.4229%" y="197" width="0.0249%" height="15" fill="rgb(233,210,1)" fg:x="12061" fg:w="9"/><text x="33.6729%" y="207.50"></text></g><g><title>dfbench`_mi_malloc_generic (9 samples, 0.02%)</title><rect x="33.4229%" y="181" width="0.0249%" height="15" fill="rgb(244,137,37)" fg:x="12061" fg:w="9"/><text x="33.6729%" y="191.50"></text></g><g><title>dfbench`mi_page_free_list_extend (8 samples, 0.02%)</title><rect x="33.4257%" y="165" width="0.0222%" height="15" fill="rgb(240,136,2)" fg:x="12062" fg:w="8"/><text x="33.6757%" y="175.50"></text></g><g><title>dfbench`mi_malloc_aligned (7 samples, 0.02%)</title><rect x="33.4479%" y="197" width="0.0194%" height="15" fill="rgb(239,18,37)" fg:x="12070" fg:w="7"/><text x="33.6979%" y="207.50"></text></g><g><title>dfbench`thrift::protocol::compact::u8_to_type (42 samples, 0.12%)</title><rect x="33.4673%" y="197" width="0.1164%" height="15" fill="rgb(218,185,22)" fg:x="12077" fg:w="42"/><text x="33.7173%" y="207.50"></text></g><g><title>dfbench`thrift::protocol::verify_required_field_exists (7 samples, 0.02%)</title><rect x="33.5837%" y="197" width="0.0194%" height="15" fill="rgb(225,218,4)" fg:x="12119" fg:w="7"/><text x="33.8337%" y="207.50"></text></g><g><title>dfbench`&lt;parquet::format::ColumnChunk as parquet::thrift::TSerializable&gt;::read_from_in_protocol (480 samples, 1.33%)</title><rect x="32.3200%" y="213" width="1.3302%" height="15" fill="rgb(230,182,32)" fg:x="11663" fg:w="480"/><text x="32.5700%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (14 samples, 0.04%)</title><rect x="33.6114%" y="197" width="0.0388%" height="15" fill="rgb(242,56,43)" fg:x="12129" fg:w="14"/><text x="33.8614%" y="207.50"></text></g><g><title>dfbench`&lt;parquet::thrift::TCompactSliceInputProtocol as thrift::protocol::TInputProtocol&gt;::read_field_begin (22 samples, 0.06%)</title><rect x="33.6529%" y="213" width="0.0610%" height="15" fill="rgb(233,99,24)" fg:x="12144" fg:w="22"/><text x="33.9029%" y="223.50"></text></g><g><title>dfbench`&lt;parquet::thrift::TCompactSliceInputProtocol as thrift::protocol::TInputProtocol&gt;::read_list_begin (4 samples, 0.01%)</title><rect x="33.7139%" y="213" width="0.0111%" height="15" fill="rgb(234,209,42)" fg:x="12166" fg:w="4"/><text x="33.9639%" y="223.50"></text></g><g><title>dfbench`_mi_free_delayed_block (11 samples, 0.03%)</title><rect x="33.7388%" y="181" width="0.0305%" height="15" fill="rgb(227,7,12)" fg:x="12175" fg:w="11"/><text x="33.9888%" y="191.50"></text></g><g><title>dfbench`_mi_page_free (11 samples, 0.03%)</title><rect x="33.7388%" y="165" width="0.0305%" height="15" fill="rgb(245,203,43)" fg:x="12175" fg:w="11"/><text x="33.9888%" y="175.50"></text></g><g><title>dfbench`mi_segment_page_clear (11 samples, 0.03%)</title><rect x="33.7388%" y="149" width="0.0305%" height="15" fill="rgb(238,205,33)" fg:x="12175" fg:w="11"/><text x="33.9888%" y="159.50"></text></g><g><title>dfbench`mi_segment_span_free_coalesce (11 samples, 0.03%)</title><rect x="33.7388%" y="133" width="0.0305%" height="15" fill="rgb(231,56,7)" fg:x="12175" fg:w="11"/><text x="33.9888%" y="143.50"></text></g><g><title>dfbench`mi_segment_span_free (11 samples, 0.03%)</title><rect x="33.7388%" y="117" width="0.0305%" height="15" fill="rgb(244,186,29)" fg:x="12175" fg:w="11"/><text x="33.9888%" y="127.50"></text></g><g><title>dfbench`mi_segment_try_purge (11 samples, 0.03%)</title><rect x="33.7388%" y="101" width="0.0305%" height="15" fill="rgb(234,111,31)" fg:x="12175" fg:w="11"/><text x="33.9888%" y="111.50"></text></g><g><title>dfbench`mi_segment_purge (11 samples, 0.03%)</title><rect x="33.7388%" y="85" width="0.0305%" height="15" fill="rgb(241,149,10)" fg:x="12175" fg:w="11"/><text x="33.9888%" y="95.50"></text></g><g><title>libsystem_kernel.dylib`madvise (11 samples, 0.03%)</title><rect x="33.7388%" y="69" width="0.0305%" height="15" fill="rgb(249,206,44)" fg:x="12175" fg:w="11"/><text x="33.9888%" y="79.50"></text></g><g><title>dfbench`mi_page_free_list_extend (8 samples, 0.02%)</title><rect x="33.7721%" y="165" width="0.0222%" height="15" fill="rgb(251,153,30)" fg:x="12187" fg:w="8"/><text x="34.0221%" y="175.50"></text></g><g><title>dfbench`mi_find_page (10 samples, 0.03%)</title><rect x="33.7693%" y="181" width="0.0277%" height="15" fill="rgb(239,152,38)" fg:x="12186" fg:w="10"/><text x="34.0193%" y="191.50"></text></g><g><title>dfbench`mi_heap_malloc_zero_aligned_at_generic (26 samples, 0.07%)</title><rect x="33.7361%" y="213" width="0.0721%" height="15" fill="rgb(249,139,47)" fg:x="12174" fg:w="26"/><text x="33.9861%" y="223.50"></text></g><g><title>dfbench`_mi_malloc_generic (25 samples, 0.07%)</title><rect x="33.7388%" y="197" width="0.0693%" height="15" fill="rgb(244,64,35)" fg:x="12175" fg:w="25"/><text x="33.9888%" y="207.50"></text></g><g><title>dfbench`mi_page_free_list_extend (4 samples, 0.01%)</title><rect x="33.7970%" y="181" width="0.0111%" height="15" fill="rgb(216,46,15)" fg:x="12196" fg:w="4"/><text x="34.0470%" y="191.50"></text></g><g><title>dfbench`thrift::protocol::verify_required_field_exists (4 samples, 0.01%)</title><rect x="33.8081%" y="213" width="0.0111%" height="15" fill="rgb(250,74,19)" fg:x="12200" fg:w="4"/><text x="34.0581%" y="223.50"></text></g><g><title>dfbench`&lt;parquet::format::FileMetaData as parquet::thrift::TSerializable&gt;::read_from_in_protocol (551 samples, 1.53%)</title><rect x="32.3006%" y="229" width="1.5269%" height="15" fill="rgb(249,42,33)" fg:x="11656" fg:w="551"/><text x="32.5506%" y="239.50"></text></g><g><title>dfbench`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (20 samples, 0.06%)</title><rect x="33.8303%" y="229" width="0.0554%" height="15" fill="rgb(242,149,17)" fg:x="12208" fg:w="20"/><text x="34.0803%" y="239.50"></text></g><g><title>dfbench`alloc::raw_vec::finish_grow (20 samples, 0.06%)</title><rect x="33.8303%" y="213" width="0.0554%" height="15" fill="rgb(244,29,21)" fg:x="12208" fg:w="20"/><text x="34.0803%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (19 samples, 0.05%)</title><rect x="33.8331%" y="197" width="0.0527%" height="15" fill="rgb(220,130,37)" fg:x="12209" fg:w="19"/><text x="34.0831%" y="207.50"></text></g><g><title>dfbench`mi_free (7 samples, 0.02%)</title><rect x="33.8857%" y="229" width="0.0194%" height="15" fill="rgb(211,67,2)" fg:x="12228" fg:w="7"/><text x="34.1357%" y="239.50"></text></g><g><title>dfbench`mi_malloc_aligned (6 samples, 0.02%)</title><rect x="33.9079%" y="229" width="0.0166%" height="15" fill="rgb(235,68,52)" fg:x="12236" fg:w="6"/><text x="34.1579%" y="239.50"></text></g><g><title>dfbench`mi_free (4 samples, 0.01%)</title><rect x="33.9744%" y="213" width="0.0111%" height="15" fill="rgb(246,142,3)" fg:x="12260" fg:w="4"/><text x="34.2244%" y="223.50"></text></g><g><title>dfbench`parquet::file::statistics::from_thrift (27 samples, 0.07%)</title><rect x="33.9245%" y="229" width="0.0748%" height="15" fill="rgb(241,25,7)" fg:x="12242" fg:w="27"/><text x="34.1745%" y="239.50"></text></g><g><title>dfbench`parquet::file::statistics::from_thrift::_{{closure}} (5 samples, 0.01%)</title><rect x="33.9855%" y="213" width="0.0139%" height="15" fill="rgb(242,119,39)" fg:x="12264" fg:w="5"/><text x="34.2355%" y="223.50"></text></g><g><title>dfbench`parquet::file::metadata::reader::ParquetMetaDataReader::decode_metadata (743 samples, 2.06%)</title><rect x="32.0762%" y="245" width="2.0590%" height="15" fill="rgb(241,98,45)" fg:x="11575" fg:w="743"/><text x="32.3262%" y="255.50">d..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (49 samples, 0.14%)</title><rect x="33.9993%" y="229" width="0.1358%" height="15" fill="rgb(254,28,30)" fg:x="12269" fg:w="49"/><text x="34.2493%" y="239.50"></text></g><g><title>dfbench`&lt;parquet::arrow::async_reader::store::ParquetObjectReader as parquet::arrow::async_reader::AsyncFileReader&gt;::get_metadata::_{{closure}} (816 samples, 2.26%)</title><rect x="32.0374%" y="261" width="2.2613%" height="15" fill="rgb(241,142,54)" fg:x="11561" fg:w="816"/><text x="32.2874%" y="271.50">d..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (57 samples, 0.16%)</title><rect x="34.1407%" y="245" width="0.1580%" height="15" fill="rgb(222,85,15)" fg:x="12320" fg:w="57"/><text x="34.3907%" y="255.50"></text></g><g><title>dfbench`&lt;datafusion::datasource::physical_plan::parquet::opener::ParquetOpener as datafusion::datasource::physical_plan::file_stream::FileOpener&gt;::open::_{{closure}} (819 samples, 2.27%)</title><rect x="32.0374%" y="277" width="2.2696%" height="15" fill="rgb(210,85,47)" fg:x="11561" fg:w="819"/><text x="32.2874%" y="287.50">d..</text></g><g><title>dfbench`&lt;arrow_array::array::primitive_array::PrimitiveArray&lt;T&gt; as arrow_array::array::Array&gt;::to_data (5 samples, 0.01%)</title><rect x="34.3485%" y="213" width="0.0139%" height="15" fill="rgb(224,206,25)" fg:x="12395" fg:w="5"/><text x="34.5985%" y="223.50"></text></g><g><title>dfbench`arrow_array::array::primitive_array::_&lt;impl core::convert::From&lt;arrow_array::array::primitive_array::PrimitiveArray&lt;T&gt;&gt; for arrow_data::data::ArrayData&gt;::from (4 samples, 0.01%)</title><rect x="34.3513%" y="197" width="0.0111%" height="15" fill="rgb(243,201,19)" fg:x="12396" fg:w="4"/><text x="34.6013%" y="207.50"></text></g><g><title>dfbench`&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::next (20 samples, 0.06%)</title><rect x="34.3152%" y="245" width="0.0554%" height="15" fill="rgb(236,59,4)" fg:x="12383" fg:w="20"/><text x="34.5652%" y="255.50"></text></g><g><title>dfbench`arrow_cast::cast::cast_with_options (8 samples, 0.02%)</title><rect x="34.3485%" y="229" width="0.0222%" height="15" fill="rgb(254,179,45)" fg:x="12395" fg:w="8"/><text x="34.5985%" y="239.50"></text></g><g><title>dfbench`alloc::sync::Arc&lt;T,A&gt;::drop_slow (11 samples, 0.03%)</title><rect x="34.3707%" y="245" width="0.0305%" height="15" fill="rgb(226,14,10)" fg:x="12403" fg:w="11"/><text x="34.6207%" y="255.50"></text></g><g><title>dfbench`core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(alloc::string::String,alloc::string::String)&gt;&gt; (10 samples, 0.03%)</title><rect x="34.3734%" y="229" width="0.0277%" height="15" fill="rgb(244,27,41)" fg:x="12404" fg:w="10"/><text x="34.6234%" y="239.50"></text></g><g><title>dfbench`&lt;datafusion::datasource::schema_adapter::SchemaMapping as datafusion::datasource::schema_adapter::SchemaMapper&gt;::map_batch (35 samples, 0.10%)</title><rect x="34.3125%" y="261" width="0.0970%" height="15" fill="rgb(235,35,32)" fg:x="12382" fg:w="35"/><text x="34.5625%" y="271.50"></text></g><g><title>dfbench`&lt;arrow_array::record_batch::RecordBatch as core::convert::From&lt;arrow_array::array::struct_array::StructArray&gt;&gt;::from (4 samples, 0.01%)</title><rect x="34.4150%" y="245" width="0.0111%" height="15" fill="rgb(218,68,31)" fg:x="12419" fg:w="4"/><text x="34.6650%" y="255.50"></text></g><g><title>dfbench`&lt;arrow_array::array::primitive_array::PrimitiveArray&lt;T&gt; as arrow_array::array::Array&gt;::to_data (9 samples, 0.02%)</title><rect x="34.4372%" y="229" width="0.0249%" height="15" fill="rgb(207,120,37)" fg:x="12427" fg:w="9"/><text x="34.6872%" y="239.50"></text></g><g><title>dfbench`arrow_array::array::primitive_array::_&lt;impl core::convert::From&lt;arrow_array::array::primitive_array::PrimitiveArray&lt;T&gt;&gt; for arrow_data::data::ArrayData&gt;::from (5 samples, 0.01%)</title><rect x="34.4483%" y="213" width="0.0139%" height="15" fill="rgb(227,98,0)" fg:x="12431" fg:w="5"/><text x="34.6983%" y="223.50"></text></g><g><title>dfbench`&lt;arrow_array::array::struct_array::StructArray as core::convert::From&lt;arrow_data::data::ArrayData&gt;&gt;::from (8 samples, 0.02%)</title><rect x="34.4621%" y="229" width="0.0222%" height="15" fill="rgb(207,7,3)" fg:x="12436" fg:w="8"/><text x="34.7121%" y="239.50"></text></g><g><title>dfbench`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (4 samples, 0.01%)</title><rect x="34.5065%" y="213" width="0.0111%" height="15" fill="rgb(206,98,19)" fg:x="12452" fg:w="4"/><text x="34.7565%" y="223.50"></text></g><g><title>dfbench`&lt;arrow_array::array::primitive_array::PrimitiveArray&lt;T&gt; as arrow_array::array::Array&gt;::to_data (10 samples, 0.03%)</title><rect x="34.5259%" y="197" width="0.0277%" height="15" fill="rgb(217,5,26)" fg:x="12459" fg:w="10"/><text x="34.7759%" y="207.50"></text></g><g><title>dfbench`arrow_array::array::primitive_array::_&lt;impl core::convert::From&lt;arrow_array::array::primitive_array::PrimitiveArray&lt;T&gt;&gt; for arrow_data::data::ArrayData&gt;::from (10 samples, 0.03%)</title><rect x="34.5259%" y="181" width="0.0277%" height="15" fill="rgb(235,190,38)" fg:x="12459" fg:w="10"/><text x="34.7759%" y="191.50"></text></g><g><title>dfbench`arrow_cast::cast::cast_with_options (13 samples, 0.04%)</title><rect x="34.5259%" y="213" width="0.0360%" height="15" fill="rgb(247,86,24)" fg:x="12459" fg:w="13"/><text x="34.7759%" y="223.50"></text></g><g><title>dfbench`arrow_data::data::ArrayDataBuilder::build_impl (4 samples, 0.01%)</title><rect x="34.5619%" y="213" width="0.0111%" height="15" fill="rgb(205,101,16)" fg:x="12472" fg:w="4"/><text x="34.8119%" y="223.50"></text></g><g><title>dfbench`&lt;parquet::arrow::array_reader::primitive_array::PrimitiveArrayReader&lt;T&gt; as parquet::arrow::array_reader::ArrayReader&gt;::consume_batch (36 samples, 0.10%)</title><rect x="34.4843%" y="229" width="0.0998%" height="15" fill="rgb(246,168,33)" fg:x="12444" fg:w="36"/><text x="34.7343%" y="239.50"></text></g><g><title>dfbench`core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::sync::Arc&lt;dyn arrow_array::array::Array&gt;&gt;&gt; (8 samples, 0.02%)</title><rect x="34.5896%" y="229" width="0.0222%" height="15" fill="rgb(231,114,1)" fg:x="12482" fg:w="8"/><text x="34.8396%" y="239.50"></text></g><g><title>dfbench`alloc::sync::Arc&lt;T,A&gt;::drop_slow (8 samples, 0.02%)</title><rect x="34.5896%" y="213" width="0.0222%" height="15" fill="rgb(207,184,53)" fg:x="12482" fg:w="8"/><text x="34.8396%" y="223.50"></text></g><g><title>dfbench`core::ptr::drop_in_place&lt;arrow_schema::datatype::DataType&gt; (5 samples, 0.01%)</title><rect x="34.5979%" y="197" width="0.0139%" height="15" fill="rgb(224,95,51)" fg:x="12485" fg:w="5"/><text x="34.8479%" y="207.50"></text></g><g><title>dfbench`&lt;parquet::arrow::array_reader::struct_array::StructArrayReader as parquet::arrow::array_reader::ArrayReader&gt;::consume_batch (72 samples, 0.20%)</title><rect x="34.4289%" y="245" width="0.1995%" height="15" fill="rgb(212,188,45)" fg:x="12424" fg:w="72"/><text x="34.6789%" y="255.50"></text></g><g><title>dfbench`mi_segment_try_purge (62 samples, 0.17%)</title><rect x="34.6616%" y="69" width="0.1718%" height="15" fill="rgb(223,154,38)" fg:x="12508" fg:w="62"/><text x="34.9116%" y="79.50"></text></g><g><title>dfbench`mi_segment_purge (62 samples, 0.17%)</title><rect x="34.6616%" y="53" width="0.1718%" height="15" fill="rgb(251,22,52)" fg:x="12508" fg:w="62"/><text x="34.9116%" y="63.50"></text></g><g><title>libsystem_kernel.dylib`madvise (62 samples, 0.17%)</title><rect x="34.6616%" y="37" width="0.1718%" height="15" fill="rgb(229,209,22)" fg:x="12508" fg:w="62"/><text x="34.9116%" y="47.50"></text></g><g><title>dfbench`_mi_page_free (64 samples, 0.18%)</title><rect x="34.6589%" y="133" width="0.1774%" height="15" fill="rgb(234,138,34)" fg:x="12507" fg:w="64"/><text x="34.9089%" y="143.50"></text></g><g><title>dfbench`mi_segment_page_clear (64 samples, 0.18%)</title><rect x="34.6589%" y="117" width="0.1774%" height="15" fill="rgb(212,95,11)" fg:x="12507" fg:w="64"/><text x="34.9089%" y="127.50"></text></g><g><title>dfbench`mi_segment_span_free_coalesce (64 samples, 0.18%)</title><rect x="34.6589%" y="101" width="0.1774%" height="15" fill="rgb(240,179,47)" fg:x="12507" fg:w="64"/><text x="34.9089%" y="111.50"></text></g><g><title>dfbench`mi_segment_span_free (64 samples, 0.18%)</title><rect x="34.6589%" y="85" width="0.1774%" height="15" fill="rgb(240,163,11)" fg:x="12507" fg:w="64"/><text x="34.9089%" y="95.50"></text></g><g><title>dfbench`mi_segment_free (27 samples, 0.07%)</title><rect x="34.8362%" y="133" width="0.0748%" height="15" fill="rgb(236,37,12)" fg:x="12571" fg:w="27"/><text x="35.0862%" y="143.50"></text></g><g><title>dfbench`mi_arenas_try_purge (27 samples, 0.07%)</title><rect x="34.8362%" y="117" width="0.0748%" height="15" fill="rgb(232,164,16)" fg:x="12571" fg:w="27"/><text x="35.0862%" y="127.50"></text></g><g><title>dfbench`mi_arena_purge (27 samples, 0.07%)</title><rect x="34.8362%" y="101" width="0.0748%" height="15" fill="rgb(244,205,15)" fg:x="12571" fg:w="27"/><text x="35.0862%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`madvise (27 samples, 0.07%)</title><rect x="34.8362%" y="85" width="0.0748%" height="15" fill="rgb(223,117,47)" fg:x="12571" fg:w="27"/><text x="35.0862%" y="95.50"></text></g><g><title>dfbench`_mi_free_delayed_block (100 samples, 0.28%)</title><rect x="34.6367%" y="149" width="0.2771%" height="15" fill="rgb(244,107,35)" fg:x="12499" fg:w="100"/><text x="34.8867%" y="159.50"></text></g><g><title>dfbench`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (103 samples, 0.29%)</title><rect x="34.6339%" y="213" width="0.2854%" height="15" fill="rgb(205,140,8)" fg:x="12498" fg:w="103"/><text x="34.8839%" y="223.50"></text></g><g><title>dfbench`alloc::raw_vec::finish_grow (102 samples, 0.28%)</title><rect x="34.6367%" y="197" width="0.2827%" height="15" fill="rgb(228,84,46)" fg:x="12499" fg:w="102"/><text x="34.8867%" y="207.50"></text></g><g><title>dfbench`mi_heap_malloc_zero_aligned_at_generic (102 samples, 0.28%)</title><rect x="34.6367%" y="181" width="0.2827%" height="15" fill="rgb(254,188,9)" fg:x="12499" fg:w="102"/><text x="34.8867%" y="191.50"></text></g><g><title>dfbench`_mi_malloc_generic (102 samples, 0.28%)</title><rect x="34.6367%" y="165" width="0.2827%" height="15" fill="rgb(206,112,54)" fg:x="12499" fg:w="102"/><text x="34.8867%" y="175.50"></text></g><g><title>dfbench`&lt;parquet::column::reader::decoder::ColumnValueDecoderImpl&lt;T&gt; as parquet::column::reader::decoder::ColumnValueDecoder&gt;::set_data (9 samples, 0.02%)</title><rect x="34.9194%" y="197" width="0.0249%" height="15" fill="rgb(216,84,49)" fg:x="12601" fg:w="9"/><text x="35.1694%" y="207.50"></text></g><g><title>dfbench`&lt;parquet::encodings::decoding::DictDecoder&lt;T&gt; as parquet::encodings::decoding::Decoder&lt;T&gt;&gt;::set_data (9 samples, 0.02%)</title><rect x="34.9194%" y="181" width="0.0249%" height="15" fill="rgb(214,194,35)" fg:x="12601" fg:w="9"/><text x="35.1694%" y="191.50"></text></g><g><title>dfbench`bytes::bytes::shared_drop (9 samples, 0.02%)</title><rect x="34.9194%" y="165" width="0.0249%" height="15" fill="rgb(249,28,3)" fg:x="12601" fg:w="9"/><text x="35.1694%" y="175.50"></text></g><g><title>dfbench`_mi_page_free (9 samples, 0.02%)</title><rect x="34.9194%" y="149" width="0.0249%" height="15" fill="rgb(222,56,52)" fg:x="12601" fg:w="9"/><text x="35.1694%" y="159.50"></text></g><g><title>dfbench`mi_segment_page_clear (9 samples, 0.02%)</title><rect x="34.9194%" y="133" width="0.0249%" height="15" fill="rgb(245,217,50)" fg:x="12601" fg:w="9"/><text x="35.1694%" y="143.50"></text></g><g><title>dfbench`mi_segment_span_free_coalesce (9 samples, 0.02%)</title><rect x="34.9194%" y="117" width="0.0249%" height="15" fill="rgb(213,201,24)" fg:x="12601" fg:w="9"/><text x="35.1694%" y="127.50"></text></g><g><title>dfbench`mi_segment_span_free (9 samples, 0.02%)</title><rect x="34.9194%" y="101" width="0.0249%" height="15" fill="rgb(248,116,28)" fg:x="12601" fg:w="9"/><text x="35.1694%" y="111.50"></text></g><g><title>dfbench`mi_segment_try_purge (9 samples, 0.02%)</title><rect x="34.9194%" y="85" width="0.0249%" height="15" fill="rgb(219,72,43)" fg:x="12601" fg:w="9"/><text x="35.1694%" y="95.50"></text></g><g><title>dfbench`mi_segment_purge (9 samples, 0.02%)</title><rect x="34.9194%" y="69" width="0.0249%" height="15" fill="rgb(209,138,14)" fg:x="12601" fg:w="9"/><text x="35.1694%" y="79.50"></text></g><g><title>libsystem_kernel.dylib`madvise (9 samples, 0.02%)</title><rect x="34.9194%" y="53" width="0.0249%" height="15" fill="rgb(222,18,33)" fg:x="12601" fg:w="9"/><text x="35.1694%" y="63.50"></text></g><g><title>dfbench`&lt;parquet::column::reader::decoder::ColumnValueDecoderImpl&lt;T&gt; as parquet::column::reader::decoder::ColumnValueDecoder&gt;::set_dict (19 samples, 0.05%)</title><rect x="34.9443%" y="197" width="0.0527%" height="15" fill="rgb(213,199,7)" fg:x="12610" fg:w="19"/><text x="35.1943%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (14 samples, 0.04%)</title><rect x="34.9582%" y="181" width="0.0388%" height="15" fill="rgb(250,110,10)" fg:x="12615" fg:w="14"/><text x="35.2082%" y="191.50"></text></g><g><title>dfbench`mi_segment_purge (5 samples, 0.01%)</title><rect x="35.0136%" y="101" width="0.0139%" height="15" fill="rgb(248,123,6)" fg:x="12635" fg:w="5"/><text x="35.2636%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`madvise (5 samples, 0.01%)</title><rect x="35.0136%" y="85" width="0.0139%" height="15" fill="rgb(206,91,31)" fg:x="12635" fg:w="5"/><text x="35.2636%" y="95.50"></text></g><g><title>dfbench`mi_heap_malloc_zero_aligned_at_generic (11 samples, 0.03%)</title><rect x="34.9997%" y="181" width="0.0305%" height="15" fill="rgb(211,154,13)" fg:x="12630" fg:w="11"/><text x="35.2497%" y="191.50"></text></g><g><title>dfbench`_mi_malloc_generic (11 samples, 0.03%)</title><rect x="34.9997%" y="165" width="0.0305%" height="15" fill="rgb(225,148,7)" fg:x="12630" fg:w="11"/><text x="35.2497%" y="175.50"></text></g><g><title>dfbench`mi_page_fresh_alloc (8 samples, 0.02%)</title><rect x="35.0080%" y="149" width="0.0222%" height="15" fill="rgb(220,160,43)" fg:x="12633" fg:w="8"/><text x="35.2580%" y="159.50"></text></g><g><title>dfbench`mi_segments_page_alloc (8 samples, 0.02%)</title><rect x="35.0080%" y="133" width="0.0222%" height="15" fill="rgb(213,52,39)" fg:x="12633" fg:w="8"/><text x="35.2580%" y="143.50"></text></g><g><title>dfbench`mi_segment_try_purge (6 samples, 0.02%)</title><rect x="35.0136%" y="117" width="0.0166%" height="15" fill="rgb(243,137,7)" fg:x="12635" fg:w="6"/><text x="35.2636%" y="127.50"></text></g><g><title>dfbench`&lt;parquet::compression::snappy_codec::SnappyCodec as parquet::compression::Codec&gt;::decompress (76 samples, 0.21%)</title><rect x="35.0357%" y="165" width="0.2106%" height="15" fill="rgb(230,79,13)" fg:x="12643" fg:w="76"/><text x="35.2857%" y="175.50"></text></g><g><title>dfbench`mi_heap_malloc_zero_aligned_at_generic (7 samples, 0.02%)</title><rect x="35.2464%" y="165" width="0.0194%" height="15" fill="rgb(247,105,23)" fg:x="12719" fg:w="7"/><text x="35.4964%" y="175.50"></text></g><g><title>dfbench`_mi_malloc_generic (7 samples, 0.02%)</title><rect x="35.2464%" y="149" width="0.0194%" height="15" fill="rgb(223,179,41)" fg:x="12719" fg:w="7"/><text x="35.4964%" y="159.50"></text></g><g><title>dfbench`mi_page_fresh_alloc (5 samples, 0.01%)</title><rect x="35.2519%" y="133" width="0.0139%" height="15" fill="rgb(218,9,34)" fg:x="12721" fg:w="5"/><text x="35.5019%" y="143.50"></text></g><g><title>dfbench`mi_segments_page_alloc (5 samples, 0.01%)</title><rect x="35.2519%" y="117" width="0.0139%" height="15" fill="rgb(222,106,8)" fg:x="12721" fg:w="5"/><text x="35.5019%" y="127.50"></text></g><g><title>dfbench`mi_segment_try_purge (5 samples, 0.01%)</title><rect x="35.2519%" y="101" width="0.0139%" height="15" fill="rgb(211,220,0)" fg:x="12721" fg:w="5"/><text x="35.5019%" y="111.50"></text></g><g><title>dfbench`mi_segment_purge (5 samples, 0.01%)</title><rect x="35.2519%" y="85" width="0.0139%" height="15" fill="rgb(229,52,16)" fg:x="12721" fg:w="5"/><text x="35.5019%" y="95.50"></text></g><g><title>libsystem_kernel.dylib`madvise (5 samples, 0.01%)</title><rect x="35.2519%" y="69" width="0.0139%" height="15" fill="rgb(212,155,18)" fg:x="12721" fg:w="5"/><text x="35.5019%" y="79.50"></text></g><g><title>libsystem_platform.dylib`__bzero (54 samples, 0.15%)</title><rect x="35.2685%" y="165" width="0.1496%" height="15" fill="rgb(242,21,14)" fg:x="12727" fg:w="54"/><text x="35.5185%" y="175.50"></text></g><g><title>dfbench`parquet::file::serialized_reader::decode_page (199 samples, 0.55%)</title><rect x="35.0302%" y="181" width="0.5515%" height="15" fill="rgb(222,19,48)" fg:x="12641" fg:w="199"/><text x="35.2802%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (59 samples, 0.16%)</title><rect x="35.4182%" y="165" width="0.1635%" height="15" fill="rgb(232,45,27)" fg:x="12781" fg:w="59"/><text x="35.6682%" y="175.50"></text></g><g><title>dfbench`&lt;parquet::file::serialized_reader::SerializedPageReader&lt;R&gt; as parquet::column::page::PageReader&gt;::get_next_page (212 samples, 0.59%)</title><rect x="34.9970%" y="197" width="0.5875%" height="15" fill="rgb(249,103,42)" fg:x="12629" fg:w="212"/><text x="35.2470%" y="207.50"></text></g><g><title>libsystem_platform.dylib`__bzero (94 samples, 0.26%)</title><rect x="35.5900%" y="197" width="0.2605%" height="15" fill="rgb(246,81,33)" fg:x="12843" fg:w="94"/><text x="35.8400%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (48 samples, 0.13%)</title><rect x="35.8505%" y="197" width="0.1330%" height="15" fill="rgb(252,33,42)" fg:x="12937" fg:w="48"/><text x="36.1005%" y="207.50"></text></g><g><title>dfbench`parquet::column::reader::GenericColumnReader&lt;R,D,V&gt;::read_new_page (393 samples, 1.09%)</title><rect x="34.9194%" y="213" width="1.0891%" height="15" fill="rgb(209,212,41)" fg:x="12601" fg:w="393"/><text x="35.1694%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (9 samples, 0.02%)</title><rect x="35.9835%" y="197" width="0.0249%" height="15" fill="rgb(207,154,6)" fg:x="12985" fg:w="9"/><text x="36.2335%" y="207.50"></text></g><g><title>dfbench`DYLD-STUB$$memcpy (8 samples, 0.02%)</title><rect x="37.8790%" y="197" width="0.0222%" height="15" fill="rgb(223,64,47)" fg:x="13669" fg:w="8"/><text x="38.1290%" y="207.50"></text></g><g><title>dfbench`parquet::encodings::rle::RleDecoder::reload (135 samples, 0.37%)</title><rect x="37.9011%" y="197" width="0.3741%" height="15" fill="rgb(211,161,38)" fg:x="13677" fg:w="135"/><text x="38.1511%" y="207.50"></text></g><g><title>dfbench`parquet::util::bit_util::BitReader::get_vlq_int (44 samples, 0.12%)</title><rect x="38.1533%" y="181" width="0.1219%" height="15" fill="rgb(219,138,40)" fg:x="13768" fg:w="44"/><text x="38.4033%" y="191.50"></text></g><g><title>dfbench`DYLD-STUB$$memcpy (9 samples, 0.02%)</title><rect x="38.5690%" y="181" width="0.0249%" height="15" fill="rgb(241,228,46)" fg:x="13918" fg:w="9"/><text x="38.8190%" y="191.50"></text></g><g><title>dfbench`parquet::util::bit_pack::unpack32 (48 samples, 0.13%)</title><rect x="38.6022%" y="181" width="0.1330%" height="15" fill="rgb(223,209,38)" fg:x="13930" fg:w="48"/><text x="38.8522%" y="191.50"></text></g><g><title>dfbench`parquet::util::bit_util::BitReader::get_value (114 samples, 0.32%)</title><rect x="38.7352%" y="181" width="0.3159%" height="15" fill="rgb(236,164,45)" fg:x="13978" fg:w="114"/><text x="38.9852%" y="191.50"></text></g><g><title>dfbench`parquet::util::bit_util::BitReader::get_batch (305 samples, 0.85%)</title><rect x="38.2780%" y="197" width="0.8452%" height="15" fill="rgb(231,15,5)" fg:x="13813" fg:w="305"/><text x="38.5280%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (26 samples, 0.07%)</title><rect x="39.0512%" y="181" width="0.0721%" height="15" fill="rgb(252,35,15)" fg:x="14092" fg:w="26"/><text x="39.3012%" y="191.50"></text></g><g><title>dfbench`parquet::util::bit_util::BitReader::get_value (33 samples, 0.09%)</title><rect x="39.1232%" y="197" width="0.0914%" height="15" fill="rgb(248,181,18)" fg:x="14118" fg:w="33"/><text x="39.3732%" y="207.50"></text></g><g><title>dfbench`parquet::encodings::rle::RleDecoder::get_batch_with_dict (1,171 samples, 3.25%)</title><rect x="36.0084%" y="213" width="3.2450%" height="15" fill="rgb(233,39,42)" fg:x="12994" fg:w="1171"/><text x="36.2584%" y="223.50">dfb..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (14 samples, 0.04%)</title><rect x="39.2147%" y="197" width="0.0388%" height="15" fill="rgb(238,110,33)" fg:x="14151" fg:w="14"/><text x="39.4647%" y="207.50"></text></g><g><title>dfbench`parquet::encodings::rle::RleDecoder::reload (7 samples, 0.02%)</title><rect x="39.2535%" y="213" width="0.0194%" height="15" fill="rgb(233,195,10)" fg:x="14165" fg:w="7"/><text x="39.5035%" y="223.50"></text></g><g><title>dfbench`parquet::arrow::array_reader::read_records (1,680 samples, 4.66%)</title><rect x="34.6284%" y="229" width="4.6555%" height="15" fill="rgb(254,105,3)" fg:x="12496" fg:w="1680"/><text x="34.8784%" y="239.50">dfben..</text></g><g><title>dfbench`&lt;parquet::arrow::array_reader::struct_array::StructArrayReader as parquet::arrow::array_reader::ArrayReader&gt;::read_records (1,737 samples, 4.81%)</title><rect x="34.6284%" y="245" width="4.8135%" height="15" fill="rgb(221,225,9)" fg:x="12496" fg:w="1737"/><text x="34.8784%" y="255.50">dfbenc..</text></g><g><title>libsystem_platform.dylib`_platform_memset (57 samples, 0.16%)</title><rect x="39.2839%" y="229" width="0.1580%" height="15" fill="rgb(224,227,45)" fg:x="14176" fg:w="57"/><text x="39.5339%" y="239.50"></text></g><g><title>dfbench`&lt;parquet::arrow::arrow_reader::ParquetRecordBatchReader as core::iter::traits::iterator::Iterator&gt;::next (1,819 samples, 5.04%)</title><rect x="34.4122%" y="261" width="5.0407%" height="15" fill="rgb(229,198,43)" fg:x="12418" fg:w="1819"/><text x="34.6622%" y="271.50">dfbenc..</text></g><g><title>dfbench`_mi_page_free (37 samples, 0.10%)</title><rect x="39.4585%" y="181" width="0.1025%" height="15" fill="rgb(206,209,35)" fg:x="14239" fg:w="37"/><text x="39.7085%" y="191.50"></text></g><g><title>dfbench`mi_segment_page_clear (37 samples, 0.10%)</title><rect x="39.4585%" y="165" width="0.1025%" height="15" fill="rgb(245,195,53)" fg:x="14239" fg:w="37"/><text x="39.7085%" y="175.50"></text></g><g><title>dfbench`mi_segment_span_free_coalesce (37 samples, 0.10%)</title><rect x="39.4585%" y="149" width="0.1025%" height="15" fill="rgb(240,92,26)" fg:x="14239" fg:w="37"/><text x="39.7085%" y="159.50"></text></g><g><title>dfbench`mi_segment_span_free (37 samples, 0.10%)</title><rect x="39.4585%" y="133" width="0.1025%" height="15" fill="rgb(207,40,23)" fg:x="14239" fg:w="37"/><text x="39.7085%" y="143.50"></text></g><g><title>dfbench`mi_segment_try_purge (37 samples, 0.10%)</title><rect x="39.4585%" y="117" width="0.1025%" height="15" fill="rgb(223,111,35)" fg:x="14239" fg:w="37"/><text x="39.7085%" y="127.50"></text></g><g><title>dfbench`mi_segment_purge (37 samples, 0.10%)</title><rect x="39.4585%" y="101" width="0.1025%" height="15" fill="rgb(229,147,28)" fg:x="14239" fg:w="37"/><text x="39.7085%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`madvise (37 samples, 0.10%)</title><rect x="39.4585%" y="85" width="0.1025%" height="15" fill="rgb(211,29,28)" fg:x="14239" fg:w="37"/><text x="39.7085%" y="95.50"></text></g><g><title>dfbench`bytes::bytes::shared_drop (17 samples, 0.05%)</title><rect x="39.5610%" y="181" width="0.0471%" height="15" fill="rgb(228,72,33)" fg:x="14276" fg:w="17"/><text x="39.8110%" y="191.50"></text></g><g><title>dfbench`_mi_page_free (17 samples, 0.05%)</title><rect x="39.5610%" y="165" width="0.0471%" height="15" fill="rgb(205,214,31)" fg:x="14276" fg:w="17"/><text x="39.8110%" y="175.50"></text></g><g><title>dfbench`mi_segment_page_clear (17 samples, 0.05%)</title><rect x="39.5610%" y="149" width="0.0471%" height="15" fill="rgb(224,111,15)" fg:x="14276" fg:w="17"/><text x="39.8110%" y="159.50"></text></g><g><title>dfbench`mi_segment_span_free_coalesce (16 samples, 0.04%)</title><rect x="39.5638%" y="133" width="0.0443%" height="15" fill="rgb(253,21,26)" fg:x="14277" fg:w="16"/><text x="39.8138%" y="143.50"></text></g><g><title>dfbench`mi_segment_span_free (16 samples, 0.04%)</title><rect x="39.5638%" y="117" width="0.0443%" height="15" fill="rgb(245,139,43)" fg:x="14277" fg:w="16"/><text x="39.8138%" y="127.50"></text></g><g><title>dfbench`mi_segment_try_purge (16 samples, 0.04%)</title><rect x="39.5638%" y="101" width="0.0443%" height="15" fill="rgb(252,170,7)" fg:x="14277" fg:w="16"/><text x="39.8138%" y="111.50"></text></g><g><title>dfbench`mi_segment_purge (16 samples, 0.04%)</title><rect x="39.5638%" y="85" width="0.0443%" height="15" fill="rgb(231,118,14)" fg:x="14277" fg:w="16"/><text x="39.8138%" y="95.50"></text></g><g><title>libsystem_kernel.dylib`madvise (16 samples, 0.04%)</title><rect x="39.5638%" y="69" width="0.0443%" height="15" fill="rgb(238,83,0)" fg:x="14277" fg:w="16"/><text x="39.8138%" y="79.50"></text></g><g><title>dfbench`core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::boxed::Box&lt;dyn arrow_json::reader::ArrayDecoder&gt;&gt;&gt; (57 samples, 0.16%)</title><rect x="39.4530%" y="229" width="0.1580%" height="15" fill="rgb(221,39,39)" fg:x="14237" fg:w="57"/><text x="39.7030%" y="239.50"></text></g><g><title>dfbench`core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;parquet::basic::Encoding,alloc::boxed::Box&lt;dyn parquet::encodings::decoding::Decoder&lt;parquet::data_type::BoolType&gt;&gt;&gt;&gt; (55 samples, 0.15%)</title><rect x="39.4585%" y="213" width="0.1524%" height="15" fill="rgb(222,119,46)" fg:x="14239" fg:w="55"/><text x="39.7085%" y="223.50"></text></g><g><title>dfbench`core::ptr::drop_in_place&lt;parquet::encodings::decoding::DictDecoder&lt;parquet::data_type::DoubleType&gt;&gt; (55 samples, 0.15%)</title><rect x="39.4585%" y="197" width="0.1524%" height="15" fill="rgb(222,165,49)" fg:x="14239" fg:w="55"/><text x="39.7085%" y="207.50"></text></g><g><title>dfbench`core::ptr::drop_in_place&lt;parquet::arrow::arrow_reader::ParquetRecordBatchReader&gt; (58 samples, 0.16%)</title><rect x="39.4530%" y="261" width="0.1607%" height="15" fill="rgb(219,113,52)" fg:x="14237" fg:w="58"/><text x="39.7030%" y="271.50"></text></g><g><title>dfbench`core::ptr::drop_in_place&lt;parquet::arrow::array_reader::struct_array::StructArrayReader&gt; (58 samples, 0.16%)</title><rect x="39.4530%" y="245" width="0.1607%" height="15" fill="rgb(214,7,15)" fg:x="14237" fg:w="58"/><text x="39.7030%" y="255.50"></text></g><g><title>dfbench`_mi_free_delayed_block (17 samples, 0.05%)</title><rect x="39.6386%" y="181" width="0.0471%" height="15" fill="rgb(235,32,4)" fg:x="14304" fg:w="17"/><text x="39.8886%" y="191.50"></text></g><g><title>dfbench`mi_segment_free (14 samples, 0.04%)</title><rect x="39.6470%" y="165" width="0.0388%" height="15" fill="rgb(238,90,54)" fg:x="14307" fg:w="14"/><text x="39.8970%" y="175.50"></text></g><g><title>dfbench`mi_arenas_try_purge (14 samples, 0.04%)</title><rect x="39.6470%" y="149" width="0.0388%" height="15" fill="rgb(213,208,19)" fg:x="14307" fg:w="14"/><text x="39.8970%" y="159.50"></text></g><g><title>dfbench`mi_arena_purge (14 samples, 0.04%)</title><rect x="39.6470%" y="133" width="0.0388%" height="15" fill="rgb(233,156,4)" fg:x="14307" fg:w="14"/><text x="39.8970%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`madvise (14 samples, 0.04%)</title><rect x="39.6470%" y="117" width="0.0388%" height="15" fill="rgb(207,194,5)" fg:x="14307" fg:w="14"/><text x="39.8970%" y="127.50"></text></g><g><title>dfbench`mi_heap_malloc_zero_aligned_at_generic (18 samples, 0.05%)</title><rect x="39.6386%" y="213" width="0.0499%" height="15" fill="rgb(206,111,30)" fg:x="14304" fg:w="18"/><text x="39.8886%" y="223.50"></text></g><g><title>dfbench`_mi_malloc_generic (18 samples, 0.05%)</title><rect x="39.6386%" y="197" width="0.0499%" height="15" fill="rgb(243,70,54)" fg:x="14304" fg:w="18"/><text x="39.8886%" y="207.50"></text></g><g><title>dfbench`&lt;parquet::arrow::async_reader::InMemoryRowGroup as parquet::arrow::array_reader::RowGroups&gt;::column_chunks (5 samples, 0.01%)</title><rect x="39.7024%" y="197" width="0.0139%" height="15" fill="rgb(242,28,8)" fg:x="14327" fg:w="5"/><text x="39.9524%" y="207.50"></text></g><g><title>dfbench`parquet::arrow::array_reader::builder::build_array_reader (30 samples, 0.08%)</title><rect x="39.6359%" y="245" width="0.0831%" height="15" fill="rgb(219,106,18)" fg:x="14303" fg:w="30"/><text x="39.8859%" y="255.50"></text></g><g><title>dfbench`parquet::arrow::array_reader::builder::build_reader (29 samples, 0.08%)</title><rect x="39.6386%" y="229" width="0.0804%" height="15" fill="rgb(244,222,10)" fg:x="14304" fg:w="29"/><text x="39.8886%" y="239.50"></text></g><g><title>dfbench`parquet::arrow::array_reader::builder::build_reader (11 samples, 0.03%)</title><rect x="39.6885%" y="213" width="0.0305%" height="15" fill="rgb(236,179,52)" fg:x="14322" fg:w="11"/><text x="39.9385%" y="223.50"></text></g><g><title>dfbench`object_store::local::LocalFileSystem::path_to_filesystem (5 samples, 0.01%)</title><rect x="39.7245%" y="181" width="0.0139%" height="15" fill="rgb(213,23,39)" fg:x="14335" fg:w="5"/><text x="39.9745%" y="191.50"></text></g><g><title>dfbench`&lt;alloc::sync::Arc&lt;dyn object_store::ObjectStore&gt; as object_store::ObjectStore&gt;::get_ranges::_{{closure}} (12 samples, 0.03%)</title><rect x="39.7245%" y="213" width="0.0333%" height="15" fill="rgb(238,48,10)" fg:x="14335" fg:w="12"/><text x="39.9745%" y="223.50"></text></g><g><title>dfbench`&lt;object_store::local::LocalFileSystem as object_store::ObjectStore&gt;::get_ranges::_{{closure}} (12 samples, 0.03%)</title><rect x="39.7245%" y="197" width="0.0333%" height="15" fill="rgb(251,196,23)" fg:x="14335" fg:w="12"/><text x="39.9745%" y="207.50"></text></g><g><title>dfbench`tokio::runtime::blocking::pool::Spawner::spawn_task (7 samples, 0.02%)</title><rect x="39.7384%" y="181" width="0.0194%" height="15" fill="rgb(250,152,24)" fg:x="14340" fg:w="7"/><text x="39.9884%" y="191.50"></text></g><g><title>dfbench`parking_lot::raw_mutex::RawMutex::unlock_slow (6 samples, 0.02%)</title><rect x="39.7412%" y="165" width="0.0166%" height="15" fill="rgb(209,150,17)" fg:x="14341" fg:w="6"/><text x="39.9912%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (6 samples, 0.02%)</title><rect x="39.7412%" y="149" width="0.0166%" height="15" fill="rgb(234,202,34)" fg:x="14341" fg:w="6"/><text x="39.9912%" y="159.50"></text></g><g><title>dfbench`&lt;futures_util::stream::stream::map::Map&lt;St,F&gt; as futures_core::stream::Stream&gt;::poll_next (1,969 samples, 5.46%)</title><rect x="34.3069%" y="277" width="5.4564%" height="15" fill="rgb(253,148,53)" fg:x="12380" fg:w="1969"/><text x="34.5569%" y="287.50">dfbench..</text></g><g><title>dfbench`parquet::arrow::async_reader::ReaderFactory&lt;T&gt;::read_row_group::_{{closure}} (51 samples, 0.14%)</title><rect x="39.6220%" y="261" width="0.1413%" height="15" fill="rgb(218,129,16)" fg:x="14298" fg:w="51"/><text x="39.8720%" y="271.50"></text></g><g><title>dfbench`parquet::arrow::async_reader::InMemoryRowGroup::fetch::_{{closure}} (16 samples, 0.04%)</title><rect x="39.7190%" y="245" width="0.0443%" height="15" fill="rgb(216,85,19)" fg:x="14333" fg:w="16"/><text x="39.9690%" y="255.50"></text></g><g><title>dfbench`&lt;parquet::arrow::async_reader::store::ParquetObjectReader as parquet::arrow::async_reader::AsyncFileReader&gt;::get_byte_ranges::_{{closure}} (14 samples, 0.04%)</title><rect x="39.7245%" y="229" width="0.0388%" height="15" fill="rgb(235,228,7)" fg:x="14335" fg:w="14"/><text x="39.9745%" y="239.50"></text></g><g><title>dfbench`datafusion::datasource::physical_plan::file_scan_config::PartitionColumnProjector::project (6 samples, 0.02%)</title><rect x="39.7633%" y="277" width="0.0166%" height="15" fill="rgb(245,175,0)" fg:x="14349" fg:w="6"/><text x="40.0133%" y="287.50"></text></g><g><title>dfbench`std::sys::pal::unix::time::Timespec::now (9 samples, 0.02%)</title><rect x="39.7855%" y="277" width="0.0249%" height="15" fill="rgb(208,168,36)" fg:x="14357" fg:w="9"/><text x="40.0355%" y="287.50"></text></g><g><title>libsystem_c.dylib`clock_gettime (9 samples, 0.02%)</title><rect x="39.7855%" y="261" width="0.0249%" height="15" fill="rgb(246,171,24)" fg:x="14357" fg:w="9"/><text x="40.0355%" y="271.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (7 samples, 0.02%)</title><rect x="39.7911%" y="245" width="0.0194%" height="15" fill="rgb(215,142,24)" fg:x="14359" fg:w="7"/><text x="40.0411%" y="255.50"></text></g><g><title>dfbench`&lt;datafusion::datasource::physical_plan::file_stream::FileStream&lt;F&gt; as futures_core::stream::Stream&gt;::poll_next (2,807 samples, 7.78%)</title><rect x="32.0346%" y="293" width="7.7786%" height="15" fill="rgb(250,187,7)" fg:x="11560" fg:w="2807"/><text x="32.2846%" y="303.50">dfbench`&lt;da..</text></g><g><title>dfbench`arrow_array::record_batch::RecordBatch::try_new_impl (12 samples, 0.03%)</title><rect x="39.8160%" y="293" width="0.0333%" height="15" fill="rgb(228,66,33)" fg:x="14368" fg:w="12"/><text x="40.0660%" y="303.50"></text></g><g><title>dfbench`core::ops::function::FnOnce::call_once (7 samples, 0.02%)</title><rect x="39.8299%" y="277" width="0.0194%" height="15" fill="rgb(234,215,21)" fg:x="14373" fg:w="7"/><text x="40.0799%" y="287.50"></text></g><g><title>dfbench`&lt;datafusion_physical_plan::projection::ProjectionStream as futures_core::stream::Stream&gt;::poll_next (2,952 samples, 8.18%)</title><rect x="31.6771%" y="309" width="8.1805%" height="15" fill="rgb(222,191,20)" fg:x="11431" fg:w="2952"/><text x="31.9271%" y="319.50">dfbench`&lt;da..</text></g><g><title>dfbench`arrow_array::array::primitive_array::PrimitiveArray&lt;T&gt;::slice (10 samples, 0.03%)</title><rect x="39.8576%" y="277" width="0.0277%" height="15" fill="rgb(245,79,54)" fg:x="14383" fg:w="10"/><text x="40.1076%" y="287.50"></text></g><g><title>dfbench`arrow_buffer::buffer::scalar::ScalarBuffer&lt;T&gt;::new (6 samples, 0.02%)</title><rect x="39.8686%" y="261" width="0.0166%" height="15" fill="rgb(240,10,37)" fg:x="14387" fg:w="6"/><text x="40.1186%" y="271.50"></text></g><g><title>dfbench`&lt;arrow_array::array::primitive_array::PrimitiveArray&lt;T&gt; as arrow_array::array::Array&gt;::slice (11 samples, 0.03%)</title><rect x="39.8576%" y="293" width="0.0305%" height="15" fill="rgb(214,192,32)" fg:x="14383" fg:w="11"/><text x="40.1076%" y="303.50"></text></g><g><title>dfbench`arrow_array::record_batch::RecordBatch::slice (13 samples, 0.04%)</title><rect x="39.8576%" y="309" width="0.0360%" height="15" fill="rgb(209,36,54)" fg:x="14383" fg:w="13"/><text x="40.1076%" y="319.50"></text></g><g><title>dfbench`core::ptr::drop_in_place&lt;arrow_array::array::primitive_array::PrimitiveArray&lt;arrow_array::types::Int8Type&gt;&gt; (7 samples, 0.02%)</title><rect x="39.8964%" y="277" width="0.0194%" height="15" fill="rgb(220,10,11)" fg:x="14397" fg:w="7"/><text x="40.1464%" y="287.50"></text></g><g><title>dfbench`core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::sync::Arc&lt;dyn arrow_array::array::Array&gt;&gt;&gt; (11 samples, 0.03%)</title><rect x="39.8936%" y="309" width="0.0305%" height="15" fill="rgb(221,106,17)" fg:x="14396" fg:w="11"/><text x="40.1436%" y="319.50"></text></g><g><title>dfbench`alloc::sync::Arc&lt;T,A&gt;::drop_slow (11 samples, 0.03%)</title><rect x="39.8936%" y="293" width="0.0305%" height="15" fill="rgb(251,142,44)" fg:x="14396" fg:w="11"/><text x="40.1436%" y="303.50"></text></g><g><title>dfbench`&lt;datafusion_physical_plan::aggregates::group_values::multi_group_by::GroupValuesColumn&lt;_&gt; as datafusion_physical_plan::aggregates::group_values::GroupValues&gt;::clear_shrink (30 samples, 0.08%)</title><rect x="39.9241%" y="293" width="0.0831%" height="15" fill="rgb(238,13,15)" fg:x="14407" fg:w="30"/><text x="40.1741%" y="303.50"></text></g><g><title>dfbench`mi_free_block_mt (30 samples, 0.08%)</title><rect x="39.9241%" y="277" width="0.0831%" height="15" fill="rgb(208,107,27)" fg:x="14407" fg:w="30"/><text x="40.1741%" y="287.50"></text></g><g><title>dfbench`_mi_os_reset (30 samples, 0.08%)</title><rect x="39.9241%" y="261" width="0.0831%" height="15" fill="rgb(205,136,37)" fg:x="14407" fg:w="30"/><text x="40.1741%" y="271.50"></text></g><g><title>libsystem_kernel.dylib`madvise (30 samples, 0.08%)</title><rect x="39.9241%" y="245" width="0.0831%" height="15" fill="rgb(250,205,27)" fg:x="14407" fg:w="30"/><text x="40.1741%" y="255.50"></text></g><g><title>dfbench`datafusion_physical_plan::aggregates::row_hash::GroupedHashAggregateStream::clear_all (32 samples, 0.09%)</title><rect x="39.9241%" y="309" width="0.0887%" height="15" fill="rgb(210,80,43)" fg:x="14407" fg:w="32"/><text x="40.1741%" y="319.50"></text></g><g><title>dfbench`&lt;datafusion_functions_aggregate::count::CountGroupsAccumulator as datafusion_expr_common::groups_accumulator::GroupsAccumulator&gt;::update_batch (1,843 samples, 5.11%)</title><rect x="40.0266%" y="293" width="5.1072%" height="15" fill="rgb(247,160,36)" fg:x="14444" fg:w="1843"/><text x="40.2766%" y="303.50">dfbenc..</text></g><g><title>dfbench`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (83 samples, 0.23%)</title><rect x="44.9038%" y="277" width="0.2300%" height="15" fill="rgb(234,13,49)" fg:x="16204" fg:w="83"/><text x="45.1538%" y="287.50"></text></g><g><title>dfbench`alloc::raw_vec::finish_grow (83 samples, 0.23%)</title><rect x="44.9038%" y="261" width="0.2300%" height="15" fill="rgb(234,122,0)" fg:x="16204" fg:w="83"/><text x="45.1538%" y="271.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (81 samples, 0.22%)</title><rect x="44.9094%" y="245" width="0.2245%" height="15" fill="rgb(207,146,38)" fg:x="16206" fg:w="81"/><text x="45.1594%" y="255.50"></text></g><g><title>dfbench`_mi_heap_realloc_zero (5 samples, 0.01%)</title><rect x="68.2342%" y="229" width="0.0139%" height="15" fill="rgb(207,177,25)" fg:x="24623" fg:w="5"/><text x="68.4842%" y="239.50"></text></g><g><title>dfbench`&lt;datafusion_physical_plan::aggregates::group_values::multi_group_by::primitive::PrimitiveGroupValueBuilder&lt;T,_&gt; as datafusion_physical_plan::aggregates::group_values::multi_group_by::GroupColumn&gt;::vectorized_append (928 samples, 2.57%)</title><rect x="66.4108%" y="277" width="2.5716%" height="15" fill="rgb(211,178,42)" fg:x="23965" fg:w="928"/><text x="66.6608%" y="287.50">df..</text></g><g><title>dfbench`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (270 samples, 0.75%)</title><rect x="68.2342%" y="261" width="0.7482%" height="15" fill="rgb(230,69,54)" fg:x="24623" fg:w="270"/><text x="68.4842%" y="271.50"></text></g><g><title>dfbench`alloc::raw_vec::finish_grow (270 samples, 0.75%)</title><rect x="68.2342%" y="245" width="0.7482%" height="15" fill="rgb(214,135,41)" fg:x="24623" fg:w="270"/><text x="68.4842%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (265 samples, 0.73%)</title><rect x="68.2481%" y="229" width="0.7344%" height="15" fill="rgb(237,67,25)" fg:x="24628" fg:w="265"/><text x="68.4981%" y="239.50"></text></g><g><title>dfbench`&lt;datafusion_physical_plan::aggregates::group_values::multi_group_by::primitive::PrimitiveGroupValueBuilder&lt;T,_&gt; as datafusion_physical_plan::aggregates::group_values::multi_group_by::GroupColumn&gt;::vectorized_equal_to (6,709 samples, 18.59%)</title><rect x="68.9824%" y="277" width="18.5917%" height="15" fill="rgb(222,189,50)" fg:x="24893" fg:w="6709"/><text x="69.2324%" y="287.50">dfbench`&lt;datafusion_physical_..</text></g><g><title>dfbench`datafusion_common::hash_utils::create_hashes (2,433 samples, 6.74%)</title><rect x="87.5769%" y="277" width="6.7422%" height="15" fill="rgb(245,148,34)" fg:x="31603" fg:w="2433"/><text x="87.8269%" y="287.50">dfbench`d..</text></g><g><title>dfbench`hashbrown::raw::inner::RawTableInner::fallible_with_capacity (7 samples, 0.02%)</title><rect x="96.3615%" y="261" width="0.0194%" height="15" fill="rgb(222,29,6)" fg:x="34773" fg:w="7"/><text x="96.6115%" y="271.50"></text></g><g><title>dfbench`mi_heap_malloc_zero_aligned_at_generic (7 samples, 0.02%)</title><rect x="96.3615%" y="245" width="0.0194%" height="15" fill="rgb(221,189,43)" fg:x="34773" fg:w="7"/><text x="96.6115%" y="255.50"></text></g><g><title>dfbench`_mi_malloc_generic (7 samples, 0.02%)</title><rect x="96.3615%" y="229" width="0.0194%" height="15" fill="rgb(207,36,27)" fg:x="34773" fg:w="7"/><text x="96.6115%" y="239.50"></text></g><g><title>dfbench`mi_page_fresh_alloc (4 samples, 0.01%)</title><rect x="96.3698%" y="213" width="0.0111%" height="15" fill="rgb(217,90,24)" fg:x="34776" fg:w="4"/><text x="96.6198%" y="223.50"></text></g><g><title>dfbench`mi_free_block_mt (16 samples, 0.04%)</title><rect x="96.3809%" y="261" width="0.0443%" height="15" fill="rgb(224,66,35)" fg:x="34780" fg:w="16"/><text x="96.6309%" y="271.50"></text></g><g><title>dfbench`_mi_os_reset (16 samples, 0.04%)</title><rect x="96.3809%" y="245" width="0.0443%" height="15" fill="rgb(221,13,50)" fg:x="34780" fg:w="16"/><text x="96.6309%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`madvise (16 samples, 0.04%)</title><rect x="96.3809%" y="229" width="0.0443%" height="15" fill="rgb(236,68,49)" fg:x="34780" fg:w="16"/><text x="96.6309%" y="239.50"></text></g><g><title>dfbench`mi_segment_free (6 samples, 0.02%)</title><rect x="96.4252%" y="261" width="0.0166%" height="15" fill="rgb(229,146,28)" fg:x="34796" fg:w="6"/><text x="96.6752%" y="271.50"></text></g><g><title>dfbench`mi_arenas_try_purge (6 samples, 0.02%)</title><rect x="96.4252%" y="245" width="0.0166%" height="15" fill="rgb(225,31,38)" fg:x="34796" fg:w="6"/><text x="96.6752%" y="255.50"></text></g><g><title>dfbench`mi_arena_purge (6 samples, 0.02%)</title><rect x="96.4252%" y="229" width="0.0166%" height="15" fill="rgb(250,208,3)" fg:x="34796" fg:w="6"/><text x="96.6752%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`madvise (6 samples, 0.02%)</title><rect x="96.4252%" y="213" width="0.0166%" height="15" fill="rgb(246,54,23)" fg:x="34796" fg:w="6"/><text x="96.6752%" y="223.50"></text></g><g><title>dfbench`&lt;datafusion_physical_plan::aggregates::group_values::multi_group_by::GroupValuesColumn&lt;_&gt; as datafusion_physical_plan::aggregates::group_values::GroupValues&gt;::intern (18,541 samples, 51.38%)</title><rect x="45.1338%" y="293" width="51.3800%" height="15" fill="rgb(243,76,11)" fg:x="16287" fg:w="18541"/><text x="45.3838%" y="303.50">dfbench`&lt;datafusion_physical_plan::aggregates::group_values::multi_group_by::GroupVal..</text></g><g><title>dfbench`hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve_rehash (792 samples, 2.19%)</title><rect x="94.3191%" y="277" width="2.1948%" height="15" fill="rgb(245,21,50)" fg:x="34036" fg:w="792"/><text x="94.5691%" y="287.50">d..</text></g><g><title>libsystem_platform.dylib`_platform_memset (26 samples, 0.07%)</title><rect x="96.4418%" y="261" width="0.0721%" height="15" fill="rgb(228,9,43)" fg:x="34802" fg:w="26"/><text x="96.6918%" y="271.50"></text></g><g><title>dfbench`core::ptr::drop_in_place&lt;arrow_array::array::primitive_array::PrimitiveArray&lt;arrow_array::types::Int8Type&gt;&gt; (7 samples, 0.02%)</title><rect x="96.5444%" y="261" width="0.0194%" height="15" fill="rgb(208,100,47)" fg:x="34839" fg:w="7"/><text x="96.7944%" y="271.50"></text></g><g><title>dfbench`core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::sync::Arc&lt;dyn arrow_array::array::Array&gt;&gt;&gt; (13 samples, 0.04%)</title><rect x="96.5305%" y="293" width="0.0360%" height="15" fill="rgb(232,26,8)" fg:x="34834" fg:w="13"/><text x="96.7805%" y="303.50"></text></g><g><title>dfbench`alloc::sync::Arc&lt;T,A&gt;::drop_slow (9 samples, 0.02%)</title><rect x="96.5416%" y="277" width="0.0249%" height="15" fill="rgb(216,166,38)" fg:x="34838" fg:w="9"/><text x="96.7916%" y="287.50"></text></g><g><title>dfbench`&lt;datafusion_physical_expr::expressions::column::Column as datafusion_physical_expr_common::physical_expr::PhysicalExpr&gt;::evaluate (6 samples, 0.02%)</title><rect x="96.6109%" y="245" width="0.0166%" height="15" fill="rgb(251,202,51)" fg:x="34863" fg:w="6"/><text x="96.8609%" y="255.50"></text></g><g><title>dfbench`&lt;T as core::any::Any&gt;::type_id (11 samples, 0.03%)</title><rect x="96.6469%" y="229" width="0.0305%" height="15" fill="rgb(254,216,34)" fg:x="34876" fg:w="11"/><text x="96.8969%" y="239.50"></text></g><g><title>dfbench`core::ptr::drop_in_place&lt;arrow_array::array::primitive_array::PrimitiveArray&lt;arrow_array::types::Int8Type&gt;&gt; (5 samples, 0.01%)</title><rect x="96.6912%" y="213" width="0.0139%" height="15" fill="rgb(251,32,27)" fg:x="34892" fg:w="5"/><text x="96.9412%" y="223.50"></text></g><g><title>dfbench`alloc::sync::Arc&lt;T,A&gt;::drop_slow (14 samples, 0.04%)</title><rect x="96.6912%" y="229" width="0.0388%" height="15" fill="rgb(208,127,28)" fg:x="34892" fg:w="14"/><text x="96.9412%" y="239.50"></text></g><g><title>dfbench`mi_free (9 samples, 0.02%)</title><rect x="96.7051%" y="213" width="0.0249%" height="15" fill="rgb(224,137,22)" fg:x="34897" fg:w="9"/><text x="96.9551%" y="223.50"></text></g><g><title>dfbench`arrow_arith::numeric::arithmetic_op (26 samples, 0.07%)</title><rect x="96.7300%" y="229" width="0.0721%" height="15" fill="rgb(254,70,32)" fg:x="34906" fg:w="26"/><text x="96.9800%" y="239.50"></text></g><g><title>dfbench`mi_heap_malloc_zero_aligned_at_generic (7 samples, 0.02%)</title><rect x="97.5448%" y="197" width="0.0194%" height="15" fill="rgb(229,75,37)" fg:x="35200" fg:w="7"/><text x="97.7948%" y="207.50"></text></g><g><title>dfbench`_mi_malloc_generic (7 samples, 0.02%)</title><rect x="97.5448%" y="181" width="0.0194%" height="15" fill="rgb(252,64,23)" fg:x="35200" fg:w="7"/><text x="97.7948%" y="191.50"></text></g><g><title>dfbench`mi_find_page (4 samples, 0.01%)</title><rect x="97.5531%" y="165" width="0.0111%" height="15" fill="rgb(232,162,48)" fg:x="35203" fg:w="4"/><text x="97.8031%" y="175.50"></text></g><g><title>dfbench`arrow_array::array::primitive_array::PrimitiveArray&lt;T&gt;::unary (279 samples, 0.77%)</title><rect x="96.8021%" y="213" width="0.7732%" height="15" fill="rgb(246,160,12)" fg:x="34932" fg:w="279"/><text x="97.0521%" y="223.50"></text></g><g><title>dfbench`arrow_arith::numeric::integer_op (281 samples, 0.78%)</title><rect x="96.8021%" y="229" width="0.7787%" height="15" fill="rgb(247,166,0)" fg:x="34932" fg:w="281"/><text x="97.0521%" y="239.50"></text></g><g><title>dfbench`&lt;datafusion_physical_expr::expressions::binary::BinaryExpr as datafusion_physical_expr_common::physical_expr::PhysicalExpr&gt;::evaluate (364 samples, 1.01%)</title><rect x="96.5998%" y="261" width="1.0087%" height="15" fill="rgb(249,219,21)" fg:x="34859" fg:w="364"/><text x="96.8498%" y="271.50"></text></g><g><title>dfbench`datafusion_physical_expr_common::datum::apply (352 samples, 0.98%)</title><rect x="96.6330%" y="245" width="0.9754%" height="15" fill="rgb(205,209,3)" fg:x="34871" fg:w="352"/><text x="96.8830%" y="255.50"></text></g><g><title>dfbench`datafusion_common::scalar::ScalarValue::to_scalar (9 samples, 0.02%)</title><rect x="97.5836%" y="229" width="0.0249%" height="15" fill="rgb(243,44,1)" fg:x="35214" fg:w="9"/><text x="97.8336%" y="239.50"></text></g><g><title>dfbench`datafusion_common::scalar::ScalarValue::to_array_of_size (9 samples, 0.02%)</title><rect x="97.5836%" y="213" width="0.0249%" height="15" fill="rgb(206,159,16)" fg:x="35214" fg:w="9"/><text x="97.8336%" y="223.50"></text></g><g><title>dfbench`arrow_array::array::primitive_array::PrimitiveArray&lt;T&gt;::from_value (7 samples, 0.02%)</title><rect x="97.5891%" y="197" width="0.0194%" height="15" fill="rgb(244,77,30)" fg:x="35216" fg:w="7"/><text x="97.8391%" y="207.50"></text></g><g><title>dfbench`datafusion_physical_plan::aggregates::evaluate_group_by (378 samples, 1.05%)</title><rect x="96.5693%" y="293" width="1.0475%" height="15" fill="rgb(218,69,12)" fg:x="34848" fg:w="378"/><text x="96.8193%" y="303.50"></text></g><g><title>dfbench`&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::next (375 samples, 1.04%)</title><rect x="96.5776%" y="277" width="1.0392%" height="15" fill="rgb(212,87,7)" fg:x="34851" fg:w="375"/><text x="96.8276%" y="287.50"></text></g><g><title>dfbench`datafusion_common::scalar::ScalarValue::to_array_of_size (80 samples, 0.22%)</title><rect x="97.6362%" y="261" width="0.2217%" height="15" fill="rgb(245,114,25)" fg:x="35233" fg:w="80"/><text x="97.8862%" y="271.50"></text></g><g><title>dfbench`arrow_array::array::primitive_array::PrimitiveArray&lt;T&gt;::from_value (80 samples, 0.22%)</title><rect x="97.6362%" y="245" width="0.2217%" height="15" fill="rgb(210,61,42)" fg:x="35233" fg:w="80"/><text x="97.8862%" y="255.50"></text></g><g><title>dfbench`&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::next (84 samples, 0.23%)</title><rect x="97.6279%" y="277" width="0.2328%" height="15" fill="rgb(211,52,33)" fg:x="35230" fg:w="84"/><text x="97.8779%" y="287.50"></text></g><g><title>dfbench`datafusion_physical_plan::aggregates::evaluate_many (91 samples, 0.25%)</title><rect x="97.6168%" y="293" width="0.2522%" height="15" fill="rgb(234,58,33)" fg:x="35226" fg:w="91"/><text x="97.8668%" y="303.50"></text></g><g><title>dfbench`datafusion_physical_plan::aggregates::evaluate_optional (5 samples, 0.01%)</title><rect x="97.8690%" y="293" width="0.0139%" height="15" fill="rgb(220,115,36)" fg:x="35317" fg:w="5"/><text x="98.1190%" y="303.50"></text></g><g><title>libsystem_platform.dylib`__bzero (30 samples, 0.08%)</title><rect x="97.8967%" y="293" width="0.0831%" height="15" fill="rgb(243,153,54)" fg:x="35327" fg:w="30"/><text x="98.1467%" y="303.50"></text></g><g><title>dfbench`datafusion_physical_plan::aggregates::row_hash::GroupedHashAggregateStream::group_aggregate_batch (21,071 samples, 58.39%)</title><rect x="40.0127%" y="309" width="58.3911%" height="15" fill="rgb(251,47,18)" fg:x="14439" fg:w="21071"/><text x="40.2627%" y="319.50">dfbench`datafusion_physical_plan::aggregates::row_hash::GroupedHashAggregateStream::group_aggreg..</text></g><g><title>libsystem_platform.dylib`_platform_memset (153 samples, 0.42%)</title><rect x="97.9798%" y="293" width="0.4240%" height="15" fill="rgb(242,102,42)" fg:x="35357" fg:w="153"/><text x="98.2298%" y="303.50"></text></g><g><title>dfbench`&lt;datafusion_physical_plan::aggregates::row_hash::GroupedHashAggregateStream as futures_core::stream::Stream&gt;::poll_next (24,096 samples, 66.77%)</title><rect x="31.6522%" y="325" width="66.7738%" height="15" fill="rgb(234,31,38)" fg:x="11422" fg:w="24096"/><text x="31.9022%" y="335.50">dfbench`&lt;datafusion_physical_plan::aggregates::row_hash::GroupedHashAggregateStream as futures_core::stream::St..</text></g><g><title>dfbench`std::sys::pal::unix::time::Timespec::now (6 samples, 0.02%)</title><rect x="98.4094%" y="309" width="0.0166%" height="15" fill="rgb(221,117,51)" fg:x="35512" fg:w="6"/><text x="98.6594%" y="319.50"></text></g><g><title>libsystem_c.dylib`clock_gettime (6 samples, 0.02%)</title><rect x="98.4094%" y="293" width="0.0166%" height="15" fill="rgb(212,20,18)" fg:x="35512" fg:w="6"/><text x="98.6594%" y="303.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (4 samples, 0.01%)</title><rect x="98.4149%" y="277" width="0.0111%" height="15" fill="rgb(245,133,36)" fg:x="35514" fg:w="4"/><text x="98.6649%" y="287.50"></text></g><g><title>dfbench`parking_lot::condvar::Condvar::notify_one_slow (12 samples, 0.03%)</title><rect x="98.4426%" y="261" width="0.0333%" height="15" fill="rgb(212,6,19)" fg:x="35524" fg:w="12"/><text x="98.6926%" y="271.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (8 samples, 0.02%)</title><rect x="98.4537%" y="245" width="0.0222%" height="15" fill="rgb(218,1,36)" fg:x="35528" fg:w="8"/><text x="98.7037%" y="255.50"></text></g><g><title>dfbench`tokio::runtime::scheduler::multi_thread::worker::_&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::schedule_task::_{{closure}} (16 samples, 0.04%)</title><rect x="98.4343%" y="277" width="0.0443%" height="15" fill="rgb(246,84,54)" fg:x="35521" fg:w="16"/><text x="98.6843%" y="287.50"></text></g><g><title>dfbench`tokio::runtime::task::waker::wake_by_val (18 samples, 0.05%)</title><rect x="98.4315%" y="309" width="0.0499%" height="15" fill="rgb(242,110,6)" fg:x="35520" fg:w="18"/><text x="98.6815%" y="319.50"></text></g><g><title>dfbench`tokio::runtime::scheduler::multi_thread::worker::_&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::schedule_task (18 samples, 0.05%)</title><rect x="98.4315%" y="293" width="0.0499%" height="15" fill="rgb(214,47,5)" fg:x="35520" fg:w="18"/><text x="98.6815%" y="303.50"></text></g><g><title>dfbench`&lt;datafusion_physical_plan::repartition::distributor_channels::SendFuture&lt;T&gt; as core::future::future::Future&gt;::poll (22 samples, 0.06%)</title><rect x="98.4260%" y="325" width="0.0610%" height="15" fill="rgb(218,159,25)" fg:x="35518" fg:w="22"/><text x="98.6760%" y="335.50"></text></g><g><title>dfbench`core::ptr::drop_in_place&lt;arrow_array::array::primitive_array::PrimitiveArray&lt;arrow_array::types::Int8Type&gt;&gt; (9 samples, 0.02%)</title><rect x="98.4897%" y="293" width="0.0249%" height="15" fill="rgb(215,211,28)" fg:x="35541" fg:w="9"/><text x="98.7397%" y="303.50"></text></g><g><title>dfbench`alloc::sync::Arc&lt;T,A&gt;::drop_slow (9 samples, 0.02%)</title><rect x="98.4897%" y="277" width="0.0249%" height="15" fill="rgb(238,59,32)" fg:x="35541" fg:w="9"/><text x="98.7397%" y="287.50"></text></g><g><title>dfbench`mi_free_block_mt (8 samples, 0.02%)</title><rect x="98.4925%" y="261" width="0.0222%" height="15" fill="rgb(226,82,3)" fg:x="35542" fg:w="8"/><text x="98.7425%" y="271.50"></text></g><g><title>dfbench`_mi_os_reset (8 samples, 0.02%)</title><rect x="98.4925%" y="245" width="0.0222%" height="15" fill="rgb(240,164,32)" fg:x="35542" fg:w="8"/><text x="98.7425%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`madvise (8 samples, 0.02%)</title><rect x="98.4925%" y="229" width="0.0222%" height="15" fill="rgb(232,46,7)" fg:x="35542" fg:w="8"/><text x="98.7425%" y="239.50"></text></g><g><title>dfbench`core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::sync::Arc&lt;dyn arrow_array::array::Array&gt;&gt;&gt; (11 samples, 0.03%)</title><rect x="98.4869%" y="325" width="0.0305%" height="15" fill="rgb(229,129,53)" fg:x="35540" fg:w="11"/><text x="98.7369%" y="335.50"></text></g><g><title>dfbench`alloc::sync::Arc&lt;T,A&gt;::drop_slow (10 samples, 0.03%)</title><rect x="98.4897%" y="309" width="0.0277%" height="15" fill="rgb(234,188,29)" fg:x="35541" fg:w="10"/><text x="98.7397%" y="319.50"></text></g><g><title>dfbench`core::ptr::drop_in_place&lt;core::option::Option&lt;parquet::file::statistics::Statistics&gt;&gt; (6 samples, 0.02%)</title><rect x="98.5729%" y="165" width="0.0166%" height="15" fill="rgb(246,141,4)" fg:x="35571" fg:w="6"/><text x="98.8229%" y="175.50"></text></g><g><title>dfbench`core::ptr::drop_in_place&lt;parquet::file::metadata::ColumnChunkMetaData&gt; (23 samples, 0.06%)</title><rect x="98.5368%" y="181" width="0.0637%" height="15" fill="rgb(229,23,39)" fg:x="35558" fg:w="23"/><text x="98.7868%" y="191.50"></text></g><g><title>dfbench`mi_free_block_mt (4 samples, 0.01%)</title><rect x="98.5895%" y="165" width="0.0111%" height="15" fill="rgb(206,12,3)" fg:x="35577" fg:w="4"/><text x="98.8395%" y="175.50"></text></g><g><title>dfbench`mi_free (5 samples, 0.01%)</title><rect x="98.6006%" y="181" width="0.0139%" height="15" fill="rgb(252,226,20)" fg:x="35581" fg:w="5"/><text x="98.8506%" y="191.50"></text></g><g><title>dfbench`mi_free_block_delayed_mt (17 samples, 0.05%)</title><rect x="98.6144%" y="181" width="0.0471%" height="15" fill="rgb(216,123,35)" fg:x="35586" fg:w="17"/><text x="98.8644%" y="191.50"></text></g><g><title>dfbench`core::ptr::drop_in_place&lt;datafusion_physical_plan::aggregates::row_hash::GroupedHashAggregateStream&gt; (58 samples, 0.16%)</title><rect x="98.5174%" y="325" width="0.1607%" height="15" fill="rgb(212,68,40)" fg:x="35551" fg:w="58"/><text x="98.7674%" y="335.50"></text></g><g><title>dfbench`core::ptr::drop_in_place&lt;datafusion_physical_plan::projection::ProjectionStream&gt; (57 samples, 0.16%)</title><rect x="98.5202%" y="309" width="0.1580%" height="15" fill="rgb(254,125,32)" fg:x="35552" fg:w="57"/><text x="98.7702%" y="319.50"></text></g><g><title>dfbench`core::ptr::drop_in_place&lt;datafusion::datasource::physical_plan::file_stream::FileStream&lt;datafusion::datasource::physical_plan::parquet::opener::ParquetOpener&gt;&gt; (57 samples, 0.16%)</title><rect x="98.5202%" y="293" width="0.1580%" height="15" fill="rgb(253,97,22)" fg:x="35552" fg:w="57"/><text x="98.7702%" y="303.50"></text></g><g><title>dfbench`core::ptr::drop_in_place&lt;datafusion::datasource::physical_plan::file_stream::FileStreamState&gt; (57 samples, 0.16%)</title><rect x="98.5202%" y="277" width="0.1580%" height="15" fill="rgb(241,101,14)" fg:x="35552" fg:w="57"/><text x="98.7702%" y="287.50"></text></g><g><title>dfbench`core::ptr::drop_in_place&lt;futures_util::stream::stream::map::Map&lt;futures_util::stream::try_stream::MapErr&lt;parquet::arrow::async_reader::ParquetRecordBatchStream&lt;alloc::boxed::Box&lt;dyn parquet::arrow::async_reader::AsyncFileReader&gt;&gt;,&lt;datafusion::datasource::physical_plan::parquet::opener::ParquetOpener as datafusion::datasource::physical_plan::file_stream::FileOpener&gt;::open::{{closure}}::{{closure}}&gt;,&lt;datafusion::datasource::physical_plan::parquet::opener::ParquetOpener as datafusion::datasource::physical_plan::file_stream::FileOpener&gt;::open::{{closure}}::{{closure}}&gt;&gt; (57 samples, 0.16%)</title><rect x="98.5202%" y="261" width="0.1580%" height="15" fill="rgb(238,103,29)" fg:x="35552" fg:w="57"/><text x="98.7702%" y="271.50"></text></g><g><title>dfbench`core::ptr::drop_in_place&lt;parquet::arrow::async_reader::ReaderFactory&lt;alloc::boxed::Box&lt;dyn parquet::arrow::async_reader::AsyncFileReader&gt;&gt;&gt; (57 samples, 0.16%)</title><rect x="98.5202%" y="245" width="0.1580%" height="15" fill="rgb(233,195,47)" fg:x="35552" fg:w="57"/><text x="98.7702%" y="255.50"></text></g><g><title>dfbench`alloc::sync::Arc&lt;T,A&gt;::drop_slow (57 samples, 0.16%)</title><rect x="98.5202%" y="229" width="0.1580%" height="15" fill="rgb(246,218,30)" fg:x="35552" fg:w="57"/><text x="98.7702%" y="239.50"></text></g><g><title>dfbench`core::ptr::drop_in_place&lt;parquet::file::metadata::ParquetMetaData&gt; (55 samples, 0.15%)</title><rect x="98.5257%" y="213" width="0.1524%" height="15" fill="rgb(219,145,47)" fg:x="35554" fg:w="55"/><text x="98.7757%" y="223.50"></text></g><g><title>dfbench`core::ptr::drop_in_place&lt;parquet::file::metadata::RowGroupMetaData&gt; (54 samples, 0.15%)</title><rect x="98.5285%" y="197" width="0.1496%" height="15" fill="rgb(243,12,26)" fg:x="35555" fg:w="54"/><text x="98.7785%" y="207.50"></text></g><g><title>dfbench`mi_free_generic_mt (4 samples, 0.01%)</title><rect x="98.6671%" y="181" width="0.0111%" height="15" fill="rgb(214,87,16)" fg:x="35605" fg:w="4"/><text x="98.9171%" y="191.50"></text></g><g><title>dfbench`datafusion_common::hash_utils::create_hashes (366 samples, 1.01%)</title><rect x="98.6782%" y="325" width="1.0142%" height="15" fill="rgb(208,99,42)" fg:x="35609" fg:w="366"/><text x="98.9282%" y="335.50"></text></g><g><title>dfbench`_mi_free_delayed_block (13 samples, 0.04%)</title><rect x="99.6979%" y="293" width="0.0360%" height="15" fill="rgb(253,99,2)" fg:x="35977" fg:w="13"/><text x="99.9479%" y="303.50"></text></g><g><title>dfbench`_mi_malloc_generic (17 samples, 0.05%)</title><rect x="99.6979%" y="309" width="0.0471%" height="15" fill="rgb(220,168,23)" fg:x="35977" fg:w="17"/><text x="99.9479%" y="319.50"></text></g><g><title>dfbench`mi_heap_malloc_zero_aligned_at_generic (18 samples, 0.05%)</title><rect x="99.6979%" y="325" width="0.0499%" height="15" fill="rgb(242,38,24)" fg:x="35977" fg:w="18"/><text x="99.9479%" y="335.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (21 samples, 0.06%)</title><rect x="99.7645%" y="293" width="0.0582%" height="15" fill="rgb(225,182,9)" fg:x="36001" fg:w="21"/><text x="100.0145%" y="303.50"></text></g><g><title>dfbench`datafusion_physical_plan::repartition::RepartitionExec::pull_from_input::_{{closure}} (25,380 samples, 70.33%)</title><rect x="29.4934%" y="341" width="70.3320%" height="15" fill="rgb(243,178,37)" fg:x="10643" fg:w="25380"/><text x="29.7434%" y="351.50">dfbench`datafusion_physical_plan::repartition::RepartitionExec::pull_from_input::_{{closure}}</text></g><g><title>dfbench`std::sys::pal::unix::time::Timespec::now (25 samples, 0.07%)</title><rect x="99.7561%" y="325" width="0.0693%" height="15" fill="rgb(232,139,19)" fg:x="35998" fg:w="25"/><text x="100.0061%" y="335.50"></text></g><g><title>libsystem_c.dylib`clock_gettime (25 samples, 0.07%)</title><rect x="99.7561%" y="309" width="0.0693%" height="15" fill="rgb(225,201,24)" fg:x="35998" fg:w="25"/><text x="100.0061%" y="319.50"></text></g><g><title>dfbench`tokio::runtime::scheduler::multi_thread::worker::Context::run_task (32,072 samples, 88.88%)</title><rect x="10.9932%" y="373" width="88.8766%" height="15" fill="rgb(221,47,46)" fg:x="3967" fg:w="32072"/><text x="11.2432%" y="383.50">dfbench`tokio::runtime::scheduler::multi_thread::worker::Context::run_task</text></g><g><title>dfbench`tokio::runtime::task::raw::poll (32,060 samples, 88.84%)</title><rect x="11.0264%" y="357" width="88.8433%" height="15" fill="rgb(249,23,13)" fg:x="3979" fg:w="32060"/><text x="11.2764%" y="367.50">dfbench`tokio::runtime::task::raw::poll</text></g><g><title>libsystem_platform.dylib`__bzero (12 samples, 0.03%)</title><rect x="99.8365%" y="341" width="0.0333%" height="15" fill="rgb(219,9,5)" fg:x="36027" fg:w="12"/><text x="100.0865%" y="351.50"></text></g><g><title>dfbench`tokio::runtime::task::harness::Harness&lt;T,S&gt;::complete (4 samples, 0.01%)</title><rect x="99.8698%" y="373" width="0.0111%" height="15" fill="rgb(254,171,16)" fg:x="36039" fg:w="4"/><text x="100.1198%" y="383.50"></text></g><g><title>dfbench`tokio::runtime::scheduler::multi_thread::worker::_&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::schedule_task (4 samples, 0.01%)</title><rect x="99.8698%" y="357" width="0.0111%" height="15" fill="rgb(230,171,20)" fg:x="36039" fg:w="4"/><text x="100.1198%" y="367.50"></text></g><g><title>dfbench`parking_lot::condvar::Condvar::notify_one_slow (4 samples, 0.01%)</title><rect x="99.8698%" y="341" width="0.0111%" height="15" fill="rgb(210,71,41)" fg:x="36039" fg:w="4"/><text x="100.1198%" y="351.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (4 samples, 0.01%)</title><rect x="99.8698%" y="325" width="0.0111%" height="15" fill="rgb(206,173,20)" fg:x="36039" fg:w="4"/><text x="100.1198%" y="335.50"></text></g><g><title>libsystem_kernel.dylib`close (37 samples, 0.10%)</title><rect x="99.8808%" y="373" width="0.1025%" height="15" fill="rgb(233,88,34)" fg:x="36043" fg:w="37"/><text x="100.1308%" y="383.50"></text></g><g><title>dfbench`std::sys::pal::unix::thread::Thread::new::thread_start (32,778 samples, 90.83%)</title><rect x="9.1559%" y="437" width="90.8330%" height="15" fill="rgb(223,209,46)" fg:x="3304" fg:w="32778"/><text x="9.4059%" y="447.50">dfbench`std::sys::pal::unix::thread::Thread::new::thread_start</text></g><g><title>dfbench`core::ops::function::FnOnce::call_once{{vtable.shim}} (32,778 samples, 90.83%)</title><rect x="9.1559%" y="421" width="90.8330%" height="15" fill="rgb(250,43,18)" fg:x="3304" fg:w="32778"/><text x="9.4059%" y="431.50">dfbench`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>dfbench`std::sys_common::backtrace::__rust_begin_short_backtrace (32,778 samples, 90.83%)</title><rect x="9.1559%" y="405" width="90.8330%" height="15" fill="rgb(208,13,10)" fg:x="3304" fg:w="32778"/><text x="9.4059%" y="415.50">dfbench`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>dfbench`tokio::runtime::task::raw::poll (32,763 samples, 90.79%)</title><rect x="9.1975%" y="389" width="90.7914%" height="15" fill="rgb(212,200,36)" fg:x="3319" fg:w="32763"/><text x="9.4475%" y="399.50">dfbench`tokio::runtime::task::raw::poll</text></g><g><title>all (36,086 samples, 100%)</title><rect x="0.0000%" y="485" width="100.0000%" height="15" fill="rgb(225,90,30)" fg:x="0" fg:w="36086"/><text x="0.2500%" y="495.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (32,782 samples, 90.84%)</title><rect x="9.1559%" y="469" width="90.8441%" height="15" fill="rgb(236,182,39)" fg:x="3304" fg:w="32782"/><text x="9.4059%" y="479.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (32,782 samples, 90.84%)</title><rect x="9.1559%" y="453" width="90.8441%" height="15" fill="rgb(212,144,35)" fg:x="3304" fg:w="32782"/><text x="9.4059%" y="463.50">libsystem_pthread.dylib`_pthread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_exit (4 samples, 0.01%)</title><rect x="99.9889%" y="437" width="0.0111%" height="15" fill="rgb(228,63,44)" fg:x="36082" fg:w="4"/><text x="100.2389%" y="447.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_tsd_cleanup (4 samples, 0.01%)</title><rect x="99.9889%" y="421" width="0.0111%" height="15" fill="rgb(228,109,6)" fg:x="36082" fg:w="4"/><text x="100.2389%" y="431.50"></text></g><g><title>dfbench`_mi_thread_done (4 samples, 0.01%)</title><rect x="99.9889%" y="405" width="0.0111%" height="15" fill="rgb(238,117,24)" fg:x="36082" fg:w="4"/><text x="100.2389%" y="415.50"></text></g><g><title>dfbench`mi_heap_collect_ex (4 samples, 0.01%)</title><rect x="99.9889%" y="389" width="0.0111%" height="15" fill="rgb(242,26,26)" fg:x="36082" fg:w="4"/><text x="100.2389%" y="399.50"></text></g></svg></svg>